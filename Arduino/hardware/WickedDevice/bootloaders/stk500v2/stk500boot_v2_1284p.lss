
stk500boot_v2_1284p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0001fcdc  00001d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cdc  0001e000  0001e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800114  00800114  00001d84  2**0
                  ALLOC
  3 .stab         00003abc  00000000  00000000  00001d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018ac  00000000  00000000  00005840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	25 c2       	rjmp	.+1098   	; 0x1e44c <__ctors_end>
   1e002:	00 00       	nop
   1e004:	48 c2       	rjmp	.+1168   	; 0x1e496 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	46 c2       	rjmp	.+1164   	; 0x1e496 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	44 c2       	rjmp	.+1160   	; 0x1e496 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	42 c2       	rjmp	.+1156   	; 0x1e496 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	40 c2       	rjmp	.+1152   	; 0x1e496 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	3e c2       	rjmp	.+1148   	; 0x1e496 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	3c c2       	rjmp	.+1144   	; 0x1e496 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	3a c2       	rjmp	.+1140   	; 0x1e496 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	38 c2       	rjmp	.+1136   	; 0x1e496 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	36 c2       	rjmp	.+1132   	; 0x1e496 <__bad_interrupt>
   1e02a:	00 00       	nop
   1e02c:	34 c2       	rjmp	.+1128   	; 0x1e496 <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	32 c2       	rjmp	.+1124   	; 0x1e496 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	30 c2       	rjmp	.+1120   	; 0x1e496 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	2e c2       	rjmp	.+1116   	; 0x1e496 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	2c c2       	rjmp	.+1112   	; 0x1e496 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	2a c2       	rjmp	.+1108   	; 0x1e496 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	28 c2       	rjmp	.+1104   	; 0x1e496 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	26 c2       	rjmp	.+1100   	; 0x1e496 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	24 c2       	rjmp	.+1096   	; 0x1e496 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	22 c2       	rjmp	.+1092   	; 0x1e496 <__bad_interrupt>
   1e052:	00 00       	nop
   1e054:	20 c2       	rjmp	.+1088   	; 0x1e496 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	1e c2       	rjmp	.+1084   	; 0x1e496 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	1c c2       	rjmp	.+1080   	; 0x1e496 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	1a c2       	rjmp	.+1076   	; 0x1e496 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	18 c2       	rjmp	.+1072   	; 0x1e496 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	16 c2       	rjmp	.+1068   	; 0x1e496 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	14 c2       	rjmp	.+1064   	; 0x1e496 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	12 c2       	rjmp	.+1060   	; 0x1e496 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	10 c2       	rjmp	.+1056   	; 0x1e496 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	0e c2       	rjmp	.+1052   	; 0x1e496 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	0c c2       	rjmp	.+1048   	; 0x1e496 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	0a c2       	rjmp	.+1044   	; 0x1e496 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	08 c2       	rjmp	.+1040   	; 0x1e496 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	06 c2       	rjmp	.+1036   	; 0x1e496 <__bad_interrupt>
	...

0001e08c <gAvrInt_RESET>:
   1e08c:	52 45 53 45 54 00                                   RESET.

0001e092 <gAvrInt_INT0>:
   1e092:	49 4e 54 30 00                                      INT0.

0001e097 <gAvrInt_INT1>:
   1e097:	49 4e 54 31 00                                      INT1.

0001e09c <gAvrInt_INT2>:
   1e09c:	49 4e 54 32 00                                      INT2.

0001e0a1 <gAvrInt_PCINT0>:
   1e0a1:	50 43 49 4e 54 30 00                                PCINT0.

0001e0a8 <gAvrInt_PCINT1>:
   1e0a8:	50 43 49 4e 54 31 00                                PCINT1.

0001e0af <gAvrInt_PCINT2>:
   1e0af:	50 43 49 4e 54 32 00                                PCINT2.

0001e0b6 <gAvrInt_PCINT3>:
   1e0b6:	50 43 49 4e 54 33 00                                PCINT3.

0001e0bd <gAvrInt_WDT>:
   1e0bd:	57 44 54 00                                         WDT.

0001e0c1 <gAvrInt_TIMER0_COMPA>:
   1e0c1:	54 49 4d 45 52 30 20 43 4f 4d 50 41 00              TIMER0 COMPA.

0001e0ce <gAvrInt_TIMER0_COMPB>:
   1e0ce:	54 49 4d 45 52 30 20 43 4f 4d 50 42 00              TIMER0 COMPB.

0001e0db <gAvrInt_TIMER0_OVF>:
   1e0db:	54 49 4d 45 52 30 20 4f 56 46 00                    TIMER0 OVF.

0001e0e6 <gAvrInt_TIMER1_CAPT>:
   1e0e6:	54 49 4d 45 52 31 20 43 41 50 54 00                 TIMER1 CAPT.

0001e0f2 <gAvrInt_TIMER1_COMPA>:
   1e0f2:	54 49 4d 45 52 31 20 43 4f 4d 50 41 00              TIMER1 COMPA.

0001e0ff <gAvrInt_TIMER1_COMPB>:
   1e0ff:	54 49 4d 45 52 31 20 43 4f 4d 50 42 00              TIMER1 COMPB.

0001e10c <gAvrInt_TIMER1_OVF>:
   1e10c:	54 49 4d 45 52 31 20 4f 56 46 00                    TIMER1 OVF.

0001e117 <gAvrInt_TIMER2_COMPA>:
   1e117:	54 49 4d 45 52 32 20 43 4f 4d 50 41 00              TIMER2 COMPA.

0001e124 <gAvrInt_TIMER2_COMPB>:
   1e124:	54 49 4d 45 52 32 20 43 4f 4d 50 42 00              TIMER2 COMPB.

0001e131 <gAvrInt_TIMER2_OVF>:
   1e131:	54 49 4d 45 52 32 20 4f 56 46 00                    TIMER2 OVF.

0001e13c <gAvrInt_TIMER3_CAPT>:
   1e13c:	54 49 4d 45 52 33 20 43 41 50 54 00                 TIMER3 CAPT.

0001e148 <gAvrInt_TIMER3_COMPA>:
   1e148:	54 49 4d 45 52 33 20 43 4f 4d 50 41 00              TIMER3 COMPA.

0001e155 <gAvrInt_TIMER3_COMPB>:
   1e155:	54 49 4d 45 52 33 20 43 4f 4d 50 42 00              TIMER3 COMPB.

0001e162 <gAvrInt_TIMER3_OVF>:
   1e162:	54 49 4d 45 52 33 20 4f 56 46 00                    TIMER3 OVF.

0001e16d <gAvrInt_USART0_RX>:
   1e16d:	55 53 41 52 54 30 20 52 58 00                       USART0 RX.

0001e177 <gAvrInt_USART0_UDRE>:
   1e177:	55 53 41 52 54 30 20 55 44 52 45 00                 USART0 UDRE.

0001e183 <gAvrInt_USART0_TX>:
   1e183:	55 53 41 52 54 30 20 54 58 00                       USART0 TX.

0001e18d <gAvrInt_USART1_RX>:
   1e18d:	55 53 41 52 54 31 20 52 58 00                       USART1 RX.

0001e197 <gAvrInt_USART1_UDRE>:
   1e197:	55 53 41 52 54 31 20 55 44 52 45 00                 USART1 UDRE.

0001e1a3 <gAvrInt_USART1_TX>:
   1e1a3:	55 53 41 52 54 31 20 54 58 00                       USART1 TX.

0001e1ad <gAvrInt_SPI_STC>:
   1e1ad:	53 50 49 20 53 54 43 00                             SPI STC.

0001e1b5 <gAvrInt_ADC>:
   1e1b5:	41 44 43 00                                         ADC.

0001e1b9 <gAvrInt_ANALOG_COMP>:
   1e1b9:	41 4e 41 4c 4f 47 20 43 4f 4d 50 00                 ANALOG COMP.

0001e1c5 <gAvrInt_EE_READY>:
   1e1c5:	45 45 20 52 45 41 44 59 00                          EE READY.

0001e1ce <gAvrInt_TWI>:
   1e1ce:	54 57 49 00                                         TWI.

0001e1d2 <gAvrInt_SPM_READY>:
   1e1d2:	53 50 4d 20 52 45 41 44 59 00                       SPM READY.

0001e1dc <gAvrInt_END>:
   1e1dc:	2a 00                                               *.

0001e1de <gInterruptNameTable>:
   1e1de:	8c e0 92 e0 97 e0 9c e0 a1 e0 a8 e0 af e0 b6 e0     ................
   1e1ee:	bd e0 17 e1 24 e1 31 e1 e6 e0 f2 e0 ff e0 0c e1     ....$.1.........
   1e1fe:	c1 e0 ce e0 db e0 ad e1 6d e1 77 e1 83 e1 b9 e1     ........m.w.....
   1e20e:	b5 e1 c5 e1 ce e1 d2 e1 8d e1 97 e1 a3 e1 3c e1     ..............<.
   1e21e:	48 e1 55 e1 62 e1                                   H.U.b.

0001e224 <gTextMsg_CPU_Name>:
   1e224:	41 54 6d 65 67 61 31 32 38 34 50 00                 ATmega1284P.

0001e230 <gTextMsg_Explorer>:
   1e230:	57 69 6c 64 66 69 72 65 20 65 78 70 6c 6f 72 65     Wildfire explore
   1e240:	72 20 73 74 6b 35 30 30 76 32 00                    r stk500v2.

0001e24b <gTextMsg_Prompt>:
   1e24b:	42 6f 6f 74 6c 6f 61 64 65 72 3e 00                 Bootloader>.

0001e257 <gTextMsg_HUH>:
   1e257:	48 75 68 3f 00                                      Huh?.

0001e25c <gTextMsg_COMPILED_ON>:
   1e25c:	43 6f 6d 70 69 6c 65 64 20 6f 6e 20 3d 20 00        Compiled on = .

0001e26b <gTextMsg_CPU_Type>:
   1e26b:	43 50 55 20 54 79 70 65 20 20 20 20 3d 20 00        CPU Type    = .

0001e27a <gTextMsg_AVR_ARCH>:
   1e27a:	5f 5f 41 56 52 5f 41 52 43 48 5f 5f 3d 20 00        __AVR_ARCH__= .

0001e289 <gTextMsg_AVR_LIBC>:
   1e289:	41 56 52 20 4c 69 62 43 20 56 65 72 3d 20 00        AVR LibC Ver= .

0001e298 <gTextMsg_GCC_VERSION>:
   1e298:	47 43 43 20 56 65 72 73 69 6f 6e 20 3d 20 00        GCC Version = .

0001e2a7 <gTextMsg_CPU_SIGNATURE>:
   1e2a7:	43 50 55 20 49 44 20 20 20 20 20 20 3d 20 00        CPU ID      = .

0001e2b6 <gTextMsg_FUSE_BYTE_LOW>:
   1e2b6:	4c 6f 77 20 66 75 73 65 20 20 20 20 3d 20 00        Low fuse    = .

0001e2c5 <gTextMsg_FUSE_BYTE_HIGH>:
   1e2c5:	48 69 67 68 20 66 75 73 65 20 20 20 3d 20 00        High fuse   = .

0001e2d4 <gTextMsg_FUSE_BYTE_EXT>:
   1e2d4:	45 78 74 20 66 75 73 65 20 20 20 20 3d 20 00        Ext fuse    = .

0001e2e3 <gTextMsg_FUSE_BYTE_LOCK>:
   1e2e3:	4c 6f 63 6b 20 66 75 73 65 20 20 20 3d 20 00        Lock fuse   = .

0001e2f2 <gTextMsg_GCC_DATE_STR>:
   1e2f2:	53 65 70 20 32 35 20 32 30 31 33 00                 Sep 25 2013.

0001e2fe <gTextMsg_AVR_LIBC_VER_STR>:
   1e2fe:	31 2e 37 2e 31 00                                   1.7.1.

0001e304 <gTextMsg_GCC_VERSION_STR>:
   1e304:	34 2e 35 2e 33 00                                   4.5.3.

0001e30a <gTextMsg_VECTOR_HEADER>:
   1e30a:	56 23 20 20 20 41 44 44 52 20 20 20 6f 70 20 63     V#   ADDR   op c
   1e31a:	6f 64 65 20 20 20 20 20 69 6e 73 74 72 75 63 74     ode     instruct
   1e32a:	69 6f 6e 20 61 64 64 72 20 20 20 49 6e 74 65 72     ion addr   Inter
   1e33a:	72 75 70 74 00                                      rupt.

0001e33f <gTextMsg_noVector>:
   1e33f:	6e 6f 20 76 65 63 74 6f 72 00                       no vector.

0001e349 <gTextMsg_rjmp>:
   1e349:	72 6a 6d 70 20 20 00                                rjmp  .

0001e350 <gTextMsg_jmp>:
   1e350:	6a 6d 70 20 00                                      jmp .

0001e355 <gTextMsg_WHAT_PORT>:
   1e355:	57 68 61 74 20 70 6f 72 74 3a 00                    What port:.

0001e360 <gTextMsg_PortNotSupported>:
   1e360:	50 6f 72 74 20 6e 6f 74 20 73 75 70 70 6f 72 74     Port not support
   1e370:	65 64 00                                            ed.

0001e373 <gTextMsg_MustBeLetter>:
   1e373:	4d 75 73 74 20 62 65 20 61 20 6c 65 74 74 65 72     Must be a letter
	...

0001e384 <gTextMsg_SPACE>:
   1e384:	20 00                                                .

0001e386 <gTextMsg_WriteToEEprom>:
   1e386:	57 72 69 74 69 6e 67 20 45 45 00                    Writing EE.

0001e391 <gTextMsg_ReadingEEprom>:
   1e391:	52 65 61 64 69 6e 67 20 45 45 00                    Reading EE.

0001e39c <gTextMsg_EEPROMerrorCnt>:
   1e39c:	45 45 20 65 72 72 20 63 6e 74 3d 00                 EE err cnt=.

0001e3a8 <gTextMsg_PORT>:
   1e3a8:	50 4f 52 54 00                                      PORT.

0001e3ad <gTextMsg_HELP_MSG_0>:
   1e3ad:	30 3d 5a 65 72 6f 20 61 64 64 72 00                 0=Zero addr.

0001e3b9 <gTextMsg_HELP_MSG_QM>:
   1e3b9:	3f 3d 43 50 55 20 73 74 61 74 73 00                 ?=CPU stats.

0001e3c5 <gTextMsg_HELP_MSG_AT>:
   1e3c5:	40 3d 45 45 50 52 4f 4d 20 74 65 73 74 00           @=EEPROM test.

0001e3d3 <gTextMsg_HELP_MSG_B>:
   1e3d3:	42 3d 42 6c 69 6e 6b 20 4c 45 44 00                 B=Blink LED.

0001e3df <gTextMsg_HELP_MSG_E>:
   1e3df:	45 3d 44 75 6d 70 20 45 45 50 52 4f 4d 00           E=Dump EEPROM.

0001e3ed <gTextMsg_HELP_MSG_F>:
   1e3ed:	46 3d 44 75 6d 70 20 46 4c 41 53 48 00              F=Dump FLASH.

0001e3fa <gTextMsg_HELP_MSG_H>:
   1e3fa:	48 3d 48 65 6c 70 00                                H=Help.

0001e401 <gTextMsg_HELP_MSG_L>:
   1e401:	4c 3d 4c 69 73 74 20 49 2f 4f 20 50 6f 72 74 73     L=List I/O Ports
	...

0001e412 <gTextMsg_HELP_MSG_Q>:
   1e412:	51 3d 51 75 69 74 00                                Q=Quit.

0001e419 <gTextMsg_HELP_MSG_R>:
   1e419:	52 3d 44 75 6d 70 20 52 41 4d 00                    R=Dump RAM.

0001e424 <gTextMsg_HELP_MSG_V>:
   1e424:	56 3d 73 68 6f 77 20 69 6e 74 65 72 72 75 70 74     V=show interrupt
   1e434:	20 56 65 63 74 6f 72 73 00                           Vectors.

0001e43d <gTextMsg_HELP_MSG_Y>:
   1e43d:	59 3d 50 6f 72 74 20 62 6c 69 6e 6b 00              Y=Port blink.

0001e44a <gTextMsg_END>:
   1e44a:	2a 00                                               *.

0001e44c <__ctors_end>:
   1e44c:	11 24       	eor	r1, r1
   1e44e:	1f be       	out	0x3f, r1	; 63
   1e450:	cf ef       	ldi	r28, 0xFF	; 255
   1e452:	d0 e4       	ldi	r29, 0x40	; 64
   1e454:	de bf       	out	0x3e, r29	; 62
   1e456:	cd bf       	out	0x3d, r28	; 61

0001e458 <__do_copy_data>:
   1e458:	11 e0       	ldi	r17, 0x01	; 1
   1e45a:	a0 e0       	ldi	r26, 0x00	; 0
   1e45c:	b1 e0       	ldi	r27, 0x01	; 1
   1e45e:	ec ed       	ldi	r30, 0xDC	; 220
   1e460:	fc ef       	ldi	r31, 0xFC	; 252
   1e462:	01 e0       	ldi	r16, 0x01	; 1
   1e464:	0b bf       	out	0x3b, r16	; 59
   1e466:	02 c0       	rjmp	.+4      	; 0x1e46c <__do_copy_data+0x14>
   1e468:	07 90       	elpm	r0, Z+
   1e46a:	0d 92       	st	X+, r0
   1e46c:	a4 31       	cpi	r26, 0x14	; 20
   1e46e:	b1 07       	cpc	r27, r17
   1e470:	d9 f7       	brne	.-10     	; 0x1e468 <__do_copy_data+0x10>

0001e472 <__do_clear_bss>:
   1e472:	11 e0       	ldi	r17, 0x01	; 1
   1e474:	a4 e1       	ldi	r26, 0x14	; 20
   1e476:	b1 e0       	ldi	r27, 0x01	; 1
   1e478:	01 c0       	rjmp	.+2      	; 0x1e47c <.do_clear_bss_start>

0001e47a <.do_clear_bss_loop>:
   1e47a:	1d 92       	st	X+, r1

0001e47c <.do_clear_bss_start>:
   1e47c:	a2 32       	cpi	r26, 0x22	; 34
   1e47e:	b1 07       	cpc	r27, r17
   1e480:	e1 f7       	brne	.-8      	; 0x1e47a <.do_clear_bss_loop>
   1e482:	b3 d1       	rcall	.+870    	; 0x1e7ea <main>
   1e484:	0c 94 6c fe 	jmp	0x1fcd8	; 0x1fcd8 <_exit>

0001e488 <__jumpMain>:
   1e488:	00 e4       	ldi	r16, 0x40	; 64
   1e48a:	0e bf       	out	0x3e, r16	; 62
   1e48c:	0f ef       	ldi	r16, 0xFF	; 255
   1e48e:	0d bf       	out	0x3d, r16	; 61
   1e490:	11 24       	eor	r1, r1
   1e492:	1f be       	out	0x3f, r1	; 63
   1e494:	aa c1       	rjmp	.+852    	; 0x1e7ea <main>

0001e496 <__bad_interrupt>:
   1e496:	b4 cd       	rjmp	.-1176   	; 0x1e000 <__vectors>

0001e498 <PrintFromPROGMEM>:
//************************************************************************
void	PrintFromPROGMEM(const void *dataPtr, uint8_t offset)
{
	uint8_t	theChar;

	dataPtr    +=  offset;
   1e498:	9c 01       	movw	r18, r24
   1e49a:	26 0f       	add	r18, r22
   1e49c:	31 1d       	adc	r19, r1

	do {
	#if (FLASHEND > 0x10000)
		theChar	=	pgm_read_byte_far((uint32_t)dataPtr++);
   1e49e:	c9 01       	movw	r24, r18
   1e4a0:	aa 27       	eor	r26, r26
   1e4a2:	97 fd       	sbrc	r25, 7
   1e4a4:	a0 95       	com	r26
   1e4a6:	ba 2f       	mov	r27, r26
   1e4a8:	ab bf       	out	0x3b, r26	; 59
   1e4aa:	fc 01       	movw	r30, r24
   1e4ac:	87 91       	elpm	r24, Z+
	#else
		theChar	=	pgm_read_byte_near((uint16_t)dataPtr++);
	#endif
		if (theChar != 0)
   1e4ae:	88 23       	and	r24, r24
   1e4b0:	b9 f0       	breq	.+46     	; 0x1e4e0 <PrintFromPROGMEM+0x48>

	dataPtr    +=  offset;

	do {
	#if (FLASHEND > 0x10000)
		theChar	=	pgm_read_byte_far((uint32_t)dataPtr++);
   1e4b2:	2f 5f       	subi	r18, 0xFF	; 255
   1e4b4:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e4b6:	80 93 c6 00 	sts	0x00C6, r24
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e4ba:	80 91 c0 00 	lds	r24, 0x00C0
   1e4be:	86 ff       	sbrs	r24, 6
   1e4c0:	fc cf       	rjmp	.-8      	; 0x1e4ba <PrintFromPROGMEM+0x22>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e4c2:	80 91 c0 00 	lds	r24, 0x00C0
   1e4c6:	80 64       	ori	r24, 0x40	; 64
   1e4c8:	80 93 c0 00 	sts	0x00C0, r24

	dataPtr    +=  offset;

	do {
	#if (FLASHEND > 0x10000)
		theChar	=	pgm_read_byte_far((uint32_t)dataPtr++);
   1e4cc:	c9 01       	movw	r24, r18
   1e4ce:	aa 27       	eor	r26, r26
   1e4d0:	97 fd       	sbrc	r25, 7
   1e4d2:	a0 95       	com	r26
   1e4d4:	ba 2f       	mov	r27, r26
   1e4d6:	ab bf       	out	0x3b, r26	; 59
   1e4d8:	fc 01       	movw	r30, r24
   1e4da:	87 91       	elpm	r24, Z+
	#else
		theChar	=	pgm_read_byte_near((uint16_t)dataPtr++);
	#endif
		if (theChar != 0)
   1e4dc:	88 23       	and	r24, r24
   1e4de:	49 f7       	brne	.-46     	; 0x1e4b2 <PrintFromPROGMEM+0x1a>
   1e4e0:	08 95       	ret

0001e4e2 <PrintNewLine>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e4e2:	8d e0       	ldi	r24, 0x0D	; 13
   1e4e4:	80 93 c6 00 	sts	0x00C6, r24
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e4e8:	20 91 c0 00 	lds	r18, 0x00C0
   1e4ec:	26 ff       	sbrs	r18, 6
   1e4ee:	fc cf       	rjmp	.-8      	; 0x1e4e8 <PrintNewLine+0x6>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e4f0:	40 91 c0 00 	lds	r20, 0x00C0
   1e4f4:	40 64       	ori	r20, 0x40	; 64
   1e4f6:	40 93 c0 00 	sts	0x00C0, r20
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e4fa:	3a e0       	ldi	r19, 0x0A	; 10
   1e4fc:	30 93 c6 00 	sts	0x00C6, r19
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e500:	50 91 c0 00 	lds	r21, 0x00C0
   1e504:	56 ff       	sbrs	r21, 6
   1e506:	fc cf       	rjmp	.-8      	; 0x1e500 <PrintNewLine+0x1e>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e508:	60 91 c0 00 	lds	r22, 0x00C0
   1e50c:	60 64       	ori	r22, 0x40	; 64
   1e50e:	60 93 c0 00 	sts	0x00C0, r22
//************************************************************************
void	PrintNewLine(void)
{
	sendchar(0x0d);
	sendchar(0x0a);
}
   1e512:	08 95       	ret

0001e514 <PrintAvailablePort>:
	}
}

//************************************************************************
static void	PrintAvailablePort(uint8_t thePortLetter)
{
   1e514:	1f 93       	push	r17
   1e516:	18 2f       	mov	r17, r24
	PrintFromPROGMEM(gTextMsg_PORT, 0);
   1e518:	88 ea       	ldi	r24, 0xA8	; 168
   1e51a:	93 ee       	ldi	r25, 0xE3	; 227
   1e51c:	60 e0       	ldi	r22, 0x00	; 0
   1e51e:	bc df       	rcall	.-136    	; 0x1e498 <PrintFromPROGMEM>
   1e520:	10 93 c6 00 	sts	0x00C6, r17
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e524:	80 91 c0 00 	lds	r24, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e528:	86 ff       	sbrs	r24, 6
   1e52a:	fc cf       	rjmp	.-8      	; 0x1e524 <PrintAvailablePort+0x10>
   1e52c:	20 91 c0 00 	lds	r18, 0x00C0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e530:	20 64       	ori	r18, 0x40	; 64
   1e532:	20 93 c0 00 	sts	0x00C0, r18
   1e536:	d5 df       	rcall	.-86     	; 0x1e4e2 <PrintNewLine>
//************************************************************************
static void	PrintAvailablePort(uint8_t thePortLetter)
{
	PrintFromPROGMEM(gTextMsg_PORT, 0);
	sendchar(thePortLetter);
	PrintNewLine();
   1e538:	1f 91       	pop	r17
   1e53a:	08 95       	ret

0001e53c <PrintFromPROGMEMln>:


//************************************************************************
void	PrintFromPROGMEMln(const void *dataPtr, uint8_t offset)
{
	PrintFromPROGMEM(dataPtr, offset);
   1e53c:	ad df       	rcall	.-166    	; 0x1e498 <PrintFromPROGMEM>
   1e53e:	d1 cf       	rjmp	.-94     	; 0x1e4e2 <PrintNewLine>

0001e540 <PrintString>:
}


//************************************************************************
void	PrintString(uint8_t* textString)
{
   1e540:	fc 01       	movw	r30, r24
uint8_t	theChar;
uint16_t ii = 0;

	do{
		theChar	=	textString[ii++];
   1e542:	80 81       	ld	r24, Z
		if (theChar != 0)
   1e544:	88 23       	and	r24, r24
   1e546:	79 f0       	breq	.+30     	; 0x1e566 <PrintString+0x26>
	PrintNewLine();
}


//************************************************************************
void	PrintString(uint8_t* textString)
   1e548:	31 96       	adiw	r30, 0x01	; 1
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e54a:	80 93 c6 00 	sts	0x00C6, r24
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e54e:	80 91 c0 00 	lds	r24, 0x00C0
   1e552:	86 ff       	sbrs	r24, 6
   1e554:	fc cf       	rjmp	.-8      	; 0x1e54e <PrintString+0xe>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e556:	20 91 c0 00 	lds	r18, 0x00C0
   1e55a:	20 64       	ori	r18, 0x40	; 64
   1e55c:	20 93 c0 00 	sts	0x00C0, r18
{
uint8_t	theChar;
uint16_t ii = 0;

	do{
		theChar	=	textString[ii++];
   1e560:	81 91       	ld	r24, Z+
		if (theChar != 0)
   1e562:	88 23       	and	r24, r24
   1e564:	91 f7       	brne	.-28     	; 0x1e54a <PrintString+0xa>
   1e566:	08 95       	ret

0001e568 <PrintHexByte>:
//************************************************************************
void	PrintHexByte(uint8_t theByte)
{
uint8_t	theChar;

	theChar	=	0x30 + ((theByte >> 4) & 0x0f);
   1e568:	28 2f       	mov	r18, r24
   1e56a:	22 95       	swap	r18
   1e56c:	2f 70       	andi	r18, 0x0F	; 15
   1e56e:	92 2f       	mov	r25, r18
   1e570:	90 5d       	subi	r25, 0xD0	; 208
	if (theChar > 0x39)
   1e572:	9a 33       	cpi	r25, 0x3A	; 58
   1e574:	08 f0       	brcs	.+2      	; 0x1e578 <PrintHexByte+0x10>
	{
		theChar	+=	7;
   1e576:	99 5f       	subi	r25, 0xF9	; 249
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e578:	90 93 c6 00 	sts	0x00C6, r25
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e57c:	90 91 c0 00 	lds	r25, 0x00C0
   1e580:	96 ff       	sbrs	r25, 6
   1e582:	fc cf       	rjmp	.-8      	; 0x1e57c <PrintHexByte+0x14>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e584:	30 91 c0 00 	lds	r19, 0x00C0
   1e588:	30 64       	ori	r19, 0x40	; 64
   1e58a:	30 93 c0 00 	sts	0x00C0, r19
	{
		theChar	+=	7;
	}
	sendchar(theChar );

	theChar	=	0x30 + (theByte & 0x0f);
   1e58e:	8f 70       	andi	r24, 0x0F	; 15
   1e590:	98 2f       	mov	r25, r24
   1e592:	90 5d       	subi	r25, 0xD0	; 208
	if (theChar > 0x39)
   1e594:	9a 33       	cpi	r25, 0x3A	; 58
   1e596:	08 f0       	brcs	.+2      	; 0x1e59a <PrintHexByte+0x32>
	{
		theChar	+=	7;
   1e598:	99 5f       	subi	r25, 0xF9	; 249
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e59a:	90 93 c6 00 	sts	0x00C6, r25
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e59e:	80 91 c0 00 	lds	r24, 0x00C0
   1e5a2:	86 ff       	sbrs	r24, 6
   1e5a4:	fc cf       	rjmp	.-8      	; 0x1e59e <PrintHexByte+0x36>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e5a6:	40 91 c0 00 	lds	r20, 0x00C0
   1e5aa:	40 64       	ori	r20, 0x40	; 64
   1e5ac:	40 93 c0 00 	sts	0x00C0, r20
	if (theChar > 0x39)
	{
		theChar	+=	7;
	}
	sendchar(theChar );
}
   1e5b0:	08 95       	ret

0001e5b2 <DumpHex.clone.0>:
	kDUMP_EEPROM,
	kDUMP_RAM
};

//************************************************************************
static void	DumpHex(uint8_t dumpWhat, uint32_t startAddress, uint8_t numRows)
   1e5b2:	2f 92       	push	r2
   1e5b4:	3f 92       	push	r3
   1e5b6:	4f 92       	push	r4
   1e5b8:	5f 92       	push	r5
   1e5ba:	6f 92       	push	r6
   1e5bc:	7f 92       	push	r7
   1e5be:	8f 92       	push	r8
   1e5c0:	9f 92       	push	r9
   1e5c2:	af 92       	push	r10
   1e5c4:	bf 92       	push	r11
   1e5c6:	cf 92       	push	r12
   1e5c8:	df 92       	push	r13
   1e5ca:	ef 92       	push	r14
   1e5cc:	ff 92       	push	r15
   1e5ce:	0f 93       	push	r16
   1e5d0:	1f 93       	push	r17
   1e5d2:	df 93       	push	r29
   1e5d4:	cf 93       	push	r28
   1e5d6:	cd b7       	in	r28, 0x3d	; 61
   1e5d8:	de b7       	in	r29, 0x3e	; 62
   1e5da:	67 97       	sbiw	r28, 0x17	; 23
   1e5dc:	0f b6       	in	r0, 0x3f	; 63
   1e5de:	f8 94       	cli
   1e5e0:	de bf       	out	0x3e, r29	; 62
   1e5e2:	0f be       	out	0x3f, r0	; 63
   1e5e4:	cd bf       	out	0x3d, r28	; 61
   1e5e6:	8b 8b       	std	Y+19, r24	; 0x13
   1e5e8:	1a 01       	movw	r2, r20
   1e5ea:	2b 01       	movw	r4, r22
   1e5ec:	db 01       	movw	r26, r22
   1e5ee:	ca 01       	movw	r24, r20
   1e5f0:	80 50       	subi	r24, 0x00	; 0
   1e5f2:	9f 4f       	sbci	r25, 0xFF	; 255
   1e5f4:	af 4f       	sbci	r26, 0xFF	; 255
   1e5f6:	bf 4f       	sbci	r27, 0xFF	; 255
   1e5f8:	8c 8b       	std	Y+20, r24	; 0x14
   1e5fa:	9d 8b       	std	Y+21, r25	; 0x15
   1e5fc:	ae 8b       	std	Y+22, r26	; 0x16
   1e5fe:	bf 8b       	std	Y+23, r27	; 0x17
	uint8_t	asciiDump[18];
	uint8_t	*ramPtr;


	ramPtr				=	0;
	theValue			=	0;
   1e600:	99 24       	eor	r9, r9
   1e602:	5e 01       	movw	r10, r28
   1e604:	08 94       	sec
   1e606:	a1 1c       	adc	r10, r1
   1e608:	b1 1c       	adc	r11, r1
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e60a:	20 e2       	ldi	r18, 0x20	; 32
   1e60c:	82 2e       	mov	r8, r18
   1e60e:	9d e2       	ldi	r25, 0x2D	; 45
   1e610:	69 2e       	mov	r6, r25
			{
				asciiDump[ii % 16]	=	theValue;
			}
			else
			{
				asciiDump[ii % 16]	=	'.';
   1e612:	8e e2       	ldi	r24, 0x2E	; 46
   1e614:	78 2e       	mov	r7, r24
	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0)
	{
		if (myAddressPointer > 0x10000)
   1e616:	91 e0       	ldi	r25, 0x01	; 1
   1e618:	29 16       	cp	r2, r25
   1e61a:	90 e0       	ldi	r25, 0x00	; 0
   1e61c:	39 06       	cpc	r3, r25
   1e61e:	91 e0       	ldi	r25, 0x01	; 1
   1e620:	49 06       	cpc	r4, r25
   1e622:	90 e0       	ldi	r25, 0x00	; 0
   1e624:	59 06       	cpc	r5, r25
   1e626:	08 f0       	brcs	.+2      	; 0x1e62a <DumpHex.clone.0+0x78>
   1e628:	97 c0       	rjmp	.+302    	; 0x1e758 <DumpHex.clone.0+0x1a6>
		{
			PrintHexByte((myAddressPointer >> 16) & 0x00ff);
		}
		PrintHexByte((myAddressPointer >> 8) & 0x00ff);
   1e62a:	83 2d       	mov	r24, r3
   1e62c:	9d df       	rcall	.-198    	; 0x1e568 <PrintHexByte>
   1e62e:	82 2d       	mov	r24, r2
		PrintHexByte(myAddressPointer & 0x00ff);
   1e630:	9b df       	rcall	.-202    	; 0x1e568 <PrintHexByte>
   1e632:	80 92 c6 00 	sts	0x00C6, r8
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e636:	80 91 c0 00 	lds	r24, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e63a:	86 ff       	sbrs	r24, 6
   1e63c:	fc cf       	rjmp	.-8      	; 0x1e636 <DumpHex.clone.0+0x84>
   1e63e:	00 91 c0 00 	lds	r16, 0x00C0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e642:	00 64       	ori	r16, 0x40	; 64
   1e644:	00 93 c0 00 	sts	0x00C0, r16
   1e648:	60 92 c6 00 	sts	0x00C6, r6
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e64c:	c0 90 c0 00 	lds	r12, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e650:	c6 fe       	sbrs	r12, 6
   1e652:	fc cf       	rjmp	.-8      	; 0x1e64c <DumpHex.clone.0+0x9a>
   1e654:	10 91 c0 00 	lds	r17, 0x00C0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e658:	10 64       	ori	r17, 0x40	; 64
   1e65a:	10 93 c0 00 	sts	0x00C0, r17
   1e65e:	80 92 c6 00 	sts	0x00C6, r8
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e662:	d0 90 c0 00 	lds	r13, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e666:	d6 fe       	sbrs	r13, 6
   1e668:	fc cf       	rjmp	.-8      	; 0x1e662 <DumpHex.clone.0+0xb0>
   1e66a:	20 91 c0 00 	lds	r18, 0x00C0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e66e:	20 64       	ori	r18, 0x40	; 64
   1e670:	20 93 c0 00 	sts	0x00C0, r18
   1e674:	19 82       	std	Y+1, r1	; 0x01
   1e676:	72 01       	movw	r14, r4
		PrintHexByte(myAddressPointer & 0x00ff);
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);

		asciiDump[0]		=	0;
   1e678:	61 01       	movw	r12, r2
   1e67a:	00 e0       	ldi	r16, 0x00	; 0
   1e67c:	10 e0       	ldi	r17, 0x00	; 0
   1e67e:	ab 89       	ldd	r26, Y+19	; 0x13
   1e680:	a1 30       	cpi	r26, 0x01	; 1
		for (uint8_t ii=0; ii<16; ii++)
		{
			switch(dumpWhat)
   1e682:	09 f4       	brne	.+2      	; 0x1e686 <DumpHex.clone.0+0xd4>
   1e684:	64 c0       	rjmp	.+200    	; 0x1e74e <DumpHex.clone.0+0x19c>
   1e686:	a1 30       	cpi	r26, 0x01	; 1
   1e688:	08 f0       	brcs	.+2      	; 0x1e68c <DumpHex.clone.0+0xda>
   1e68a:	5b c0       	rjmp	.+182    	; 0x1e742 <DumpHex.clone.0+0x190>
   1e68c:	eb be       	out	0x3b, r14	; 59
   1e68e:	f6 01       	movw	r30, r12
			{
				case kDUMP_FLASH:
				#if (FLASHEND > 0x10000)
					theValue	=	pgm_read_byte_far(myAddressPointer);
   1e690:	97 90       	elpm	r9, Z+
   1e692:	89 2d       	mov	r24, r9
   1e694:	69 df       	rcall	.-302    	; 0x1e568 <PrintHexByte>
				case kDUMP_RAM:
					theValue	=	ramPtr[myAddressPointer];
					break;

			}
			PrintHexByte(theValue);
   1e696:	80 92 c6 00 	sts	0x00C6, r8
   1e69a:	30 91 c0 00 	lds	r19, 0x00C0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e69e:	36 ff       	sbrs	r19, 6
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e6a0:	fc cf       	rjmp	.-8      	; 0x1e69a <DumpHex.clone.0+0xe8>
   1e6a2:	50 91 c0 00 	lds	r21, 0x00C0
   1e6a6:	50 64       	ori	r21, 0x40	; 64
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e6a8:	50 93 c0 00 	sts	0x00C0, r21
   1e6ac:	49 2d       	mov	r20, r9
   1e6ae:	40 52       	subi	r20, 0x20	; 32
   1e6b0:	4f 35       	cpi	r20, 0x5F	; 95
					break;

			}
			PrintHexByte(theValue);
			sendchar(0x20);
			if ((theValue >= 0x20) && (theValue < 0x7f))
   1e6b2:	08 f0       	brcs	.+2      	; 0x1e6b6 <DumpHex.clone.0+0x104>
   1e6b4:	3f c0       	rjmp	.+126    	; 0x1e734 <DumpHex.clone.0+0x182>
   1e6b6:	f8 01       	movw	r30, r16
   1e6b8:	ef 70       	andi	r30, 0x0F	; 15
   1e6ba:	f0 70       	andi	r31, 0x00	; 0
			{
				asciiDump[ii % 16]	=	theValue;
   1e6bc:	ea 0d       	add	r30, r10
   1e6be:	fb 1d       	adc	r31, r11
   1e6c0:	90 82       	st	Z, r9
   1e6c2:	08 94       	sec
   1e6c4:	c1 1c       	adc	r12, r1
   1e6c6:	d1 1c       	adc	r13, r1
			else
			{
				asciiDump[ii % 16]	=	'.';
			}

			myAddressPointer++;
   1e6c8:	e1 1c       	adc	r14, r1
   1e6ca:	f1 1c       	adc	r15, r1
   1e6cc:	0f 5f       	subi	r16, 0xFF	; 255
   1e6ce:	1f 4f       	sbci	r17, 0xFF	; 255
   1e6d0:	00 31       	cpi	r16, 0x10	; 16
   1e6d2:	11 05       	cpc	r17, r1
   1e6d4:	a1 f6       	brne	.-88     	; 0x1e67e <DumpHex.clone.0+0xcc>
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);

		asciiDump[0]		=	0;
		for (uint8_t ii=0; ii<16; ii++)
   1e6d6:	80 e1       	ldi	r24, 0x10	; 16
   1e6d8:	90 e0       	ldi	r25, 0x00	; 0
   1e6da:	a0 e0       	ldi	r26, 0x00	; 0
   1e6dc:	b0 e0       	ldi	r27, 0x00	; 0
   1e6de:	28 0e       	add	r2, r24
   1e6e0:	39 1e       	adc	r3, r25
   1e6e2:	4a 1e       	adc	r4, r26
   1e6e4:	5b 1e       	adc	r5, r27
   1e6e6:	19 8a       	std	Y+17, r1	; 0x11
   1e6e8:	c5 01       	movw	r24, r10
   1e6ea:	2a df       	rcall	.-428    	; 0x1e540 <PrintString>
				asciiDump[ii % 16]	=	'.';
			}

			myAddressPointer++;
		}
		asciiDump[16]	=	0;
   1e6ec:	fa de       	rcall	.-524    	; 0x1e4e2 <PrintNewLine>
		PrintString(asciiDump);
   1e6ee:	8c 89       	ldd	r24, Y+20	; 0x14
   1e6f0:	9d 89       	ldd	r25, Y+21	; 0x15
   1e6f2:	ae 89       	ldd	r26, Y+22	; 0x16
		PrintNewLine();
   1e6f4:	bf 89       	ldd	r27, Y+23	; 0x17
   1e6f6:	28 16       	cp	r2, r24


	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0)
   1e6f8:	39 06       	cpc	r3, r25
   1e6fa:	4a 06       	cpc	r4, r26
   1e6fc:	5b 06       	cpc	r5, r27
   1e6fe:	09 f0       	breq	.+2      	; 0x1e702 <DumpHex.clone.0+0x150>
   1e700:	8a cf       	rjmp	.-236    	; 0x1e616 <DumpHex.clone.0+0x64>
   1e702:	67 96       	adiw	r28, 0x17	; 23
   1e704:	0f b6       	in	r0, 0x3f	; 63
   1e706:	f8 94       	cli
   1e708:	de bf       	out	0x3e, r29	; 62
   1e70a:	0f be       	out	0x3f, r0	; 63
		PrintString(asciiDump);
		PrintNewLine();

		numRows--;
	}
}
   1e70c:	cd bf       	out	0x3d, r28	; 61
   1e70e:	cf 91       	pop	r28
   1e710:	df 91       	pop	r29
   1e712:	1f 91       	pop	r17
   1e714:	0f 91       	pop	r16
   1e716:	ff 90       	pop	r15
   1e718:	ef 90       	pop	r14
   1e71a:	df 90       	pop	r13
   1e71c:	cf 90       	pop	r12
   1e71e:	bf 90       	pop	r11
   1e720:	af 90       	pop	r10
   1e722:	9f 90       	pop	r9
   1e724:	8f 90       	pop	r8
   1e726:	7f 90       	pop	r7
   1e728:	6f 90       	pop	r6
   1e72a:	5f 90       	pop	r5
   1e72c:	4f 90       	pop	r4
   1e72e:	3f 90       	pop	r3
   1e730:	2f 90       	pop	r2
   1e732:	08 95       	ret
   1e734:	f8 01       	movw	r30, r16
   1e736:	ef 70       	andi	r30, 0x0F	; 15
   1e738:	f0 70       	andi	r31, 0x00	; 0
   1e73a:	ea 0d       	add	r30, r10
   1e73c:	fb 1d       	adc	r31, r11
			{
				asciiDump[ii % 16]	=	theValue;
			}
			else
			{
				asciiDump[ii % 16]	=	'.';
   1e73e:	70 82       	st	Z, r7
   1e740:	c0 cf       	rjmp	.-128    	; 0x1e6c2 <DumpHex.clone.0+0x110>
   1e742:	a2 30       	cpi	r26, 0x02	; 2
   1e744:	09 f0       	breq	.+2      	; 0x1e748 <DumpHex.clone.0+0x196>
   1e746:	a5 cf       	rjmp	.-182    	; 0x1e692 <DumpHex.clone.0+0xe0>
   1e748:	f6 01       	movw	r30, r12
   1e74a:	90 80       	ld	r9, Z
		sendchar(0x20);

		asciiDump[0]		=	0;
		for (uint8_t ii=0; ii<16; ii++)
		{
			switch(dumpWhat)
   1e74c:	a2 cf       	rjmp	.-188    	; 0x1e692 <DumpHex.clone.0+0xe0>
   1e74e:	c6 01       	movw	r24, r12
   1e750:	0e 94 52 fe 	call	0x1fca4	; 0x1fca4 <__eerd_byte_m1284p>
				case kDUMP_EEPROM:
					theValue	=	eeprom_read_byte((uint8_t *)(uint16_t)myAddressPointer);
					break;

				case kDUMP_RAM:
					theValue	=	ramPtr[myAddressPointer];
   1e754:	98 2e       	mov	r9, r24
   1e756:	9d cf       	rjmp	.-198    	; 0x1e692 <DumpHex.clone.0+0xe0>
					theValue	=	pgm_read_byte_near((uint16_t)myAddressPointer);
				#endif
					break;

				case kDUMP_EEPROM:
					theValue	=	eeprom_read_byte((uint8_t *)(uint16_t)myAddressPointer);
   1e758:	84 2d       	mov	r24, r4
   1e75a:	06 df       	rcall	.-500    	; 0x1e568 <PrintHexByte>
   1e75c:	66 cf       	rjmp	.-308    	; 0x1e62a <DumpHex.clone.0+0x78>

0001e75e <PrintDecInt>:
	sendchar(theChar );
}

//************************************************************************
void	PrintDecInt(int16_t theNumber, int16_t digitCnt)
{
   1e75e:	9c 01       	movw	r18, r24
   1e760:	fb 01       	movw	r30, r22
uint8_t	theChar;
int16_t	myNumber;

	myNumber	=	theNumber;

	if ((myNumber > 100) || (digitCnt >= 3))
   1e762:	85 36       	cpi	r24, 0x65	; 101
   1e764:	91 05       	cpc	r25, r1
   1e766:	1c f4       	brge	.+6      	; 0x1e76e <PrintDecInt+0x10>
   1e768:	63 30       	cpi	r22, 0x03	; 3
   1e76a:	71 05       	cpc	r23, r1
   1e76c:	8c f0       	brlt	.+34     	; 0x1e790 <PrintDecInt+0x32>
	{
		theChar		=	(uint8_t)(0x30 + myNumber / 100);
   1e76e:	c9 01       	movw	r24, r18
   1e770:	64 e6       	ldi	r22, 0x64	; 100
   1e772:	70 e0       	ldi	r23, 0x00	; 0
   1e774:	0e 94 09 fe 	call	0x1fc12	; 0x1fc12 <__divmodhi4>
   1e778:	60 5d       	subi	r22, 0xD0	; 208
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e77a:	60 93 c6 00 	sts	0x00C6, r22
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e77e:	80 91 c0 00 	lds	r24, 0x00C0
   1e782:	86 ff       	sbrs	r24, 6
   1e784:	fc cf       	rjmp	.-8      	; 0x1e77e <PrintDecInt+0x20>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e786:	40 91 c0 00 	lds	r20, 0x00C0
   1e78a:	40 64       	ori	r20, 0x40	; 64
   1e78c:	40 93 c0 00 	sts	0x00C0, r20
	{
		theChar		=	(uint8_t)(0x30 + myNumber / 100);
		sendchar(theChar );
	}

	if ((myNumber > 10) || (digitCnt >= 2))
   1e790:	2b 30       	cpi	r18, 0x0B	; 11
   1e792:	31 05       	cpc	r19, r1
   1e794:	1c f4       	brge	.+6      	; 0x1e79c <PrintDecInt+0x3e>
   1e796:	e2 30       	cpi	r30, 0x02	; 2
   1e798:	f1 05       	cpc	r31, r1
   1e79a:	ac f0       	brlt	.+42     	; 0x1e7c6 <PrintDecInt+0x68>
	{
		theChar	=	(uint8_t)(0x30  + ((myNumber % 100) / 10 ));
   1e79c:	c9 01       	movw	r24, r18
   1e79e:	64 e6       	ldi	r22, 0x64	; 100
   1e7a0:	70 e0       	ldi	r23, 0x00	; 0
   1e7a2:	0e 94 09 fe 	call	0x1fc12	; 0x1fc12 <__divmodhi4>
   1e7a6:	6a e0       	ldi	r22, 0x0A	; 10
   1e7a8:	70 e0       	ldi	r23, 0x00	; 0
   1e7aa:	0e 94 09 fe 	call	0x1fc12	; 0x1fc12 <__divmodhi4>
   1e7ae:	60 5d       	subi	r22, 0xD0	; 208
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e7b0:	60 93 c6 00 	sts	0x00C6, r22
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e7b4:	50 91 c0 00 	lds	r21, 0x00C0
   1e7b8:	56 ff       	sbrs	r21, 6
   1e7ba:	fc cf       	rjmp	.-8      	; 0x1e7b4 <PrintDecInt+0x56>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e7bc:	60 91 c0 00 	lds	r22, 0x00C0
   1e7c0:	60 64       	ori	r22, 0x40	; 64
   1e7c2:	60 93 c0 00 	sts	0x00C0, r22
	if ((myNumber > 10) || (digitCnt >= 2))
	{
		theChar	=	(uint8_t)(0x30  + ((myNumber % 100) / 10 ));
		sendchar(theChar );
	}
	theChar	=	(uint8_t)(0x30 + (myNumber % 10));
   1e7c6:	c9 01       	movw	r24, r18
   1e7c8:	6a e0       	ldi	r22, 0x0A	; 10
   1e7ca:	70 e0       	ldi	r23, 0x00	; 0
   1e7cc:	0e 94 09 fe 	call	0x1fc12	; 0x1fc12 <__divmodhi4>
   1e7d0:	80 5d       	subi	r24, 0xD0	; 208
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1e7d2:	80 93 c6 00 	sts	0x00C6, r24
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1e7d6:	20 91 c0 00 	lds	r18, 0x00C0
   1e7da:	26 ff       	sbrs	r18, 6
   1e7dc:	fc cf       	rjmp	.-8      	; 0x1e7d6 <PrintDecInt+0x78>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1e7de:	30 91 c0 00 	lds	r19, 0x00C0
   1e7e2:	30 64       	ori	r19, 0x40	; 64
   1e7e4:	30 93 c0 00 	sts	0x00C0, r19
		theChar	=	(uint8_t)(0x30  + ((myNumber % 100) / 10 ));
		sendchar(theChar );
	}
	theChar	=	(uint8_t)(0x30 + (myNumber % 10));
	sendchar(theChar );
}
   1e7e8:	08 95       	ret

0001e7ea <main>:
/* Main program loop */
int main(void) __attribute__ ((OS_main));

//*****************************************************************************
int main(void)
{
   1e7ea:	cd b7       	in	r28, 0x3d	; 61
   1e7ec:	de b7       	in	r29, 0x3e	; 62
   1e7ee:	c0 54       	subi	r28, 0x40	; 64
   1e7f0:	d1 40       	sbci	r29, 0x01	; 1
   1e7f2:	de bf       	out	0x3e, r29	; 62
   1e7f4:	cd bf       	out	0x3d, r28	; 61
	uint16_t	rcvdCharCntr	=	0;
#endif

	//*	some chips don't set the stack properly
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   1e7f6:	00 e4       	ldi	r16, 0x40	; 64
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   1e7f8:	0e bf       	out	0x3e, r16	; 62
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   1e7fa:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   1e7fc:	0d bf       	out	0x3d, r16	; 61
#ifdef _FIX_ISSUE_181_
	//************************************************************************
	//*	Dec 29,	2011	<MLS> Issue #181, added watchdog timer support
	//*	handle the watchdog timer
	uint8_t	mcuStatusReg;
	mcuStatusReg	=	MCUSR;
   1e7fe:	94 b7       	in	r25, 0x34	; 52

	__asm__ __volatile__ ("cli");
   1e800:	f8 94       	cli
	__asm__ __volatile__ ("wdr");
   1e802:	a8 95       	wdr
	MCUSR	=	0;
   1e804:	14 be       	out	0x34, r1	; 52
	WDTCSR	|=	_BV(WDCE) | _BV(WDE);
   1e806:	80 91 60 00 	lds	r24, 0x0060
   1e80a:	88 61       	ori	r24, 0x18	; 24
   1e80c:	80 93 60 00 	sts	0x0060, r24
	WDTCSR	=	0;
   1e810:	10 92 60 00 	sts	0x0060, r1
	__asm__ __volatile__ ("sei");
   1e814:	78 94       	sei
	// check if WDT generated the reset, if so, go straight to app
	if (mcuStatusReg & _BV(WDRF))
   1e816:	93 ff       	sbrs	r25, 3
   1e818:	05 c0       	rjmp	.+10     	; 0x1e824 <main+0x3a>
	{
		app_start();
   1e81a:	e0 91 14 01 	lds	r30, 0x0114
   1e81e:	f0 91 15 01 	lds	r31, 0x0115
   1e822:	09 95       	icall
	 * Branch to bootloader or application code ?
	 */

#ifndef REMOVE_BOOTLOADER_LED
	/* PROG_PIN pulled low, indicate with LED that bootloader is active */
	PROGLED_DDR		|=	_BV(PROGLED_PIN);
   1e824:	27 9a       	sbi	0x04, 7	; 4
//	PROGLED_PORT	&=	~_BV(PROGLED_PIN);	// active low LED ON
	PROGLED_PORT	|=	_BV(PROGLED_PIN);	// active high LED ON
   1e826:	2f 9a       	sbi	0x05, 7	; 5
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmitter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	_BV(UART_DOUBLE_SPEED);
   1e828:	20 91 c0 00 	lds	r18, 0x00C0
   1e82c:	22 60       	ori	r18, 0x02	; 2
   1e82e:	20 93 c0 00 	sts	0x00C0, r18
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE, F_CPU);
   1e832:	13 e3       	ldi	r17, 0x33	; 51
   1e834:	10 93 c4 00 	sts	0x00C4, r17
	UART_CONTROL_REG	=	_BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
   1e838:	08 e1       	ldi	r16, 0x18	; 24
   1e83a:	00 93 c1 00 	sts	0x00C1, r16

	asm volatile ("nop");			// wait until port has changed
   1e83e:	00 00       	nop
	}
	//************************************************************************
#endif


	boot_timer	=	0;
   1e840:	ee 24       	eor	r14, r14
   1e842:	ff 24       	eor	r15, r15
   1e844:	87 01       	movw	r16, r14
#ifdef _DEBUG_SERIAL1_
				sendchar1(boot_state);
#endif
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % _BLINK_LOOP_COUNT_) == 0)
   1e846:	27 ec       	ldi	r18, 0xC7	; 199
   1e848:	82 2e       	mov	r8, r18
   1e84a:	2b e1       	ldi	r18, 0x1B	; 27
   1e84c:	92 2e       	mov	r9, r18
   1e84e:	a1 2c       	mov	r10, r1
   1e850:	b1 2c       	mov	r11, r1
/* Main program loop */
int main(void) __attribute__ ((OS_main));

//*****************************************************************************
int main(void)
{
   1e852:	cc 24       	eor	r12, r12
   1e854:	dd 24       	eor	r13, r13


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE));	// wait for data
   1e856:	40 91 c0 00 	lds	r20, 0x00C0
#endif


	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   1e85a:	47 fd       	sbrc	r20, 7
   1e85c:	2c c0       	rjmp	.+88     	; 0x1e8b6 <main+0xcc>
   1e85e:	c1 14       	cp	r12, r1
   1e860:	d1 04       	cpc	r13, r1
   1e862:	49 f5       	brne	.+82     	; 0x1e8b6 <main+0xcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   1e864:	25 e0       	ldi	r18, 0x05	; 5
   1e866:	2a 95       	dec	r18
   1e868:	f1 f7       	brne	.-4      	; 0x1e866 <main+0x7c>
   1e86a:	00 00       	nop
		{
			_delay_ms(0.001);
			boot_timer++;
   1e86c:	08 94       	sec
   1e86e:	e1 1c       	adc	r14, r1
   1e870:	f1 1c       	adc	r15, r1
   1e872:	01 1d       	adc	r16, r1
   1e874:	11 1d       	adc	r17, r1
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   1e876:	91 e0       	ldi	r25, 0x01	; 1
   1e878:	c9 2e       	mov	r12, r25
   1e87a:	d1 2c       	mov	r13, r1
   1e87c:	31 e2       	ldi	r19, 0x21	; 33
   1e87e:	e3 16       	cp	r14, r19
   1e880:	3e e4       	ldi	r19, 0x4E	; 78
   1e882:	f3 06       	cpc	r15, r19
   1e884:	30 e0       	ldi	r19, 0x00	; 0
   1e886:	03 07       	cpc	r16, r19
   1e888:	30 e0       	ldi	r19, 0x00	; 0
   1e88a:	13 07       	cpc	r17, r19
   1e88c:	10 f4       	brcc	.+4      	; 0x1e892 <main+0xa8>
   1e88e:	cc 24       	eor	r12, r12
   1e890:	dd 24       	eor	r13, r13
#ifdef _DEBUG_SERIAL1_
				sendchar1(boot_state);
#endif
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % _BLINK_LOOP_COUNT_) == 0)
   1e892:	c8 01       	movw	r24, r16
   1e894:	b7 01       	movw	r22, r14
   1e896:	a5 01       	movw	r20, r10
   1e898:	94 01       	movw	r18, r8
   1e89a:	0e 94 1c fe 	call	0x1fc38	; 0x1fc38 <__udivmodsi4>
   1e89e:	61 15       	cp	r22, r1
   1e8a0:	71 05       	cpc	r23, r1
   1e8a2:	81 05       	cpc	r24, r1
   1e8a4:	91 05       	cpc	r25, r1
   1e8a6:	b9 f6       	brne	.-82     	; 0x1e856 <main+0x6c>
			{
				//*	toggle the LED
				PROGLED_PORT	^=	_BV(PROGLED_PIN);	// turn LED ON
   1e8a8:	35 b1       	in	r19, 0x05	; 5
   1e8aa:	30 58       	subi	r19, 0x80	; 128
   1e8ac:	35 b9       	out	0x05, r19	; 5


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE));	// wait for data
   1e8ae:	40 91 c0 00 	lds	r20, 0x00C0
#endif


	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   1e8b2:	47 ff       	sbrs	r20, 7
   1e8b4:	d4 cf       	rjmp	.-88     	; 0x1e85e <main+0x74>

	sendchar1(boot_state + 0x30);
#endif


	while (boot_state==0)
   1e8b6:	96 01       	movw	r18, r12
   1e8b8:	2f 5f       	subi	r18, 0xFF	; 255
   1e8ba:	3f 4f       	sbci	r19, 0xFF	; 255

#ifdef _DEBUG_SERIAL1_
		sendchar1(boot_state + 0x30);
#endif

	if (boot_state==1)
   1e8bc:	21 30       	cpi	r18, 0x01	; 1
   1e8be:	31 05       	cpc	r19, r1
   1e8c0:	11 f1       	breq	.+68     	; 0x1e906 <main+0x11c>
	sendchar1(0x0a);
#endif


#ifndef REMOVE_BOOTLOADER_LED
	PROGLED_DDR		&=	~_BV(PROGLED_PIN);	// set to default
   1e8c2:	27 98       	cbi	0x04, 7	; 4
	PROGLED_PORT	&=	~_BV(PROGLED_PIN);	// active low LED OFF
   1e8c4:	2f 98       	cbi	0x05, 7	; 5
   1e8c6:	8f ef       	ldi	r24, 0xFF	; 255
   1e8c8:	90 e7       	ldi	r25, 0x70	; 112
   1e8ca:	a2 e0       	ldi	r26, 0x02	; 2
   1e8cc:	81 50       	subi	r24, 0x01	; 1
   1e8ce:	90 40       	sbci	r25, 0x00	; 0
   1e8d0:	a0 40       	sbci	r26, 0x00	; 0
   1e8d2:	e1 f7       	brne	.-8      	; 0x1e8cc <main+0xe2>
   1e8d4:	00 c0       	rjmp	.+0      	; 0x1e8d6 <main+0xec>
   1e8d6:	00 00       	nop
//	PROGLED_PORT	|=	_BV(PROGLED_PIN);	// active high LED OFF
	_delay_ms(50);							// delay after exit
#endif


	asm volatile ("nop");			// wait until port has changed
   1e8d8:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
   1e8da:	80 91 c0 00 	lds	r24, 0x00C0
   1e8de:	8d 7f       	andi	r24, 0xFD	; 253
   1e8e0:	80 93 c0 00 	sts	0x00C0, r24
	boot_rww_enable();				// enable application section
   1e8e4:	81 e1       	ldi	r24, 0x11	; 17
   1e8e6:	80 93 57 00 	sts	0x0057, r24
   1e8ea:	e8 95       	spm


	asm volatile(
   1e8ec:	ee 27       	eor	r30, r30
   1e8ee:	ff 27       	eor	r31, r31
   1e8f0:	09 94       	ijmp
			"clr	r30		\n\t"
			"clr	r31		\n\t"
			"ijmp	\n\t"
			);

}
   1e8f2:	80 e0       	ldi	r24, 0x00	; 0
   1e8f4:	90 e0       	ldi	r25, 0x00	; 0
   1e8f6:	c0 5c       	subi	r28, 0xC0	; 192
   1e8f8:	de 4f       	sbci	r29, 0xFE	; 254
   1e8fa:	0f b6       	in	r0, 0x3f	; 63
   1e8fc:	f8 94       	cli
   1e8fe:	de bf       	out	0x3e, r29	; 62
   1e900:	0f be       	out	0x3f, r0	; 63
   1e902:	cd bf       	out	0x3d, r28	; 61
   1e904:	08 95       	ret

#ifdef _DEBUG_SERIAL1_
		sendchar1(boot_state + 0x30);
#endif

	if (boot_state==1)
   1e906:	cf 5c       	subi	r28, 0xCF	; 207
   1e908:	de 4f       	sbci	r29, 0xFE	; 254
   1e90a:	18 82       	st	Y, r1
   1e90c:	19 82       	std	Y+1, r1	; 0x01
   1e90e:	1a 82       	std	Y+2, r1	; 0x02
   1e910:	1b 82       	std	Y+3, r1	; 0x03
   1e912:	c1 53       	subi	r28, 0x31	; 49
   1e914:	d1 40       	sbci	r29, 0x01	; 1
   1e916:	ca 5d       	subi	r28, 0xDA	; 218
   1e918:	de 4f       	sbci	r29, 0xFE	; 254
   1e91a:	18 82       	st	Y, r1
   1e91c:	19 82       	std	Y+1, r1	; 0x01
   1e91e:	1a 82       	std	Y+2, r1	; 0x02
   1e920:	1b 82       	std	Y+3, r1	; 0x03
   1e922:	c6 52       	subi	r28, 0x26	; 38
   1e924:	d1 40       	sbci	r29, 0x01	; 1
   1e926:	ee 24       	eor	r14, r14
   1e928:	ff 24       	eor	r15, r15
   1e92a:	40 e0       	ldi	r20, 0x00	; 0
   1e92c:	50 e0       	ldi	r21, 0x00	; 0
   1e92e:	c2 5d       	subi	r28, 0xD2	; 210
   1e930:	de 4f       	sbci	r29, 0xFE	; 254
   1e932:	18 82       	st	Y, r1
   1e934:	ce 52       	subi	r28, 0x2E	; 46
   1e936:	d1 40       	sbci	r29, 0x01	; 1
   1e938:	cc 24       	eor	r12, r12
   1e93a:	c1 5d       	subi	r28, 0xD1	; 209
   1e93c:	de 4f       	sbci	r29, 0xFE	; 254
   1e93e:	19 82       	std	Y+1, r1	; 0x01
   1e940:	18 82       	st	Y, r1
   1e942:	cf 52       	subi	r28, 0x2F	; 47
   1e944:	d1 40       	sbci	r29, 0x01	; 1
		count++;
		if (count > MAX_TIME_COUNT)
		{
		uint16_t	data;
		#if (FLASHEND > 0x10000)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   1e946:	80 e0       	ldi	r24, 0x00	; 0
   1e948:	90 e0       	ldi	r25, 0x00	; 0
   1e94a:	dc 01       	movw	r26, r24
   1e94c:	ab bf       	out	0x3b, r26	; 59
   1e94e:	fc 01       	movw	r30, r24
   1e950:	07 91       	elpm	r16, Z+
   1e952:	16 91       	elpm	r17, Z+

	gRamIndex			=	0;
	gFlashIndex			=	0;
	gEepromIndex		=	0;

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
   1e954:	80 e3       	ldi	r24, 0x30	; 48
   1e956:	92 ee       	ldi	r25, 0xE2	; 226

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
	PrintNewLine();
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far((uint32_t)(gTextMsg_Explorer + ii))) != '*') && (ii < 512))
   1e958:	aa 27       	eor	r26, r26
   1e95a:	97 fd       	sbrc	r25, 7
   1e95c:	a0 95       	com	r26
   1e95e:	ba 2f       	mov	r27, r26
   1e960:	ab bf       	out	0x3b, r26	; 59
   1e962:	fc 01       	movw	r30, r24
   1e964:	47 90       	elpm	r4, Z+
   1e966:	cb 5c       	subi	r28, 0xCB	; 203
   1e968:	de 4f       	sbci	r29, 0xFE	; 254
   1e96a:	48 82       	st	Y, r4
   1e96c:	c5 53       	subi	r28, 0x35	; 53
   1e96e:	d1 40       	sbci	r29, 0x01	; 1
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
	PrintNewLine();
	errorCount	=	0;
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far((uint32_t)(gTextMsg_Explorer + ii))) != '*') && (ii < 512))
   1e970:	c4 5c       	subi	r28, 0xC4	; 196
   1e972:	de 4f       	sbci	r29, 0xFE	; 254
   1e974:	48 82       	st	Y, r4
   1e976:	cc 53       	subi	r28, 0x3C	; 60
   1e978:	d1 40       	sbci	r29, 0x01	; 1

#ifdef _DEBUG_SERIAL1_
		sendchar1(boot_state + 0x30);
#endif

	if (boot_state==1)
   1e97a:	60 e0       	ldi	r22, 0x00	; 0
   1e97c:	70 e0       	ldi	r23, 0x00	; 0
   1e97e:	aa 24       	eor	r10, r10
   1e980:	c2 5d       	subi	r28, 0xD2	; 210
   1e982:	de 4f       	sbci	r29, 0xFE	; 254
   1e984:	98 80       	ld	r9, Y
   1e986:	ce 52       	subi	r28, 0x2E	; 46
   1e988:	d1 40       	sbci	r29, 0x01	; 1
   1e98a:	c1 5d       	subi	r28, 0xD1	; 209
   1e98c:	de 4f       	sbci	r29, 0xFE	; 254
   1e98e:	e8 81       	ld	r30, Y
   1e990:	f9 81       	ldd	r31, Y+1	; 0x01
   1e992:	cf 52       	subi	r28, 0x2F	; 47
   1e994:	d1 40       	sbci	r29, 0x01	; 1
			{
#ifdef _DEBUG_SERIAL1_
//				sendchar1(msgParseState + 0x40);
#endif

				if (boot_state==1)
   1e996:	21 30       	cpi	r18, 0x01	; 1
   1e998:	31 05       	cpc	r19, r1
   1e99a:	01 f1       	breq	.+64     	; 0x1e9dc <main+0x1f2>
		#if (FLASHEND > 0x10000)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   1e99c:	80 e0       	ldi	r24, 0x00	; 0
   1e99e:	90 e0       	ldi	r25, 0x00	; 0
   1e9a0:	dc 01       	movw	r26, r24
//*****************************************************************************
static uint8_t recchar_timeout(void)
{
uint32_t count = 0;

	while (!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)))
   1e9a2:	b0 90 c0 00 	lds	r11, 0x00C0
   1e9a6:	b7 fc       	sbrc	r11, 7
   1e9a8:	19 c0       	rjmp	.+50     	; 0x1e9dc <main+0x1f2>
	{
		// wait for data
		count++;
   1e9aa:	01 96       	adiw	r24, 0x01	; 1
   1e9ac:	a1 1d       	adc	r26, r1
   1e9ae:	b1 1d       	adc	r27, r1
		if (count > MAX_TIME_COUNT)
   1e9b0:	81 30       	cpi	r24, 0x01	; 1
   1e9b2:	22 e1       	ldi	r18, 0x12	; 18
   1e9b4:	92 07       	cpc	r25, r18
   1e9b6:	2a e7       	ldi	r18, 0x7A	; 122
   1e9b8:	a2 07       	cpc	r26, r18
   1e9ba:	20 e0       	ldi	r18, 0x00	; 0
   1e9bc:	b2 07       	cpc	r27, r18
   1e9be:	88 f3       	brcs	.-30     	; 0x1e9a2 <main+0x1b8>
		#if (FLASHEND > 0x10000)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   1e9c0:	3f ef       	ldi	r19, 0xFF	; 255
   1e9c2:	0f 3f       	cpi	r16, 0xFF	; 255
   1e9c4:	13 07       	cpc	r17, r19
   1e9c6:	51 f3       	breq	.-44     	; 0x1e99c <main+0x1b2>
			{
				asm volatile(
   1e9c8:	ee 27       	eor	r30, r30
   1e9ca:	ff 27       	eor	r31, r31
   1e9cc:	09 94       	ijmp
   1e9ce:	80 e0       	ldi	r24, 0x00	; 0
   1e9d0:	90 e0       	ldi	r25, 0x00	; 0
   1e9d2:	dc 01       	movw	r26, r24
//*****************************************************************************
static uint8_t recchar_timeout(void)
{
uint32_t count = 0;

	while (!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)))
   1e9d4:	b0 90 c0 00 	lds	r11, 0x00C0
   1e9d8:	b7 fe       	sbrs	r11, 7
   1e9da:	e7 cf       	rjmp	.-50     	; 0x1e9aa <main+0x1c0>
						);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
   1e9dc:	20 91 c6 00 	lds	r18, 0x00C6
#ifdef _DEBUG_SERIAL1_
//				sendchar1(c);
#endif

			#ifdef ENABLE_MONITOR
				rcvdCharCntr++;
   1e9e0:	08 94       	sec
   1e9e2:	e1 1c       	adc	r14, r1
   1e9e4:	f1 1c       	adc	r15, r1

				if ((c == '!')  && (rcvdCharCntr < 10))
   1e9e6:	21 32       	cpi	r18, 0x21	; 33
   1e9e8:	09 f4       	brne	.+2      	; 0x1e9ec <main+0x202>
   1e9ea:	4a c0       	rjmp	.+148    	; 0x1ea80 <main+0x296>
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   1e9ec:	40 e0       	ldi	r20, 0x00	; 0
   1e9ee:	50 e0       	ldi	r21, 0x00	; 0
				}
			#endif

				switch (msgParseState)
   1e9f0:	3a 2d       	mov	r19, r10
   1e9f2:	33 30       	cpi	r19, 0x03	; 3
   1e9f4:	09 f4       	brne	.+2      	; 0x1e9f8 <main+0x20e>
   1e9f6:	02 c1       	rjmp	.+516    	; 0x1ebfc <main+0x412>
   1e9f8:	34 30       	cpi	r19, 0x04	; 4
   1e9fa:	70 f4       	brcc	.+28     	; 0x1ea18 <main+0x22e>
   1e9fc:	31 30       	cpi	r19, 0x01	; 1
   1e9fe:	09 f4       	brne	.+2      	; 0x1ea02 <main+0x218>
   1ea00:	f8 c0       	rjmp	.+496    	; 0x1ebf2 <main+0x408>
   1ea02:	32 30       	cpi	r19, 0x02	; 2
   1ea04:	08 f4       	brcc	.+2      	; 0x1ea08 <main+0x21e>
   1ea06:	ed c0       	rjmp	.+474    	; 0x1ebe2 <main+0x3f8>
						}
					#endif
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
   1ea08:	72 2f       	mov	r23, r18
   1ea0a:	60 e0       	ldi	r22, 0x00	; 0
						msgParseState	=	ST_MSG_SIZE_2;
						checksum		^=	c;
   1ea0c:	c2 26       	eor	r12, r18
					#endif
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
						msgParseState	=	ST_MSG_SIZE_2;
   1ea0e:	83 e0       	ldi	r24, 0x03	; 3
   1ea10:	a8 2e       	mov	r10, r24

#ifdef _DEBUG_SERIAL1_
		sendchar1(boot_state + 0x30);
#endif

	if (boot_state==1)
   1ea12:	20 e0       	ldi	r18, 0x00	; 0
   1ea14:	30 e0       	ldi	r19, 0x00	; 0
   1ea16:	bf cf       	rjmp	.-130    	; 0x1e996 <main+0x1ac>
				{
					exPointCntr	=	0;
				}
			#endif

				switch (msgParseState)
   1ea18:	8a 2d       	mov	r24, r10
   1ea1a:	85 30       	cpi	r24, 0x05	; 5
   1ea1c:	09 f4       	brne	.+2      	; 0x1ea20 <main+0x236>
   1ea1e:	d1 c0       	rjmp	.+418    	; 0x1ebc2 <main+0x3d8>
   1ea20:	85 30       	cpi	r24, 0x05	; 5
   1ea22:	08 f4       	brcc	.+2      	; 0x1ea26 <main+0x23c>
   1ea24:	c6 c0       	rjmp	.+396    	; 0x1ebb2 <main+0x3c8>
   1ea26:	86 30       	cpi	r24, 0x06	; 6
   1ea28:	09 f4       	brne	.+2      	; 0x1ea2c <main+0x242>
   1ea2a:	be c0       	rjmp	.+380    	; 0x1eba8 <main+0x3be>
		{
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
   1ea2c:	ba 2d       	mov	r27, r10
   1ea2e:	b7 30       	cpi	r27, 0x07	; 7
   1ea30:	81 f7       	brne	.-32     	; 0x1ea12 <main+0x228>
   1ea32:	c2 5d       	subi	r28, 0xD2	; 210
   1ea34:	de 4f       	sbci	r29, 0xFE	; 254
   1ea36:	98 82       	st	Y, r9
   1ea38:	ce 52       	subi	r28, 0x2E	; 46
   1ea3a:	d1 40       	sbci	r29, 0x01	; 1
   1ea3c:	c1 5d       	subi	r28, 0xD1	; 209
   1ea3e:	de 4f       	sbci	r29, 0xFE	; 254
   1ea40:	f9 83       	std	Y+1, r31	; 0x01
   1ea42:	e8 83       	st	Y, r30
   1ea44:	cf 52       	subi	r28, 0x2F	; 47
   1ea46:	d1 40       	sbci	r29, 0x01	; 1
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   1ea48:	99 24       	eor	r9, r9
			sendchar1(msgBuffer[5]);
			sendchar1(msgBuffer[6]);
			sendchar1(msgBuffer[7]);
#endif

			switch (msgBuffer[0])
   1ea4a:	e9 81       	ldd	r30, Y+1	; 0x01
   1ea4c:	e3 31       	cpi	r30, 0x13	; 19
   1ea4e:	09 f4       	brne	.+2      	; 0x1ea52 <main+0x268>
   1ea50:	17 c7       	rjmp	.+3630   	; 0x1f880 <main+0x1096>
   1ea52:	e4 31       	cpi	r30, 0x14	; 20
   1ea54:	08 f0       	brcs	.+2      	; 0x1ea58 <main+0x26e>
   1ea56:	fb c0       	rjmp	.+502    	; 0x1ec4e <main+0x464>
   1ea58:	e6 30       	cpi	r30, 0x06	; 6
   1ea5a:	09 f4       	brne	.+2      	; 0x1ea5e <main+0x274>
   1ea5c:	59 c1       	rjmp	.+690    	; 0x1ed10 <main+0x526>
   1ea5e:	e7 30       	cpi	r30, 0x07	; 7
   1ea60:	08 f0       	brcs	.+2      	; 0x1ea64 <main+0x27a>
   1ea62:	08 c2       	rjmp	.+1040   	; 0x1ee74 <main+0x68a>
   1ea64:	e2 30       	cpi	r30, 0x02	; 2
   1ea66:	09 f4       	brne	.+2      	; 0x1ea6a <main+0x280>
   1ea68:	86 c1       	rjmp	.+780    	; 0x1ed76 <main+0x58c>
   1ea6a:	e3 30       	cpi	r30, 0x03	; 3
   1ea6c:	09 f4       	brne	.+2      	; 0x1ea70 <main+0x286>
   1ea6e:	a9 c2       	rjmp	.+1362   	; 0x1efc2 <main+0x7d8>
   1ea70:	e1 30       	cpi	r30, 0x01	; 1
   1ea72:	09 f4       	brne	.+2      	; 0x1ea76 <main+0x28c>
   1ea74:	4f c7       	rjmp	.+3742   	; 0x1f914 <main+0x112a>
					}
					break;

				default:
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_FAILED;
   1ea76:	80 ec       	ldi	r24, 0xC0	; 192
   1ea78:	8a 83       	std	Y+2, r24	; 0x02
						*p++	=	STATUS_CMD_OK;
					}
					break;

				default:
					msgLength		=	2;
   1ea7a:	82 e0       	ldi	r24, 0x02	; 2
   1ea7c:	90 e0       	ldi	r25, 0x00	; 0
					msgBuffer[1]	=	STATUS_CMD_FAILED;
					break;
   1ea7e:	7e c1       	rjmp	.+764    	; 0x1ed7c <main+0x592>
#endif

			#ifdef ENABLE_MONITOR
				rcvdCharCntr++;

				if ((c == '!')  && (rcvdCharCntr < 10))
   1ea80:	8a e0       	ldi	r24, 0x0A	; 10
   1ea82:	e8 16       	cp	r14, r24
   1ea84:	f1 04       	cpc	r15, r1
   1ea86:	08 f0       	brcs	.+2      	; 0x1ea8a <main+0x2a0>
   1ea88:	b1 cf       	rjmp	.-158    	; 0x1e9ec <main+0x202>
				{
					exPointCntr++;
   1ea8a:	4f 5f       	subi	r20, 0xFF	; 255
   1ea8c:	5f 4f       	sbci	r21, 0xFF	; 255
					if (exPointCntr == 3)
   1ea8e:	43 30       	cpi	r20, 0x03	; 3
   1ea90:	51 05       	cpc	r21, r1
   1ea92:	09 f0       	breq	.+2      	; 0x1ea96 <main+0x2ac>
   1ea94:	ad cf       	rjmp	.-166    	; 0x1e9f0 <main+0x206>
   1ea96:	c2 5d       	subi	r28, 0xD2	; 210
   1ea98:	de 4f       	sbci	r29, 0xFE	; 254
   1ea9a:	98 82       	st	Y, r9
   1ea9c:	ce 52       	subi	r28, 0x2E	; 46
   1ea9e:	d1 40       	sbci	r29, 0x01	; 1
   1eaa0:	c1 5d       	subi	r28, 0xD1	; 209
   1eaa2:	de 4f       	sbci	r29, 0xFE	; 254
   1eaa4:	f9 83       	std	Y+1, r31	; 0x01
   1eaa6:	e8 83       	st	Y, r30
   1eaa8:	cf 52       	subi	r28, 0x2F	; 47
   1eaaa:	d1 40       	sbci	r29, 0x01	; 1
   1eaac:	85 e0       	ldi	r24, 0x05	; 5
   1eaae:	c8 2e       	mov	r12, r24
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
			{
				asm volatile(
   1eab0:	99 e1       	ldi	r25, 0x19	; 25
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1eab2:	a1 e2       	ldi	r26, 0x21	; 33
   1eab4:	a0 93 c6 00 	sts	0x00C6, r26
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1eab8:	90 90 c0 00 	lds	r9, 0x00C0
   1eabc:	96 fe       	sbrs	r9, 6
   1eabe:	fc cf       	rjmp	.-8      	; 0x1eab8 <main+0x2ce>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1eac0:	50 91 c0 00 	lds	r21, 0x00C0
   1eac4:	50 64       	ori	r21, 0x40	; 64
   1eac6:	50 93 c0 00 	sts	0x00C0, r21
   1eaca:	91 50       	subi	r25, 0x01	; 1
	sendchar1(0x0a);
#endif

	for (uint8_t ii=0; ii<5; ii++)
	{
		for (uint8_t jj=0; jj<25; jj++)
   1eacc:	91 f7       	brne	.-28     	; 0x1eab2 <main+0x2c8>
		{
			sendchar('!');
		}
		PrintNewLine();
   1eace:	09 dd       	rcall	.-1518   	; 0x1e4e2 <PrintNewLine>
   1ead0:	ca 94       	dec	r12
   1ead2:	71 f7       	brne	.-36     	; 0x1eab0 <main+0x2c6>
	sendchar1('r');
	sendchar1(0x0d);
	sendchar1(0x0a);
#endif

	for (uint8_t ii=0; ii<5; ii++)
   1ead4:	10 92 1e 01 	sts	0x011E, r1
			sendchar('!');
		}
		PrintNewLine();
	}

	gRamIndex			=	0;
   1ead8:	10 92 1f 01 	sts	0x011F, r1
   1eadc:	10 92 20 01 	sts	0x0120, r1
   1eae0:	10 92 21 01 	sts	0x0121, r1
   1eae4:	10 92 1a 01 	sts	0x011A, r1
	gFlashIndex			=	0;
   1eae8:	10 92 1b 01 	sts	0x011B, r1
   1eaec:	10 92 1c 01 	sts	0x011C, r1
   1eaf0:	10 92 1d 01 	sts	0x011D, r1
   1eaf4:	10 92 16 01 	sts	0x0116, r1
	gEepromIndex		=	0;
   1eaf8:	10 92 17 01 	sts	0x0117, r1
   1eafc:	10 92 18 01 	sts	0x0118, r1
   1eb00:	10 92 19 01 	sts	0x0119, r1
   1eb04:	80 e3       	ldi	r24, 0x30	; 48

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
   1eb06:	92 ee       	ldi	r25, 0xE2	; 226
   1eb08:	60 e0       	ldi	r22, 0x00	; 0
   1eb0a:	18 dd       	rcall	.-1488   	; 0x1e53c <PrintFromPROGMEMln>
   1eb0c:	c3 5c       	subi	r28, 0xC3	; 195
   1eb0e:	de 4f       	sbci	r29, 0xFE	; 254
   1eb10:	f9 82       	std	Y+1, r15	; 0x01
   1eb12:	e8 82       	st	Y, r14
   1eb14:	cd 53       	subi	r28, 0x3D	; 61
   1eb16:	d1 40       	sbci	r29, 0x01	; 1
   1eb18:	c1 5c       	subi	r28, 0xC1	; 193
   1eb1a:	de 4f       	sbci	r29, 0xFE	; 254
   1eb1c:	19 83       	std	Y+1, r17	; 0x01
   1eb1e:	08 83       	st	Y, r16
   1eb20:	cf 53       	subi	r28, 0x3F	; 63
   1eb22:	d1 40       	sbci	r29, 0x01	; 1
   1eb24:	8b e4       	ldi	r24, 0x4B	; 75
   1eb26:	92 ee       	ldi	r25, 0xE2	; 226

	keepGoing	=	1;
	while (keepGoing)
	{
		PrintFromPROGMEM(gTextMsg_Prompt, 0);
   1eb28:	60 e0       	ldi	r22, 0x00	; 0
   1eb2a:	b6 dc       	rcall	.-1684   	; 0x1e498 <PrintFromPROGMEM>
   1eb2c:	c0 90 c0 00 	lds	r12, 0x00C0
   1eb30:	c7 fe       	sbrs	r12, 7
/*
 * Read single byte from USART, block if no data available
 */
static uint8_t recchar(void)
{
	while (!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)))
   1eb32:	fc cf       	rjmp	.-8      	; 0x1eb2c <main+0x342>
   1eb34:	80 91 c6 00 	lds	r24, 0x00C6
   1eb38:	80 36       	cpi	r24, 0x60	; 96
	{
		// wait for data
	}
	return UART_DATA_REG;
   1eb3a:	08 f0       	brcs	.+2      	; 0x1eb3e <main+0x354>
   1eb3c:	8f 75       	andi	r24, 0x5F	; 95
	keepGoing	=	1;
	while (keepGoing)
	{
		PrintFromPROGMEM(gTextMsg_Prompt, 0);
		theChar	=	recchar();
		if (theChar >= 0x60)
   1eb3e:	80 32       	cpi	r24, 0x20	; 32
   1eb40:	b8 f0       	brcs	.+46     	; 0x1eb70 <main+0x386>
		{
			theChar	=	theChar & 0x5F;
   1eb42:	80 93 c6 00 	sts	0x00C6, r24
		}

		if (theChar >= 0x20)
   1eb46:	d0 90 c0 00 	lds	r13, 0x00C0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1eb4a:	d6 fe       	sbrs	r13, 6
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1eb4c:	fc cf       	rjmp	.-8      	; 0x1eb46 <main+0x35c>
   1eb4e:	70 91 c0 00 	lds	r23, 0x00C0
   1eb52:	70 64       	ori	r23, 0x40	; 64
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1eb54:	70 93 c0 00 	sts	0x00C0, r23
   1eb58:	60 e2       	ldi	r22, 0x20	; 32
   1eb5a:	60 93 c6 00 	sts	0x00C6, r22
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1eb5e:	e0 90 c0 00 	lds	r14, 0x00C0
   1eb62:	e6 fe       	sbrs	r14, 6
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1eb64:	fc cf       	rjmp	.-8      	; 0x1eb5e <main+0x374>
   1eb66:	b0 91 c0 00 	lds	r27, 0x00C0
   1eb6a:	b0 64       	ori	r27, 0x40	; 64
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1eb6c:	b0 93 c0 00 	sts	0x00C0, r27
   1eb70:	88 34       	cpi	r24, 0x48	; 72
   1eb72:	09 f4       	brne	.+2      	; 0x1eb76 <main+0x38c>
   1eb74:	37 c6       	rjmp	.+3182   	; 0x1f7e4 <main+0xffa>
#ifdef _DEBUG_SERIAL1_
			sendchar1(theChar);
#endif
		}

		switch(theChar)
   1eb76:	89 34       	cpi	r24, 0x49	; 73
   1eb78:	08 f0       	brcs	.+2      	; 0x1eb7c <main+0x392>
   1eb7a:	48 c0       	rjmp	.+144    	; 0x1ec0c <main+0x422>
   1eb7c:	82 34       	cpi	r24, 0x42	; 66
   1eb7e:	09 f4       	brne	.+2      	; 0x1eb82 <main+0x398>
   1eb80:	07 c6       	rjmp	.+3086   	; 0x1f790 <main+0xfa6>
   1eb82:	83 34       	cpi	r24, 0x43	; 67
   1eb84:	08 f0       	brcs	.+2      	; 0x1eb88 <main+0x39e>
   1eb86:	bd c1       	rjmp	.+890    	; 0x1ef02 <main+0x718>
   1eb88:	80 33       	cpi	r24, 0x30	; 48
   1eb8a:	09 f4       	brne	.+2      	; 0x1eb8e <main+0x3a4>
   1eb8c:	e3 c5       	rjmp	.+3014   	; 0x1f754 <main+0xf6a>
   1eb8e:	80 33       	cpi	r24, 0x30	; 48
   1eb90:	30 f0       	brcs	.+12     	; 0x1eb9e <main+0x3b4>
   1eb92:	8f 33       	cpi	r24, 0x3F	; 63
   1eb94:	09 f4       	brne	.+2      	; 0x1eb98 <main+0x3ae>
   1eb96:	56 c5       	rjmp	.+2732   	; 0x1f644 <main+0xe5a>
   1eb98:	80 34       	cpi	r24, 0x40	; 64
   1eb9a:	09 f4       	brne	.+2      	; 0x1eb9e <main+0x3b4>
   1eb9c:	b2 c4       	rjmp	.+2404   	; 0x1f502 <main+0xd18>
   1eb9e:	87 e5       	ldi	r24, 0x57	; 87
   1eba0:	92 ee       	ldi	r25, 0xE2	; 226
   1eba2:	60 e0       	ldi	r22, 0x00	; 0
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 2);
				AVR_PortOutput();
				break;

			default:
				PrintFromPROGMEMln(gTextMsg_HUH, 0);
   1eba4:	cb dc       	rcall	.-1642   	; 0x1e53c <PrintFromPROGMEMln>
   1eba6:	be cf       	rjmp	.-132    	; 0x1eb24 <main+0x33a>
   1eba8:	2c 15       	cp	r18, r12
   1ebaa:	09 f4       	brne	.+2      	; 0x1ebae <main+0x3c4>
   1ebac:	42 cf       	rjmp	.-380    	; 0x1ea32 <main+0x248>
   1ebae:	aa 24       	eor	r10, r10
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   1ebb0:	30 cf       	rjmp	.-416    	; 0x1ea12 <main+0x228>
   1ebb2:	2e 30       	cpi	r18, 0x0E	; 14
   1ebb4:	e1 f7       	brne	.-8      	; 0x1ebae <main+0x3c4>
							checksum		^=	c;
							ii				=	0;
						}
						else
						{
							msgParseState	=	ST_START;
   1ebb6:	c2 26       	eor	r12, r18
   1ebb8:	e0 e0       	ldi	r30, 0x00	; 0
						msgParseState	=	ST_GET_TOKEN;
						checksum		^=	c;
						break;

					case ST_GET_TOKEN:
						if ( c == TOKEN )
   1ebba:	f0 e0       	ldi	r31, 0x00	; 0
   1ebbc:	a5 e0       	ldi	r26, 0x05	; 5
						{
							msgParseState	=	ST_GET_DATA;
							checksum		^=	c;
   1ebbe:	aa 2e       	mov	r10, r26
							ii				=	0;
   1ebc0:	28 cf       	rjmp	.-432    	; 0x1ea12 <main+0x228>
   1ebc2:	a1 e0       	ldi	r26, 0x01	; 1
						break;

					case ST_GET_TOKEN:
						if ( c == TOKEN )
						{
							msgParseState	=	ST_GET_DATA;
   1ebc4:	b0 e0       	ldi	r27, 0x00	; 0
   1ebc6:	ac 0f       	add	r26, r28
   1ebc8:	bd 1f       	adc	r27, r29
							msgParseState	=	ST_START;
						}
						break;

					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
   1ebca:	ae 0f       	add	r26, r30
   1ebcc:	bf 1f       	adc	r27, r31
   1ebce:	2c 93       	st	X, r18
   1ebd0:	31 96       	adiw	r30, 0x01	; 1
   1ebd2:	c2 26       	eor	r12, r18
   1ebd4:	e6 17       	cp	r30, r22
   1ebd6:	f7 07       	cpc	r31, r23
   1ebd8:	09 f0       	breq	.+2      	; 0x1ebdc <main+0x3f2>
						checksum		^=	c;
   1ebda:	1b cf       	rjmp	.-458    	; 0x1ea12 <main+0x228>
						if (ii == msgLength )
   1ebdc:	36 e0       	ldi	r19, 0x06	; 6
   1ebde:	a3 2e       	mov	r10, r19
   1ebe0:	18 cf       	rjmp	.-464    	; 0x1ea12 <main+0x228>
   1ebe2:	2b 31       	cpi	r18, 0x1B	; 27
						{
							msgParseState	=	ST_GET_CHECK;
   1ebe4:	09 f0       	breq	.+2      	; 0x1ebe8 <main+0x3fe>
   1ebe6:	15 cf       	rjmp	.-470    	; 0x1ea12 <main+0x228>
   1ebe8:	ab e1       	ldi	r26, 0x1B	; 27
			#endif

				switch (msgParseState)
				{
					case ST_START:
						if ( c == MESSAGE_START )
   1ebea:	ca 2e       	mov	r12, r26
   1ebec:	aa 24       	eor	r10, r10
   1ebee:	a3 94       	inc	r10
						{
							msgParseState	=	ST_GET_SEQ_NUM;
							checksum		=	MESSAGE_START^0;
   1ebf0:	10 cf       	rjmp	.-480    	; 0x1ea12 <main+0x228>
   1ebf2:	c2 26       	eor	r12, r18
				switch (msgParseState)
				{
					case ST_START:
						if ( c == MESSAGE_START )
						{
							msgParseState	=	ST_GET_SEQ_NUM;
   1ebf4:	92 2e       	mov	r9, r18
   1ebf6:	92 e0       	ldi	r25, 0x02	; 2
   1ebf8:	a9 2e       	mov	r10, r25

					case ST_GET_SEQ_NUM:
					#ifdef _FIX_ISSUE_505_
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
						checksum		^=	c;
   1ebfa:	0b cf       	rjmp	.-490    	; 0x1ea12 <main+0x228>
						else
						{
							msgParseState	=	ST_START;
						}
					#endif
						break;
   1ebfc:	82 2f       	mov	r24, r18
						break;

					case ST_GET_SEQ_NUM:
					#ifdef _FIX_ISSUE_505_
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
   1ebfe:	90 e0       	ldi	r25, 0x00	; 0
   1ec00:	68 2b       	or	r22, r24
						else
						{
							msgParseState	=	ST_START;
						}
					#endif
						break;
   1ec02:	79 2b       	or	r23, r25
						msgParseState	=	ST_MSG_SIZE_2;
						checksum		^=	c;
						break;

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
   1ec04:	c2 26       	eor	r12, r18
   1ec06:	b4 e0       	ldi	r27, 0x04	; 4
   1ec08:	ab 2e       	mov	r10, r27
   1ec0a:	03 cf       	rjmp	.-506    	; 0x1ea12 <main+0x228>
						msgParseState	=	ST_GET_TOKEN;
						checksum		^=	c;
   1ec0c:	82 35       	cpi	r24, 0x52	; 82
						checksum		^=	c;
						break;

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
						msgParseState	=	ST_GET_TOKEN;
   1ec0e:	09 f4       	brne	.+2      	; 0x1ec12 <main+0x428>
   1ec10:	e6 c1       	rjmp	.+972    	; 0x1efde <main+0x7f4>
						checksum		^=	c;
						break;
   1ec12:	83 35       	cpi	r24, 0x53	; 83
#ifdef _DEBUG_SERIAL1_
			sendchar1(theChar);
#endif
		}

		switch(theChar)
   1ec14:	08 f0       	brcs	.+2      	; 0x1ec18 <main+0x42e>
   1ec16:	41 c1       	rjmp	.+642    	; 0x1ee9a <main+0x6b0>
   1ec18:	8c 34       	cpi	r24, 0x4C	; 76
   1ec1a:	09 f4       	brne	.+2      	; 0x1ec1e <main+0x434>
   1ec1c:	03 c2       	rjmp	.+1030   	; 0x1f024 <main+0x83a>
   1ec1e:	81 35       	cpi	r24, 0x51	; 81
   1ec20:	09 f0       	breq	.+2      	; 0x1ec24 <main+0x43a>
   1ec22:	bd cf       	rjmp	.-134    	; 0x1eb9e <main+0x3b4>
   1ec24:	c3 5c       	subi	r28, 0xC3	; 195
   1ec26:	de 4f       	sbci	r29, 0xFE	; 254
   1ec28:	e8 80       	ld	r14, Y
   1ec2a:	f9 80       	ldd	r15, Y+1	; 0x01
   1ec2c:	cd 53       	subi	r28, 0x3D	; 61
   1ec2e:	d1 40       	sbci	r29, 0x01	; 1
   1ec30:	c1 5c       	subi	r28, 0xC1	; 193
   1ec32:	de 4f       	sbci	r29, 0xFE	; 254
   1ec34:	08 81       	ld	r16, Y
   1ec36:	19 81       	ldd	r17, Y+1	; 0x01
   1ec38:	cf 53       	subi	r28, 0x3F	; 63
   1ec3a:	d1 40       	sbci	r29, 0x01	; 1
   1ec3c:	82 e1       	ldi	r24, 0x12	; 18
   1ec3e:	94 ee       	ldi	r25, 0xE4	; 228
   1ec40:	62 e0       	ldi	r22, 0x02	; 2
   1ec42:	7c dc       	rcall	.-1800   	; 0x1e53c <PrintFromPROGMEMln>
				ListAvailablePorts();
				break;

			case 'Q':
			case 'q':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 2);
   1ec44:	40 e0       	ldi	r20, 0x00	; 0
   1ec46:	50 e0       	ldi	r21, 0x00	; 0
   1ec48:	99 24       	eor	r9, r9
   1ec4a:	93 94       	inc	r9
   1ec4c:	fe ce       	rjmp	.-516    	; 0x1ea4a <main+0x260>
				{
					exPointCntr++;
					if (exPointCntr == 3)
					{
						RunMonitor();
						exPointCntr		=	0;	//	reset back to zero so we don't get in an endless loop
   1ec4e:	e8 31       	cpi	r30, 0x18	; 24
   1ec50:	09 f4       	brne	.+2      	; 0x1ec54 <main+0x46a>
						isLeave			=	1;
   1ec52:	79 c6       	rjmp	.+3314   	; 0x1f946 <main+0x115c>
   1ec54:	e9 31       	cpi	r30, 0x19	; 25
   1ec56:	08 f0       	brcs	.+2      	; 0x1ec5a <main+0x470>
			sendchar1(msgBuffer[5]);
			sendchar1(msgBuffer[6]);
			sendchar1(msgBuffer[7]);
#endif

			switch (msgBuffer[0])
   1ec58:	7d c1       	rjmp	.+762    	; 0x1ef54 <main+0x76a>
   1ec5a:	e5 31       	cpi	r30, 0x15	; 21
   1ec5c:	09 f4       	brne	.+2      	; 0x1ec60 <main+0x476>
   1ec5e:	10 c6       	rjmp	.+3104   	; 0x1f880 <main+0x1096>
   1ec60:	e5 31       	cpi	r30, 0x15	; 21
   1ec62:	18 f0       	brcs	.+6      	; 0x1ec6a <main+0x480>
   1ec64:	e6 31       	cpi	r30, 0x16	; 22
   1ec66:	09 f0       	breq	.+2      	; 0x1ec6a <main+0x480>
   1ec68:	06 cf       	rjmp	.-500    	; 0x1ea76 <main+0x28c>
   1ec6a:	7a 80       	ldd	r7, Y+2	; 0x02
   1ec6c:	c5 5c       	subi	r28, 0xC5	; 197
   1ec6e:	de 4f       	sbci	r29, 0xFE	; 254
   1ec70:	78 82       	st	Y, r7
   1ec72:	cb 53       	subi	r28, 0x3B	; 59
					break;

				case CMD_READ_FLASH_ISP:
				case CMD_READ_EEPROM_ISP:
					{
						uint16_t	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   1ec74:	d1 40       	sbci	r29, 0x01	; 1
   1ec76:	c6 5c       	subi	r28, 0xC6	; 198
   1ec78:	de 4f       	sbci	r29, 0xFE	; 254
   1ec7a:	18 82       	st	Y, r1
   1ec7c:	ca 53       	subi	r28, 0x3A	; 58
   1ec7e:	d1 40       	sbci	r29, 0x01	; 1
   1ec80:	6b 81       	ldd	r22, Y+3	; 0x03
   1ec82:	70 e0       	ldi	r23, 0x00	; 0
   1ec84:	c6 5c       	subi	r28, 0xC6	; 198
   1ec86:	de 4f       	sbci	r29, 0xFE	; 254
   1ec88:	a8 81       	ld	r26, Y
   1ec8a:	b9 81       	ldd	r27, Y+1	; 0x01
   1ec8c:	ca 53       	subi	r28, 0x3A	; 58
   1ec8e:	d1 40       	sbci	r29, 0x01	; 1
   1ec90:	6a 2b       	or	r22, r26
   1ec92:	7b 2b       	or	r23, r27
   1ec94:	cb 01       	movw	r24, r22
   1ec96:	03 96       	adiw	r24, 0x03	; 3
   1ec98:	1a 82       	std	Y+2, r1	; 0x02
   1ec9a:	e4 31       	cpi	r30, 0x14	; 20
   1ec9c:	09 f4       	brne	.+2      	; 0x1eca0 <main+0x4b6>
						uint8_t	*p		=	msgBuffer+1;
						msgLength				=	size+3;
   1ec9e:	1a c7       	rjmp	.+3636   	; 0x1fad4 <main+0x12ea>
   1eca0:	fe 01       	movw	r30, r28

						*p++	=	STATUS_CMD_OK;
   1eca2:	33 96       	adiw	r30, 0x03	; 3
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   1eca4:	db 01       	movw	r26, r22
   1eca6:	11 97       	sbiw	r26, 0x01	; 1
   1eca8:	2d 01       	movw	r4, r26
					{
						uint16_t	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						uint8_t	*p		=	msgBuffer+1;
						msgLength				=	size+3;

						*p++	=	STATUS_CMD_OK;
   1ecaa:	66 24       	eor	r6, r6
   1ecac:	77 24       	eor	r7, r7

/* Main program loop */
int main(void) __attribute__ ((OS_main));

//*****************************************************************************
int main(void)
   1ecae:	08 94       	sec
   1ecb0:	41 1c       	adc	r4, r1
   1ecb2:	51 1c       	adc	r5, r1
   1ecb4:	61 1c       	adc	r6, r1
   1ecb6:	71 1c       	adc	r7, r1
   1ecb8:	ca 5d       	subi	r28, 0xDA	; 218
   1ecba:	de 4f       	sbci	r29, 0xFE	; 254
   1ecbc:	a8 80       	ld	r10, Y
   1ecbe:	b9 80       	ldd	r11, Y+1	; 0x01
   1ecc0:	ca 80       	ldd	r12, Y+2	; 0x02
   1ecc2:	db 80       	ldd	r13, Y+3	; 0x03
   1ecc4:	c6 52       	subi	r28, 0x26	; 38
   1ecc6:	d1 40       	sbci	r29, 0x01	; 1
   1ecc8:	4a 0c       	add	r4, r10
   1ecca:	5b 1c       	adc	r5, r11
   1eccc:	6c 1c       	adc	r6, r12
   1ecce:	7d 1c       	adc	r7, r13
   1ecd0:	9c 01       	movw	r18, r24
   1ecd2:	a1 bc       	out	0x21, r10	; 33
   1ecd4:	bb 27       	eor	r27, r27
   1ecd6:	ad 2d       	mov	r26, r13
   1ecd8:	9c 2d       	mov	r25, r12
   1ecda:	8b 2d       	mov	r24, r11
						}
						else
						{
							/* Read EEPROM */
							do {
								EEARL	=	address;			// Setup EEPROM address
   1ecdc:	82 bd       	out	0x22, r24	; 34
								EEARH	=	((address >> 8));
   1ecde:	08 94       	sec
   1ece0:	a1 1c       	adc	r10, r1
   1ece2:	b1 1c       	adc	r11, r1
   1ece4:	c1 1c       	adc	r12, r1
   1ece6:	d1 1c       	adc	r13, r1
								address++;					// Select next EEPROM byte
   1ece8:	f8 9a       	sbi	0x1f, 0	; 31
   1ecea:	80 b5       	in	r24, 0x20	; 32
   1ecec:	81 93       	st	Z+, r24
   1ecee:	df 01       	movw	r26, r30
   1ecf0:	a4 14       	cp	r10, r4
								EECR	|=	_BV(EERE);			// Read EEPROM
   1ecf2:	b5 04       	cpc	r11, r5
								*p++	=	EEDR;				// Send EEPROM data
   1ecf4:	c6 04       	cpc	r12, r6
   1ecf6:	d7 04       	cpc	r13, r7
   1ecf8:	61 f7       	brne	.-40     	; 0x1ecd2 <main+0x4e8>
								size--;
							} while (size);
   1ecfa:	ca 5d       	subi	r28, 0xDA	; 218
   1ecfc:	de 4f       	sbci	r29, 0xFE	; 254
   1ecfe:	a8 82       	st	Y, r10
   1ed00:	b9 82       	std	Y+1, r11	; 0x01
   1ed02:	ca 82       	std	Y+2, r12	; 0x02
   1ed04:	db 82       	std	Y+3, r13	; 0x03
   1ed06:	c6 52       	subi	r28, 0x26	; 38
   1ed08:	d1 40       	sbci	r29, 0x01	; 1
   1ed0a:	c9 01       	movw	r24, r18
   1ed0c:	1c 92       	st	X, r1
   1ed0e:	36 c0       	rjmp	.+108    	; 0x1ed7c <main+0x592>
   1ed10:	8a 81       	ldd	r24, Y+2	; 0x02
   1ed12:	90 e0       	ldi	r25, 0x00	; 0
   1ed14:	a0 e0       	ldi	r26, 0x00	; 0
						}
						*p++	=	STATUS_CMD_OK;
   1ed16:	b0 e0       	ldi	r27, 0x00	; 0
					}
					break;
   1ed18:	78 2e       	mov	r7, r24
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	issue 543, return FAILED instead of OK
					break;

				case CMD_LOAD_ADDRESS:
	#if defined(RAMPZ)
					address	=	( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   1ed1a:	66 24       	eor	r6, r6
   1ed1c:	55 24       	eor	r5, r5
   1ed1e:	44 24       	eor	r4, r4
   1ed20:	8b 81       	ldd	r24, Y+3	; 0x03
   1ed22:	90 e0       	ldi	r25, 0x00	; 0
   1ed24:	a0 e0       	ldi	r26, 0x00	; 0
   1ed26:	b0 e0       	ldi	r27, 0x00	; 0
   1ed28:	dc 01       	movw	r26, r24
   1ed2a:	99 27       	eor	r25, r25
   1ed2c:	88 27       	eor	r24, r24
   1ed2e:	48 2a       	or	r4, r24
   1ed30:	59 2a       	or	r5, r25
   1ed32:	6a 2a       	or	r6, r26
   1ed34:	7b 2a       	or	r7, r27
   1ed36:	8d 81       	ldd	r24, Y+5	; 0x05
   1ed38:	90 e0       	ldi	r25, 0x00	; 0
   1ed3a:	a0 e0       	ldi	r26, 0x00	; 0
   1ed3c:	b0 e0       	ldi	r27, 0x00	; 0
   1ed3e:	48 2a       	or	r4, r24
   1ed40:	59 2a       	or	r5, r25
   1ed42:	6a 2a       	or	r6, r26
   1ed44:	7b 2a       	or	r7, r27
   1ed46:	8c 81       	ldd	r24, Y+4	; 0x04
   1ed48:	90 e0       	ldi	r25, 0x00	; 0
   1ed4a:	a0 e0       	ldi	r26, 0x00	; 0
   1ed4c:	b0 e0       	ldi	r27, 0x00	; 0
   1ed4e:	ba 2f       	mov	r27, r26
   1ed50:	a9 2f       	mov	r26, r25
   1ed52:	98 2f       	mov	r25, r24
   1ed54:	88 27       	eor	r24, r24
   1ed56:	48 2a       	or	r4, r24
   1ed58:	59 2a       	or	r5, r25
   1ed5a:	6a 2a       	or	r6, r26
   1ed5c:	7b 2a       	or	r7, r27
   1ed5e:	44 0c       	add	r4, r4
   1ed60:	55 1c       	adc	r5, r5
   1ed62:	66 1c       	adc	r6, r6
   1ed64:	77 1c       	adc	r7, r7
   1ed66:	ca 5d       	subi	r28, 0xDA	; 218
   1ed68:	de 4f       	sbci	r29, 0xFE	; 254
   1ed6a:	48 82       	st	Y, r4
   1ed6c:	59 82       	std	Y+1, r5	; 0x01
   1ed6e:	6a 82       	std	Y+2, r6	; 0x02
   1ed70:	7b 82       	std	Y+3, r7	; 0x03
   1ed72:	c6 52       	subi	r28, 0x26	; 38
   1ed74:	d1 40       	sbci	r29, 0x01	; 1
   1ed76:	1a 82       	std	Y+2, r1	; 0x02
   1ed78:	82 e0       	ldi	r24, 0x02	; 2
   1ed7a:	90 e0       	ldi	r25, 0x00	; 0
   1ed7c:	3b e1       	ldi	r19, 0x1B	; 27
   1ed7e:	30 93 c6 00 	sts	0x00C6, r19
	#else
					address	=	( ((msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;		//convert word to byte address
	#endif
					msgLength		=	2;
   1ed82:	c0 90 c0 00 	lds	r12, 0x00C0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1ed86:	c6 fe       	sbrs	r12, 6
   1ed88:	fc cf       	rjmp	.-8      	; 0x1ed82 <main+0x598>
   1ed8a:	60 91 c0 00 	lds	r22, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1ed8e:	60 64       	ori	r22, 0x40	; 64
   1ed90:	60 93 c0 00 	sts	0x00C0, r22
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1ed94:	c2 5d       	subi	r28, 0xD2	; 210
   1ed96:	de 4f       	sbci	r29, 0xFE	; 254
   1ed98:	b8 80       	ld	r11, Y
   1ed9a:	ce 52       	subi	r28, 0x2E	; 46
   1ed9c:	d1 40       	sbci	r29, 0x01	; 1
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1ed9e:	b0 92 c6 00 	sts	0x00C6, r11
   1eda2:	d0 90 c0 00 	lds	r13, 0x00C0
   1eda6:	d6 fe       	sbrs	r13, 6
   1eda8:	fc cf       	rjmp	.-8      	; 0x1eda2 <main+0x5b8>
   1edaa:	70 91 c0 00 	lds	r23, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1edae:	70 64       	ori	r23, 0x40	; 64
   1edb0:	70 93 c0 00 	sts	0x00C0, r23
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1edb4:	39 2f       	mov	r19, r25
   1edb6:	90 93 c6 00 	sts	0x00C6, r25
   1edba:	b0 91 c0 00 	lds	r27, 0x00C0
			checksum	=	MESSAGE_START^0;

			sendchar(seqNum);
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
   1edbe:	b6 ff       	sbrs	r27, 6
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1edc0:	fc cf       	rjmp	.-8      	; 0x1edba <main+0x5d0>
   1edc2:	e0 91 c0 00 	lds	r30, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1edc6:	e0 64       	ori	r30, 0x40	; 64
   1edc8:	e0 93 c0 00 	sts	0x00C0, r30
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1edcc:	68 2f       	mov	r22, r24
   1edce:	80 93 c6 00 	sts	0x00C6, r24
   1edd2:	20 91 c0 00 	lds	r18, 0x00C0

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
			checksum	^=	c;

			c			=	msgLength&0x00FF;
   1edd6:	26 ff       	sbrs	r18, 6
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1edd8:	fc cf       	rjmp	.-8      	; 0x1edd2 <main+0x5e8>
   1edda:	a0 91 c0 00 	lds	r26, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1edde:	a0 64       	ori	r26, 0x40	; 64
   1ede0:	a0 93 c0 00 	sts	0x00C0, r26
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1ede4:	fe e0       	ldi	r31, 0x0E	; 14
   1ede6:	f0 93 c6 00 	sts	0x00C6, r31
   1edea:	c0 90 c0 00 	lds	r12, 0x00C0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1edee:	c6 fe       	sbrs	r12, 6
   1edf0:	fc cf       	rjmp	.-8      	; 0x1edea <main+0x600>
   1edf2:	70 91 c0 00 	lds	r23, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1edf6:	70 64       	ori	r23, 0x40	; 64
   1edf8:	70 93 c0 00 	sts	0x00C0, r23
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1edfc:	b5 e1       	ldi	r27, 0x15	; 21
   1edfe:	cb 2e       	mov	r12, r27
   1ee00:	c2 5d       	subi	r28, 0xD2	; 210
   1ee02:	de 4f       	sbci	r29, 0xFE	; 254
   1ee04:	d8 80       	ld	r13, Y
			sendchar(seqNum);
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
			checksum	^=	c;
   1ee06:	ce 52       	subi	r28, 0x2E	; 46
   1ee08:	d1 40       	sbci	r29, 0x01	; 1
   1ee0a:	cd 24       	eor	r12, r13
   1ee0c:	c6 26       	eor	r12, r22
   1ee0e:	c3 26       	eor	r12, r19
   1ee10:	00 97       	sbiw	r24, 0x00	; 0
   1ee12:	89 f0       	breq	.+34     	; 0x1ee36 <main+0x64c>
   1ee14:	fe 01       	movw	r30, r28

			c			=	msgLength&0x00FF;
			sendchar(c);
			checksum ^= c;
   1ee16:	31 96       	adiw	r30, 0x01	; 1

			sendchar(TOKEN);
			checksum ^= TOKEN;
   1ee18:	31 91       	ld	r19, Z+

			p	=	msgBuffer;
			while ( msgLength )
   1ee1a:	30 93 c6 00 	sts	0x00C6, r19
   1ee1e:	60 91 c0 00 	lds	r22, 0x00C0
			{
				c	=	*p++;
   1ee22:	66 ff       	sbrs	r22, 6
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1ee24:	fc cf       	rjmp	.-8      	; 0x1ee1e <main+0x634>
   1ee26:	b0 91 c0 00 	lds	r27, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1ee2a:	b0 64       	ori	r27, 0x40	; 64
   1ee2c:	b0 93 c0 00 	sts	0x00C0, r27
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1ee30:	c3 26       	eor	r12, r19
   1ee32:	01 97       	sbiw	r24, 0x01	; 1
   1ee34:	89 f7       	brne	.-30     	; 0x1ee18 <main+0x62e>
   1ee36:	c0 92 c6 00 	sts	0x00C6, r12
			p	=	msgBuffer;
			while ( msgLength )
			{
				c	=	*p++;
				sendchar(c);
				checksum ^=c;
   1ee3a:	90 91 c0 00 	lds	r25, 0x00C0

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p	=	msgBuffer;
			while ( msgLength )
   1ee3e:	96 ff       	sbrs	r25, 6
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1ee40:	fc cf       	rjmp	.-8      	; 0x1ee3a <main+0x650>
   1ee42:	30 91 c0 00 	lds	r19, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1ee46:	30 64       	ori	r19, 0x40	; 64
   1ee48:	30 93 c0 00 	sts	0x00C0, r19
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1ee4c:	85 b1       	in	r24, 0x05	; 5
   1ee4e:	80 58       	subi	r24, 0x80	; 128
   1ee50:	85 b9       	out	0x05, r24	; 5
   1ee52:	99 20       	and	r9, r9
   1ee54:	09 f0       	breq	.+2      	; 0x1ee58 <main+0x66e>
			sendchar(checksum);
			seqNum++;

		#ifndef REMOVE_BOOTLOADER_LED
			//*	<MLS>	toggle the LED
			PROGLED_PORT	^=	_BV(PROGLED_PIN);	// active high LED ON
   1ee56:	35 cd       	rjmp	.-1430   	; 0x1e8c2 <main+0xd8>
   1ee58:	c2 5d       	subi	r28, 0xD2	; 210
   1ee5a:	de 4f       	sbci	r29, 0xFE	; 254
#endif

	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
   1ee5c:	e8 81       	ld	r30, Y
   1ee5e:	ce 52       	subi	r28, 0x2E	; 46
   1ee60:	d1 40       	sbci	r29, 0x01	; 1
				sendchar(c);
				checksum ^=c;
				msgLength--;
			}
			sendchar(checksum);
			seqNum++;
   1ee62:	ef 5f       	subi	r30, 0xFF	; 255
   1ee64:	c2 5d       	subi	r28, 0xD2	; 210
   1ee66:	de 4f       	sbci	r29, 0xFE	; 254
   1ee68:	e8 83       	st	Y, r30
   1ee6a:	ce 52       	subi	r28, 0x2E	; 46
   1ee6c:	d1 40       	sbci	r29, 0x01	; 1
   1ee6e:	20 e0       	ldi	r18, 0x00	; 0
   1ee70:	30 e0       	ldi	r19, 0x00	; 0
   1ee72:	83 cd       	rjmp	.-1274   	; 0x1e97a <main+0x190>
   1ee74:	e1 31       	cpi	r30, 0x11	; 17
   1ee76:	09 f4       	brne	.+2      	; 0x1ee7a <main+0x690>
   1ee78:	63 c5       	rjmp	.+2758   	; 0x1f940 <main+0x1156>
   1ee7a:	e2 31       	cpi	r30, 0x12	; 18
   1ee7c:	08 f4       	brcc	.+2      	; 0x1ee80 <main+0x696>
			sendchar1(msgBuffer[5]);
			sendchar1(msgBuffer[6]);
			sendchar1(msgBuffer[7]);
#endif

			switch (msgBuffer[0])
   1ee7e:	9d c0       	rjmp	.+314    	; 0x1efba <main+0x7d0>
   1ee80:	e0 ec       	ldi	r30, 0xC0	; 192
   1ee82:	ea 83       	std	Y+2, r30	; 0x02
   1ee84:	82 e0       	ldi	r24, 0x02	; 2
   1ee86:	90 e0       	ldi	r25, 0x00	; 0
   1ee88:	cf 5c       	subi	r28, 0xCF	; 207
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	issue 543, return FAILED instead of OK
   1ee8a:	de 4f       	sbci	r29, 0xFE	; 254
   1ee8c:	18 82       	st	Y, r1
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
   1ee8e:	19 82       	std	Y+1, r1	; 0x01
   1ee90:	1a 82       	std	Y+2, r1	; 0x02
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
   1ee92:	1b 82       	std	Y+3, r1	; 0x03
   1ee94:	c1 53       	subi	r28, 0x31	; 49
   1ee96:	d1 40       	sbci	r29, 0x01	; 1
   1ee98:	71 cf       	rjmp	.-286    	; 0x1ed7c <main+0x592>
   1ee9a:	86 35       	cpi	r24, 0x56	; 86
   1ee9c:	09 f4       	brne	.+2      	; 0x1eea0 <main+0x6b6>
   1ee9e:	03 c1       	rjmp	.+518    	; 0x1f0a6 <main+0x8bc>
   1eea0:	89 35       	cpi	r24, 0x59	; 89
					msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	issue 543, return FAILED instead of OK
					break;
   1eea2:	09 f0       	breq	.+2      	; 0x1eea6 <main+0x6bc>
#ifdef _DEBUG_SERIAL1_
			sendchar1(theChar);
#endif
		}

		switch(theChar)
   1eea4:	7c ce       	rjmp	.-776    	; 0x1eb9e <main+0x3b4>
   1eea6:	8d e3       	ldi	r24, 0x3D	; 61
   1eea8:	94 ee       	ldi	r25, 0xE4	; 228
   1eeaa:	62 e0       	ldi	r22, 0x02	; 2
   1eeac:	47 db       	rcall	.-2418   	; 0x1e53c <PrintFromPROGMEMln>
   1eeae:	85 e5       	ldi	r24, 0x55	; 85
				VectorDisplay();
				break;

			case 'Y':
			case 'y':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 2);
   1eeb0:	93 ee       	ldi	r25, 0xE3	; 227
   1eeb2:	60 e0       	ldi	r22, 0x00	; 0
   1eeb4:	f1 da       	rcall	.-2590   	; 0x1e498 <PrintFromPROGMEM>
   1eeb6:	b0 90 c0 00 	lds	r11, 0x00C0
static void	AVR_PortOutput(void)
{
char	portLetter;
char	getCharFlag;

	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);
   1eeba:	b7 fe       	sbrs	r11, 7
   1eebc:	fc cf       	rjmp	.-8      	; 0x1eeb6 <main+0x6cc>
   1eebe:	00 91 c6 00 	lds	r16, 0x00C6
   1eec2:	0f 75       	andi	r16, 0x5F	; 95
/*
 * Read single byte from USART, block if no data available
 */
static uint8_t recchar(void)
{
	while (!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)))
   1eec4:	00 93 c6 00 	sts	0x00C6, r16
   1eec8:	90 90 c0 00 	lds	r9, 0x00C0
	{
		// wait for data
	}
	return UART_DATA_REG;
   1eecc:	96 fe       	sbrs	r9, 6
   1eece:	fc cf       	rjmp	.-8      	; 0x1eec8 <main+0x6de>
char	getCharFlag;

	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);

	portLetter	=	recchar();
	portLetter	=	portLetter & 0x5f;
   1eed0:	20 91 c0 00 	lds	r18, 0x00C0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1eed4:	20 64       	ori	r18, 0x40	; 64
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1eed6:	20 93 c0 00 	sts	0x00C0, r18
   1eeda:	03 db       	rcall	.-2554   	; 0x1e4e2 <PrintNewLine>
   1eedc:	80 2f       	mov	r24, r16
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1eede:	81 54       	subi	r24, 0x41	; 65
   1eee0:	8a 31       	cpi	r24, 0x1A	; 26
   1eee2:	08 f0       	brcs	.+2      	; 0x1eee6 <main+0x6fc>
   1eee4:	e4 c5       	rjmp	.+3016   	; 0x1faae <main+0x12c4>
   1eee6:	02 34       	cpi	r16, 0x42	; 66
	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);

	portLetter	=	recchar();
	portLetter	=	portLetter & 0x5f;
	sendchar(portLetter);
	PrintNewLine();
   1eee8:	09 f4       	brne	.+2      	; 0x1eeec <main+0x702>
   1eeea:	45 c6       	rjmp	.+3210   	; 0x1fb76 <main+0x138c>

	if ((portLetter >= 'A') && (portLetter <= 'Z'))
   1eeec:	03 34       	cpi	r16, 0x43	; 67
   1eeee:	08 f0       	brcs	.+2      	; 0x1eef2 <main+0x708>
   1eef0:	14 c6       	rjmp	.+3112   	; 0x1fb1a <main+0x1330>
   1eef2:	01 34       	cpi	r16, 0x41	; 65
   1eef4:	09 f4       	brne	.+2      	; 0x1eef8 <main+0x70e>
	{
		getCharFlag	=	true;
		switch(portLetter)
   1eef6:	2c c6       	rjmp	.+3160   	; 0x1fb50 <main+0x1366>
   1eef8:	80 e6       	ldi	r24, 0x60	; 96
   1eefa:	93 ee       	ldi	r25, 0xE3	; 227
   1eefc:	60 e0       	ldi	r22, 0x00	; 0
   1eefe:	1e db       	rcall	.-2500   	; 0x1e53c <PrintFromPROGMEMln>
   1ef00:	11 ce       	rjmp	.-990    	; 0x1eb24 <main+0x33a>
   1ef02:	85 34       	cpi	r24, 0x45	; 69
   1ef04:	09 f4       	brne	.+2      	; 0x1ef08 <main+0x71e>
   1ef06:	9b c0       	rjmp	.+310    	; 0x1f03e <main+0x854>
				PORTL	=	0;
				break;
		#endif

			default:
				PrintFromPROGMEMln(gTextMsg_PortNotSupported, 0);
   1ef08:	86 34       	cpi	r24, 0x46	; 70
   1ef0a:	09 f0       	breq	.+2      	; 0x1ef0e <main+0x724>
   1ef0c:	48 ce       	rjmp	.-880    	; 0x1eb9e <main+0x3b4>
   1ef0e:	8d ee       	ldi	r24, 0xED	; 237
   1ef10:	93 ee       	ldi	r25, 0xE3	; 227
   1ef12:	62 e0       	ldi	r22, 0x02	; 2
#ifdef _DEBUG_SERIAL1_
			sendchar1(theChar);
#endif
		}

		switch(theChar)
   1ef14:	13 db       	rcall	.-2522   	; 0x1e53c <PrintFromPROGMEMln>
   1ef16:	40 91 1a 01 	lds	r20, 0x011A
   1ef1a:	50 91 1b 01 	lds	r21, 0x011B
   1ef1e:	60 91 1c 01 	lds	r22, 0x011C

				break;

			case 'F':
			case 'f':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 2);
   1ef22:	70 91 1d 01 	lds	r23, 0x011D
   1ef26:	80 e0       	ldi	r24, 0x00	; 0
   1ef28:	44 db       	rcall	.-2424   	; 0x1e5b2 <DumpHex.clone.0>
				DumpHex(kDUMP_FLASH, gFlashIndex, 16);
   1ef2a:	80 91 1a 01 	lds	r24, 0x011A
   1ef2e:	90 91 1b 01 	lds	r25, 0x011B
   1ef32:	a0 91 1c 01 	lds	r26, 0x011C
   1ef36:	b0 91 1d 01 	lds	r27, 0x011D
   1ef3a:	80 50       	subi	r24, 0x00	; 0
   1ef3c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ef3e:	af 4f       	sbci	r26, 0xFF	; 255
				gFlashIndex	+=	256;
   1ef40:	bf 4f       	sbci	r27, 0xFF	; 255
   1ef42:	80 93 1a 01 	sts	0x011A, r24
   1ef46:	90 93 1b 01 	sts	0x011B, r25
   1ef4a:	a0 93 1c 01 	sts	0x011C, r26
   1ef4e:	b0 93 1d 01 	sts	0x011D, r27
   1ef52:	e8 cd       	rjmp	.-1072   	; 0x1eb24 <main+0x33a>
   1ef54:	ea 31       	cpi	r30, 0x1A	; 26
   1ef56:	09 f4       	brne	.+2      	; 0x1ef5a <main+0x770>
   1ef58:	87 c4       	rjmp	.+2318   	; 0x1f868 <main+0x107e>
   1ef5a:	ea 31       	cpi	r30, 0x1A	; 26
   1ef5c:	88 f4       	brcc	.+34     	; 0x1ef80 <main+0x796>
   1ef5e:	7d 81       	ldd	r23, Y+5	; 0x05
   1ef60:	73 6c       	ori	r23, 0xC3	; 195
   1ef62:	b9 e0       	ldi	r27, 0x09	; 9
   1ef64:	e1 e0       	ldi	r30, 0x01	; 1
   1ef66:	f0 e0       	ldi	r31, 0x00	; 0
   1ef68:	07 2e       	mov	r0, r23
			sendchar1(msgBuffer[5]);
			sendchar1(msgBuffer[6]);
			sendchar1(msgBuffer[7]);
#endif

			switch (msgBuffer[0])
   1ef6a:	b0 93 57 00 	sts	0x0057, r27
   1ef6e:	e8 95       	spm
   1ef70:	07 b6       	in	r0, 0x37	; 55
   1ef72:	00 fc       	sbrc	r0, 0
	#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
				case CMD_PROGRAM_LOCK_ISP:
					{
						uint8_t lockBits	=	msgBuffer[4];

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   1ef74:	fd cf       	rjmp	.-6      	; 0x1ef70 <main+0x786>
						boot_lock_bits_set(lockBits);		// and program it
   1ef76:	1a 82       	std	Y+2, r1	; 0x02
   1ef78:	1b 82       	std	Y+3, r1	; 0x03
   1ef7a:	83 e0       	ldi	r24, 0x03	; 3
   1ef7c:	90 e0       	ldi	r25, 0x00	; 0
   1ef7e:	fe ce       	rjmp	.-516    	; 0x1ed7c <main+0x592>
   1ef80:	eb 31       	cpi	r30, 0x1B	; 27
   1ef82:	09 f4       	brne	.+2      	; 0x1ef86 <main+0x79c>
   1ef84:	f0 c4       	rjmp	.+2528   	; 0x1f966 <main+0x117c>
						boot_spm_busy_wait();
   1ef86:	ed 31       	cpi	r30, 0x1D	; 29
   1ef88:	09 f0       	breq	.+2      	; 0x1ef8c <main+0x7a2>
   1ef8a:	75 cd       	rjmp	.-1302   	; 0x1ea76 <main+0x28c>

						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   1ef8c:	8d 81       	ldd	r24, Y+5	; 0x05
						msgBuffer[2]	=	STATUS_CMD_OK;
   1ef8e:	80 33       	cpi	r24, 0x30	; 48

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
						boot_lock_bits_set(lockBits);		// and program it
						boot_spm_busy_wait();

						msgLength		=	3;
   1ef90:	09 f4       	brne	.+2      	; 0x1ef94 <main+0x7aa>
   1ef92:	f2 c4       	rjmp	.+2532   	; 0x1f978 <main+0x118e>
						msgBuffer[1]	=	STATUS_CMD_OK;
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
   1ef94:	e8 2f       	mov	r30, r24
			sendchar1(msgBuffer[5]);
			sendchar1(msgBuffer[6]);
			sendchar1(msgBuffer[7]);
#endif

			switch (msgBuffer[0])
   1ef96:	e0 75       	andi	r30, 0x50	; 80
   1ef98:	31 f0       	breq	.+12     	; 0x1efa6 <main+0x7bc>
   1ef9a:	80 35       	cpi	r24, 0x50	; 80
   1ef9c:	09 f4       	brne	.+2      	; 0x1efa0 <main+0x7b6>
   1ef9e:	2f c6       	rjmp	.+3166   	; 0x1fbfe <main+0x1414>
   1efa0:	88 35       	cpi	r24, 0x58	; 88
				case CMD_SPI_MULTI:
					{
						uint8_t answerByte;
						uint8_t flag=0;

						if ( msgBuffer[4]== 0x30 )
   1efa2:	09 f4       	brne	.+2      	; 0x1efa6 <main+0x7bc>
   1efa4:	25 c6       	rjmp	.+3146   	; 0x1fbf0 <main+0x1406>
   1efa6:	90 e0       	ldi	r25, 0x00	; 0
   1efa8:	1a 82       	std	Y+2, r1	; 0x02
							else
							{
								answerByte	=	SIGNATURE_BYTES & 0x000000FF;
							}
						}
						else if ( msgBuffer[4] & 0x50 )
   1efaa:	1b 82       	std	Y+3, r1	; 0x03
   1efac:	8c 83       	std	Y+4, r24	; 0x04
   1efae:	1d 82       	std	Y+5, r1	; 0x05
						//*	Issue 544: 	stk500v2 bootloader doesn't support reading fuses
						//*	I can't find the docs that say what these are supposed to be but this was figured out by trial and error
						//	answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
						//	answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
						//	answerByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
							if (msgBuffer[4] == 0x50)
   1efb0:	9e 83       	std	Y+6, r25	; 0x06
   1efb2:	1f 82       	std	Y+7, r1	; 0x07
   1efb4:	87 e0       	ldi	r24, 0x07	; 7
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
							}
							else if (msgBuffer[4] == 0x58)
   1efb6:	90 e0       	ldi	r25, 0x00	; 0
   1efb8:	e1 ce       	rjmp	.-574    	; 0x1ed7c <main+0x592>
   1efba:	e0 31       	cpi	r30, 0x10	; 16
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
							}
							else
							{
								answerByte	=	0;
   1efbc:	09 f0       	breq	.+2      	; 0x1efc0 <main+0x7d6>
							answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
						}
						if ( !flag )
						{
							msgLength		=	7;
							msgBuffer[1]	=	STATUS_CMD_OK;
   1efbe:	5b cd       	rjmp	.-1354   	; 0x1ea76 <main+0x28c>
							msgBuffer[2]	=	0;
   1efc0:	da ce       	rjmp	.-588    	; 0x1ed76 <main+0x58c>
							msgBuffer[3]	=	msgBuffer[4];
   1efc2:	ea 81       	ldd	r30, Y+2	; 0x02
							msgBuffer[4]	=	0;
   1efc4:	e0 58       	subi	r30, 0x80	; 128
							msgBuffer[5]	=	answerByte;
   1efc6:	e3 31       	cpi	r30, 0x13	; 19
							msgBuffer[6]	=	STATUS_CMD_OK;
   1efc8:	08 f0       	brcs	.+2      	; 0x1efcc <main+0x7e2>
						{
							answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
						}
						if ( !flag )
						{
							msgLength		=	7;
   1efca:	a5 c5       	rjmp	.+2890   	; 0x1fb16 <main+0x132c>
   1efcc:	f0 e0       	ldi	r31, 0x00	; 0
   1efce:	e0 50       	subi	r30, 0x00	; 0
			sendchar1(msgBuffer[5]);
			sendchar1(msgBuffer[6]);
			sendchar1(msgBuffer[7]);
#endif

			switch (msgBuffer[0])
   1efd0:	ff 4f       	sbci	r31, 0xFF	; 255
   1efd2:	80 81       	ld	r24, Z
   1efd4:	1a 82       	std	Y+2, r1	; 0x02
   1efd6:	8b 83       	std	Y+3, r24	; 0x03

				case CMD_GET_PARAMETER:
					{
						uint8_t value;

						switch(msgBuffer[1])
   1efd8:	83 e0       	ldi	r24, 0x03	; 3
   1efda:	90 e0       	ldi	r25, 0x00	; 0
   1efdc:	cf ce       	rjmp	.-610    	; 0x1ed7c <main+0x592>
   1efde:	89 e1       	ldi	r24, 0x19	; 25
   1efe0:	94 ee       	ldi	r25, 0xE4	; 228
   1efe2:	62 e0       	ldi	r22, 0x02	; 2
   1efe4:	ab da       	rcall	.-2730   	; 0x1e53c <PrintFromPROGMEMln>
   1efe6:	40 91 1e 01 	lds	r20, 0x011E
						default:
							value	=	0;
							break;
						}
						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   1efea:	50 91 1f 01 	lds	r21, 0x011F
							break;
						default:
							value	=	0;
							break;
						}
						msgLength		=	3;
   1efee:	60 91 20 01 	lds	r22, 0x0120
						msgBuffer[1]	=	STATUS_CMD_OK;
						msgBuffer[2]	=	value;
					}
					break;
   1eff2:	70 91 21 01 	lds	r23, 0x0121
				keepGoing	=	false;
				break;

			case 'R':
			case 'r':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 2);
   1eff6:	82 e0       	ldi	r24, 0x02	; 2
   1eff8:	dc da       	rcall	.-2632   	; 0x1e5b2 <DumpHex.clone.0>
   1effa:	80 91 1e 01 	lds	r24, 0x011E
				DumpHex(kDUMP_RAM, gRamIndex, 16);
   1effe:	90 91 1f 01 	lds	r25, 0x011F
   1f002:	a0 91 20 01 	lds	r26, 0x0120
   1f006:	b0 91 21 01 	lds	r27, 0x0121
   1f00a:	80 50       	subi	r24, 0x00	; 0
   1f00c:	9f 4f       	sbci	r25, 0xFF	; 255
   1f00e:	af 4f       	sbci	r26, 0xFF	; 255
   1f010:	bf 4f       	sbci	r27, 0xFF	; 255
   1f012:	80 93 1e 01 	sts	0x011E, r24
				gRamIndex	+=	256;
   1f016:	90 93 1f 01 	sts	0x011F, r25
   1f01a:	a0 93 20 01 	sts	0x0120, r26
   1f01e:	b0 93 21 01 	sts	0x0121, r27
   1f022:	80 cd       	rjmp	.-1280   	; 0x1eb24 <main+0x33a>
   1f024:	81 e0       	ldi	r24, 0x01	; 1
   1f026:	94 ee       	ldi	r25, 0xE4	; 228
   1f028:	62 e0       	ldi	r22, 0x02	; 2
   1f02a:	88 da       	rcall	.-2800   	; 0x1e53c <PrintFromPROGMEMln>
   1f02c:	81 e4       	ldi	r24, 0x41	; 65
   1f02e:	72 da       	rcall	.-2844   	; 0x1e514 <PrintAvailablePort>
   1f030:	82 e4       	ldi	r24, 0x42	; 66
   1f032:	70 da       	rcall	.-2848   	; 0x1e514 <PrintAvailablePort>
   1f034:	83 e4       	ldi	r24, 0x43	; 67
   1f036:	6e da       	rcall	.-2852   	; 0x1e514 <PrintAvailablePort>
   1f038:	84 e4       	ldi	r24, 0x44	; 68
   1f03a:	6c da       	rcall	.-2856   	; 0x1e514 <PrintAvailablePort>
   1f03c:	73 cd       	rjmp	.-1306   	; 0x1eb24 <main+0x33a>
				PrintHelp();
				break;

			case 'L':
			case 'l':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 2);
   1f03e:	8f ed       	ldi	r24, 0xDF	; 223
   1f040:	93 ee       	ldi	r25, 0xE3	; 227
   1f042:	62 e0       	ldi	r22, 0x02	; 2
   1f044:	7b da       	rcall	.-2826   	; 0x1e53c <PrintFromPROGMEMln>
   1f046:	40 91 16 01 	lds	r20, 0x0116
//************************************************************************
static void	ListAvailablePorts(void)
{

#ifdef DDRA
	PrintAvailablePort('A');
   1f04a:	50 91 17 01 	lds	r21, 0x0117
#endif

#ifdef DDRB
	PrintAvailablePort('B');
   1f04e:	60 91 18 01 	lds	r22, 0x0118
   1f052:	70 91 19 01 	lds	r23, 0x0119
#endif

#ifdef DDRC
	PrintAvailablePort('C');
   1f056:	81 e0       	ldi	r24, 0x01	; 1
   1f058:	ac da       	rcall	.-2728   	; 0x1e5b2 <DumpHex.clone.0>
#endif

#ifdef DDRD
	PrintAvailablePort('D');
   1f05a:	80 91 16 01 	lds	r24, 0x0116
   1f05e:	90 91 17 01 	lds	r25, 0x0117
				BlinkLED();
				break;

			case 'E':
			case 'e':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 2);
   1f062:	a0 91 18 01 	lds	r26, 0x0118
   1f066:	b0 91 19 01 	lds	r27, 0x0119
   1f06a:	80 50       	subi	r24, 0x00	; 0
				DumpHex(kDUMP_EEPROM, gEepromIndex, 16);
   1f06c:	9f 4f       	sbci	r25, 0xFF	; 255
   1f06e:	af 4f       	sbci	r26, 0xFF	; 255
   1f070:	bf 4f       	sbci	r27, 0xFF	; 255
   1f072:	80 93 16 01 	sts	0x0116, r24
   1f076:	90 93 17 01 	sts	0x0117, r25
   1f07a:	a0 93 18 01 	sts	0x0118, r26
   1f07e:	b0 93 19 01 	sts	0x0119, r27
				gEepromIndex	+=	256;
   1f082:	80 30       	cpi	r24, 0x00	; 0
   1f084:	30 e1       	ldi	r19, 0x10	; 16
   1f086:	93 07       	cpc	r25, r19
   1f088:	30 e0       	ldi	r19, 0x00	; 0
   1f08a:	a3 07       	cpc	r26, r19
   1f08c:	30 e0       	ldi	r19, 0x00	; 0
   1f08e:	b3 07       	cpc	r27, r19
   1f090:	08 f4       	brcc	.+2      	; 0x1f094 <main+0x8aa>
   1f092:	48 cd       	rjmp	.-1392   	; 0x1eb24 <main+0x33a>
   1f094:	10 92 16 01 	sts	0x0116, r1
   1f098:	10 92 17 01 	sts	0x0117, r1
   1f09c:	10 92 18 01 	sts	0x0118, r1
   1f0a0:	10 92 19 01 	sts	0x0119, r1
   1f0a4:	3f cd       	rjmp	.-1410   	; 0x1eb24 <main+0x33a>
   1f0a6:	84 e2       	ldi	r24, 0x24	; 36
   1f0a8:	94 ee       	ldi	r25, 0xE4	; 228
				if (gEepromIndex > E2END)
   1f0aa:	62 e0       	ldi	r22, 0x02	; 2
   1f0ac:	47 da       	rcall	.-2930   	; 0x1e53c <PrintFromPROGMEMln>
   1f0ae:	84 e2       	ldi	r24, 0x24	; 36
   1f0b0:	92 ee       	ldi	r25, 0xE2	; 226
   1f0b2:	60 e0       	ldi	r22, 0x00	; 0
   1f0b4:	43 da       	rcall	.-2938   	; 0x1e53c <PrintFromPROGMEMln>
   1f0b6:	8a e0       	ldi	r24, 0x0A	; 10
   1f0b8:	93 ee       	ldi	r25, 0xE3	; 227
   1f0ba:	60 e0       	ldi	r22, 0x00	; 0
					gEepromIndex	=	0;
   1f0bc:	3f da       	rcall	.-2946   	; 0x1e53c <PrintFromPROGMEMln>
   1f0be:	22 24       	eor	r2, r2
   1f0c0:	33 24       	eor	r3, r3
   1f0c2:	aa 24       	eor	r10, r10
   1f0c4:	bb 24       	eor	r11, r11
   1f0c6:	65 01       	movw	r12, r10
   1f0c8:	00 e2       	ldi	r16, 0x20	; 32
   1f0ca:	90 2e       	mov	r9, r16
   1f0cc:	d6 01       	movw	r26, r12
				gRamIndex	+=	256;
				break;

			case 'V':
			case 'v':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 2);
   1f0ce:	c5 01       	movw	r24, r10
   1f0d0:	b6 95       	lsr	r27
   1f0d2:	a7 95       	ror	r26
   1f0d4:	97 95       	ror	r25
   1f0d6:	87 95       	ror	r24
	uint16_t	stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
   1f0d8:	c2 5e       	subi	r28, 0xE2	; 226
   1f0da:	de 4f       	sbci	r29, 0xFE	; 254
   1f0dc:	88 83       	st	Y, r24
   1f0de:	99 83       	std	Y+1, r25	; 0x01
   1f0e0:	aa 83       	std	Y+2, r26	; 0x02
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
   1f0e2:	bb 83       	std	Y+3, r27	; 0x03
   1f0e4:	ce 51       	subi	r28, 0x1E	; 30
   1f0e6:	d1 40       	sbci	r29, 0x01	; 1
   1f0e8:	31 01       	movw	r6, r2
   1f0ea:	08 94       	sec
#if defined(_INTERRUPT_NAMES_DEFINED_)
	uint16_t	stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
   1f0ec:	61 1c       	adc	r6, r1
   1f0ee:	71 1c       	adc	r7, r1
	uint32_t	absoluteAddr;
#if defined(_INTERRUPT_NAMES_DEFINED_)
	uint16_t	stringPointer;
#endif

	myMemoryPtr		=	0;
   1f0f0:	c3 01       	movw	r24, r6
   1f0f2:	62 e0       	ldi	r22, 0x02	; 2
   1f0f4:	70 e0       	ldi	r23, 0x00	; 0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f0f6:	33 db       	rcall	.-2458   	; 0x1e75e <PrintDecInt>
   1f0f8:	90 92 c6 00 	sts	0x00C6, r9
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
	{
		wordMemoryAddress	=	myMemoryPtr / 2;
   1f0fc:	40 90 c0 00 	lds	r4, 0x00C0
   1f100:	46 fe       	sbrs	r4, 6
   1f102:	fc cf       	rjmp	.-8      	; 0x1f0fc <main+0x912>
   1f104:	20 91 c0 00 	lds	r18, 0x00C0
   1f108:	20 64       	ori	r18, 0x40	; 64
   1f10a:	20 93 c0 00 	sts	0x00C0, r18
   1f10e:	1d e2       	ldi	r17, 0x2D	; 45
   1f110:	10 93 c6 00 	sts	0x00C6, r17
   1f114:	50 90 c0 00 	lds	r5, 0x00C0
		//					 01 - 0000 = 12 34
		PrintDecInt(vectorIndex + 1, 2);
   1f118:	56 fe       	sbrs	r5, 6
   1f11a:	fc cf       	rjmp	.-8      	; 0x1f114 <main+0x92a>
   1f11c:	30 91 c0 00 	lds	r19, 0x00C0
   1f120:	30 64       	ori	r19, 0x40	; 64
   1f122:	30 93 c0 00 	sts	0x00C0, r19
   1f126:	90 92 c6 00 	sts	0x00C6, r9
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f12a:	80 90 c0 00 	lds	r8, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f12e:	86 fe       	sbrs	r8, 6
   1f130:	fc cf       	rjmp	.-8      	; 0x1f12a <main+0x940>
   1f132:	40 91 c0 00 	lds	r20, 0x00C0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f136:	40 64       	ori	r20, 0x40	; 64
   1f138:	40 93 c0 00 	sts	0x00C0, r20
   1f13c:	c1 5e       	subi	r28, 0xE1	; 225
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f13e:	de 4f       	sbci	r29, 0xFE	; 254
   1f140:	88 81       	ld	r24, Y
   1f142:	cf 51       	subi	r28, 0x1F	; 31
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f144:	d1 40       	sbci	r29, 0x01	; 1
   1f146:	10 da       	rcall	.-3040   	; 0x1e568 <PrintHexByte>
   1f148:	c2 5e       	subi	r28, 0xE2	; 226
   1f14a:	de 4f       	sbci	r29, 0xFE	; 254
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f14c:	88 81       	ld	r24, Y
   1f14e:	ce 51       	subi	r28, 0x1E	; 30
   1f150:	d1 40       	sbci	r29, 0x01	; 1
   1f152:	0a da       	rcall	.-3052   	; 0x1e568 <PrintHexByte>
   1f154:	90 92 c6 00 	sts	0x00C6, r9
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f158:	a0 91 c0 00 	lds	r26, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f15c:	a6 ff       	sbrs	r26, 6
   1f15e:	fc cf       	rjmp	.-8      	; 0x1f158 <main+0x96e>
   1f160:	60 91 c0 00 	lds	r22, 0x00C0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f164:	60 64       	ori	r22, 0x40	; 64
   1f166:	60 93 c0 00 	sts	0x00C0, r22
   1f16a:	5d e3       	ldi	r21, 0x3D	; 61
		//					 01 - 0000 = 12 34
		PrintDecInt(vectorIndex + 1, 2);
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);
		PrintHexByte((wordMemoryAddress >> 8) & 0x00ff);
   1f16c:	50 93 c6 00 	sts	0x00C6, r21
   1f170:	70 91 c0 00 	lds	r23, 0x00C0
   1f174:	76 ff       	sbrs	r23, 6
   1f176:	fc cf       	rjmp	.-8      	; 0x1f170 <main+0x986>
   1f178:	b0 91 c0 00 	lds	r27, 0x00C0
		PrintHexByte((wordMemoryAddress) & 0x00ff);
   1f17c:	b0 64       	ori	r27, 0x40	; 64
   1f17e:	b0 93 c0 00 	sts	0x00C0, r27
   1f182:	90 92 c6 00 	sts	0x00C6, r9
   1f186:	e0 90 c0 00 	lds	r14, 0x00C0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f18a:	e6 fe       	sbrs	r14, 6
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f18c:	fc cf       	rjmp	.-8      	; 0x1f186 <main+0x99c>
   1f18e:	80 91 c0 00 	lds	r24, 0x00C0
   1f192:	80 64       	ori	r24, 0x40	; 64
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f194:	80 93 c0 00 	sts	0x00C0, r24
   1f198:	cb be       	out	0x3b, r12	; 59
   1f19a:	f5 01       	movw	r30, r10
   1f19c:	87 90       	elpm	r8, Z+
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f19e:	28 2d       	mov	r18, r8
   1f1a0:	30 e0       	ldi	r19, 0x00	; 0
   1f1a2:	40 e0       	ldi	r20, 0x00	; 0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f1a4:	50 e0       	ldi	r21, 0x00	; 0
   1f1a6:	ce 5d       	subi	r28, 0xDE	; 222
   1f1a8:	de 4f       	sbci	r29, 0xFE	; 254
   1f1aa:	28 83       	st	Y, r18
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f1ac:	39 83       	std	Y+1, r19	; 0x01
   1f1ae:	4a 83       	std	Y+2, r20	; 0x02
   1f1b0:	5b 83       	std	Y+3, r21	; 0x03
   1f1b2:	c2 52       	subi	r28, 0x22	; 34
   1f1b4:	d1 40       	sbci	r29, 0x01	; 1
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f1b6:	d6 01       	movw	r26, r12
   1f1b8:	c5 01       	movw	r24, r10
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f1ba:	01 96       	adiw	r24, 0x01	; 1
   1f1bc:	a1 1d       	adc	r26, r1
   1f1be:	b1 1d       	adc	r27, r1
   1f1c0:	ab bf       	out	0x3b, r26	; 59
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f1c2:	fc 01       	movw	r30, r24
   1f1c4:	87 91       	elpm	r24, Z+
   1f1c6:	28 2f       	mov	r18, r24
   1f1c8:	30 e0       	ldi	r19, 0x00	; 0
   1f1ca:	40 e0       	ldi	r20, 0x00	; 0
		sendchar(0x20);


		//*	the AVR is LITTLE ENDIAN, swap the byte order
	#if (FLASHEND > 0x10000)
		byte1	=	pgm_read_byte_far(myMemoryPtr++);
   1f1cc:	50 e0       	ldi	r21, 0x00	; 0
   1f1ce:	c6 5d       	subi	r28, 0xD6	; 214
   1f1d0:	de 4f       	sbci	r29, 0xFE	; 254
   1f1d2:	28 83       	st	Y, r18
   1f1d4:	39 83       	std	Y+1, r19	; 0x01
   1f1d6:	4a 83       	std	Y+2, r20	; 0x02
   1f1d8:	5b 83       	std	Y+3, r21	; 0x03
   1f1da:	ca 52       	subi	r28, 0x2A	; 42
   1f1dc:	d1 40       	sbci	r29, 0x01	; 1
   1f1de:	a6 01       	movw	r20, r12
   1f1e0:	95 01       	movw	r18, r10
   1f1e2:	2e 5f       	subi	r18, 0xFE	; 254
   1f1e4:	3f 4f       	sbci	r19, 0xFF	; 255
   1f1e6:	4f 4f       	sbci	r20, 0xFF	; 255
   1f1e8:	5f 4f       	sbci	r21, 0xFF	; 255
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
   1f1ea:	4b bf       	out	0x3b, r20	; 59
   1f1ec:	f9 01       	movw	r30, r18
   1f1ee:	57 90       	elpm	r5, Z+
   1f1f0:	a6 01       	movw	r20, r12
   1f1f2:	95 01       	movw	r18, r10
   1f1f4:	2d 5f       	subi	r18, 0xFD	; 253
   1f1f6:	3f 4f       	sbci	r19, 0xFF	; 255
   1f1f8:	4f 4f       	sbci	r20, 0xFF	; 255
   1f1fa:	5f 4f       	sbci	r21, 0xFF	; 255
   1f1fc:	4b bf       	out	0x3b, r20	; 59
   1f1fe:	f9 01       	movw	r30, r18
   1f200:	47 90       	elpm	r4, Z+
   1f202:	c6 5d       	subi	r28, 0xD6	; 214
   1f204:	de 4f       	sbci	r29, 0xFE	; 254
   1f206:	28 81       	ld	r18, Y
   1f208:	39 81       	ldd	r19, Y+1	; 0x01
   1f20a:	4a 81       	ldd	r20, Y+2	; 0x02
   1f20c:	5b 81       	ldd	r21, Y+3	; 0x03
   1f20e:	ca 52       	subi	r28, 0x2A	; 42
   1f210:	d1 40       	sbci	r29, 0x01	; 1
		byte3	=	pgm_read_byte_far(myMemoryPtr++);
   1f212:	ee 24       	eor	r14, r14
   1f214:	f2 2e       	mov	r15, r18
   1f216:	03 2f       	mov	r16, r19
   1f218:	14 2f       	mov	r17, r20
   1f21a:	ce 5d       	subi	r28, 0xDE	; 222
   1f21c:	de 4f       	sbci	r29, 0xFE	; 254
   1f21e:	28 81       	ld	r18, Y
   1f220:	39 81       	ldd	r19, Y+1	; 0x01
   1f222:	4a 81       	ldd	r20, Y+2	; 0x02
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
   1f224:	5b 81       	ldd	r21, Y+3	; 0x03
   1f226:	c2 52       	subi	r28, 0x22	; 34
   1f228:	d1 40       	sbci	r29, 0x01	; 1
   1f22a:	e2 0e       	add	r14, r18
   1f22c:	f3 1e       	adc	r15, r19
   1f22e:	04 1f       	adc	r16, r20
   1f230:	15 1f       	adc	r17, r21
   1f232:	9a d9       	rcall	.-3276   	; 0x1e568 <PrintHexByte>
   1f234:	90 92 c6 00 	sts	0x00C6, r9
		byte1	=	pgm_read_byte_near((uint16_t)myMemoryPtr++);
		byte2	=	pgm_read_byte_near((uint16_t)myMemoryPtr++);
		byte3	=	pgm_read_byte_near((uint16_t)myMemoryPtr++);
		byte4	=	pgm_read_byte_near((uint16_t)myMemoryPtr++);
	#endif
		word1	=	(byte2 << 8) + byte1;
   1f238:	e0 91 c0 00 	lds	r30, 0x00C0
   1f23c:	e6 ff       	sbrs	r30, 6
   1f23e:	fc cf       	rjmp	.-8      	; 0x1f238 <main+0xa4e>
   1f240:	f0 91 c0 00 	lds	r31, 0x00C0
   1f244:	f0 64       	ori	r31, 0x40	; 64
   1f246:	f0 93 c0 00 	sts	0x00C0, r31
   1f24a:	88 2d       	mov	r24, r8
   1f24c:	8d d9       	rcall	.-3302   	; 0x1e568 <PrintHexByte>
   1f24e:	90 92 c6 00 	sts	0x00C6, r9
   1f252:	90 91 c0 00 	lds	r25, 0x00C0
   1f256:	96 ff       	sbrs	r25, 6
   1f258:	fc cf       	rjmp	.-8      	; 0x1f252 <main+0xa68>
   1f25a:	80 91 c0 00 	lds	r24, 0x00C0
   1f25e:	80 64       	ori	r24, 0x40	; 64
   1f260:	80 93 c0 00 	sts	0x00C0, r24
   1f264:	84 2d       	mov	r24, r4
		word2	=	(byte4 << 8) + byte3;


		PrintHexByte(byte2);
   1f266:	80 d9       	rcall	.-3328   	; 0x1e568 <PrintHexByte>
   1f268:	90 92 c6 00 	sts	0x00C6, r9
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f26c:	20 91 c0 00 	lds	r18, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f270:	26 ff       	sbrs	r18, 6
   1f272:	fc cf       	rjmp	.-8      	; 0x1f26c <main+0xa82>
   1f274:	30 91 c0 00 	lds	r19, 0x00C0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f278:	30 64       	ori	r19, 0x40	; 64
   1f27a:	30 93 c0 00 	sts	0x00C0, r19
   1f27e:	85 2d       	mov	r24, r5
		word2	=	(byte4 << 8) + byte3;


		PrintHexByte(byte2);
		sendchar(0x20);
		PrintHexByte(byte1);
   1f280:	73 d9       	rcall	.-3354   	; 0x1e568 <PrintHexByte>
   1f282:	90 92 c6 00 	sts	0x00C6, r9
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f286:	40 91 c0 00 	lds	r20, 0x00C0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f28a:	46 ff       	sbrs	r20, 6
   1f28c:	fc cf       	rjmp	.-8      	; 0x1f286 <main+0xa9c>
   1f28e:	a0 91 c0 00 	lds	r26, 0x00C0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f292:	a0 64       	ori	r26, 0x40	; 64
   1f294:	a0 93 c0 00 	sts	0x00C0, r26
   1f298:	3f ef       	ldi	r19, 0xFF	; 255
   1f29a:	e3 16       	cp	r14, r19

		PrintHexByte(byte2);
		sendchar(0x20);
		PrintHexByte(byte1);
		sendchar(0x20);
		PrintHexByte(byte4);
   1f29c:	3f ef       	ldi	r19, 0xFF	; 255
   1f29e:	f3 06       	cpc	r15, r19
   1f2a0:	30 e0       	ldi	r19, 0x00	; 0
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f2a2:	03 07       	cpc	r16, r19
   1f2a4:	30 e0       	ldi	r19, 0x00	; 0
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f2a6:	13 07       	cpc	r17, r19
   1f2a8:	09 f4       	brne	.+2      	; 0x1f2ac <main+0xac2>
   1f2aa:	49 c0       	rjmp	.+146    	; 0x1f33e <main+0xb54>
   1f2ac:	d8 01       	movw	r26, r16
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f2ae:	c7 01       	movw	r24, r14
   1f2b0:	80 70       	andi	r24, 0x00	; 0
   1f2b2:	90 7c       	andi	r25, 0xC0	; 192
   1f2b4:	a0 70       	andi	r26, 0x00	; 0
   1f2b6:	b0 70       	andi	r27, 0x00	; 0
		sendchar(0x20);
		PrintHexByte(byte1);
		sendchar(0x20);
		PrintHexByte(byte4);
		sendchar(0x20);
		PrintHexByte(byte3);
   1f2b8:	80 30       	cpi	r24, 0x00	; 0
   1f2ba:	40 ec       	ldi	r20, 0xC0	; 192
   1f2bc:	94 07       	cpc	r25, r20
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f2be:	40 e0       	ldi	r20, 0x00	; 0
   1f2c0:	a4 07       	cpc	r26, r20
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f2c2:	40 e0       	ldi	r20, 0x00	; 0
   1f2c4:	b4 07       	cpc	r27, r20
   1f2c6:	09 f4       	brne	.+2      	; 0x1f2ca <main+0xae0>
   1f2c8:	3f c0       	rjmp	.+126    	; 0x1f348 <main+0xb5e>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f2ca:	d8 01       	movw	r26, r16
   1f2cc:	c7 01       	movw	r24, r14
   1f2ce:	8e 70       	andi	r24, 0x0E	; 14
   1f2d0:	9e 7f       	andi	r25, 0xFE	; 254
   1f2d2:	a0 70       	andi	r26, 0x00	; 0
		PrintHexByte(byte4);
		sendchar(0x20);
		PrintHexByte(byte3);
		sendchar(0x20);

		if (word1 == 0xffff)
   1f2d4:	b0 70       	andi	r27, 0x00	; 0
   1f2d6:	8c 30       	cpi	r24, 0x0C	; 12
   1f2d8:	44 e9       	ldi	r20, 0x94	; 148
   1f2da:	94 07       	cpc	r25, r20
   1f2dc:	40 e0       	ldi	r20, 0x00	; 0
   1f2de:	a4 07       	cpc	r26, r20
   1f2e0:	40 e0       	ldi	r20, 0x00	; 0
   1f2e2:	b4 07       	cpc	r27, r20
   1f2e4:	09 f4       	brne	.+2      	; 0x1f2e8 <main+0xafe>
   1f2e6:	7d c0       	rjmp	.+250    	; 0x1f3e2 <main+0xbf8>
		{
			PrintFromPROGMEM(gTextMsg_noVector, 0);
		}
		else if ((word1 & 0xc000) == 0xc000)
   1f2e8:	90 92 c6 00 	sts	0x00C6, r9
   1f2ec:	e0 90 c0 00 	lds	r14, 0x00C0
   1f2f0:	e6 fe       	sbrs	r14, 6
   1f2f2:	fc cf       	rjmp	.-8      	; 0x1f2ec <main+0xb02>
   1f2f4:	80 91 c0 00 	lds	r24, 0x00C0
   1f2f8:	80 64       	ori	r24, 0x40	; 64
   1f2fa:	80 93 c0 00 	sts	0x00C0, r24
   1f2fe:	c1 01       	movw	r24, r2
   1f300:	88 0f       	add	r24, r24
   1f302:	99 1f       	adc	r25, r25
   1f304:	82 52       	subi	r24, 0x22	; 34
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
			PrintHexByte((absoluteAddr) & 0x00ff);

		}
		else if ((word1 & 0xfE0E) == 0x940c)
   1f306:	9e 41       	sbci	r25, 0x1E	; 30
   1f308:	aa 27       	eor	r26, r26
   1f30a:	97 fd       	sbrc	r25, 7
   1f30c:	a0 95       	com	r26
   1f30e:	ba 2f       	mov	r27, r26
   1f310:	ab bf       	out	0x3b, r26	; 59
   1f312:	fc 01       	movw	r30, r24
   1f314:	27 91       	elpm	r18, Z+
   1f316:	36 91       	elpm	r19, Z+
   1f318:	c9 01       	movw	r24, r18
   1f31a:	60 e0       	ldi	r22, 0x00	; 0
   1f31c:	bd d8       	rcall	.-3718   	; 0x1e498 <PrintFromPROGMEM>
   1f31e:	e1 d8       	rcall	.-3646   	; 0x1e4e2 <PrintNewLine>
   1f320:	a3 e2       	ldi	r26, 0x23	; 35
   1f322:	6a 16       	cp	r6, r26
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f324:	71 04       	cpc	r7, r1
   1f326:	09 f4       	brne	.+2      	; 0x1f32a <main+0xb40>
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f328:	fd cb       	rjmp	.-2054   	; 0x1eb24 <main+0x33a>
   1f32a:	24 e0       	ldi	r18, 0x04	; 4
   1f32c:	30 e0       	ldi	r19, 0x00	; 0
   1f32e:	40 e0       	ldi	r20, 0x00	; 0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f330:	50 e0       	ldi	r21, 0x00	; 0
   1f332:	a2 0e       	add	r10, r18
   1f334:	b3 1e       	adc	r11, r19
   1f336:	c4 1e       	adc	r12, r20
   1f338:	d5 1e       	adc	r13, r21
		}

	#if defined(_INTERRUPT_NAMES_DEFINED_)
		sendchar(0x20);
	#if (FLASHEND > 0x10000)
		stringPointer	=	pgm_read_word_far(&(gInterruptNameTable[vectorIndex]));
   1f33a:	13 01       	movw	r2, r6
   1f33c:	c7 ce       	rjmp	.-626    	; 0x1f0cc <main+0x8e2>
   1f33e:	8f e3       	ldi	r24, 0x3F	; 63
   1f340:	93 ee       	ldi	r25, 0xE3	; 227
   1f342:	60 e0       	ldi	r22, 0x00	; 0
   1f344:	a9 d8       	rcall	.-3758   	; 0x1e498 <PrintFromPROGMEM>
   1f346:	d0 cf       	rjmp	.-96     	; 0x1f2e8 <main+0xafe>
   1f348:	d8 01       	movw	r26, r16
   1f34a:	c7 01       	movw	r24, r14
   1f34c:	9f 73       	andi	r25, 0x3F	; 63
   1f34e:	a0 70       	andi	r26, 0x00	; 0
   1f350:	b0 70       	andi	r27, 0x00	; 0
   1f352:	ce 5d       	subi	r28, 0xDE	; 222
	#else
		stringPointer	=	pgm_read_word_near(&(gInterruptNameTable[vectorIndex]));
	#endif
		PrintFromPROGMEM((void *)stringPointer, 0);
   1f354:	de 4f       	sbci	r29, 0xFE	; 254
   1f356:	88 83       	st	Y, r24
   1f358:	99 83       	std	Y+1, r25	; 0x01
   1f35a:	aa 83       	std	Y+2, r26	; 0x02
	#endif
		PrintNewLine();
   1f35c:	bb 83       	std	Y+3, r27	; 0x03
   1f35e:	c2 52       	subi	r28, 0x22	; 34
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
	//					 V#   ADDR   op code
	//					  1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount)
   1f360:	d1 40       	sbci	r29, 0x01	; 1
   1f362:	7c 01       	movw	r14, r24
   1f364:	8d 01       	movw	r16, r26
   1f366:	c2 5e       	subi	r28, 0xE2	; 226
   1f368:	de 4f       	sbci	r29, 0xFE	; 254
   1f36a:	28 81       	ld	r18, Y
   1f36c:	39 81       	ldd	r19, Y+1	; 0x01
   1f36e:	4a 81       	ldd	r20, Y+2	; 0x02
   1f370:	5b 81       	ldd	r21, Y+3	; 0x03
   1f372:	ce 51       	subi	r28, 0x1E	; 30
   1f374:	d1 40       	sbci	r29, 0x01	; 1
   1f376:	e2 0e       	add	r14, r18
   1f378:	f3 1e       	adc	r15, r19
	#endif
		PrintFromPROGMEM((void *)stringPointer, 0);
	#endif
		PrintNewLine();

		vectorIndex++;
   1f37a:	04 1f       	adc	r16, r20
   1f37c:	15 1f       	adc	r17, r21
		PrintHexByte(byte3);
		sendchar(0x20);

		if (word1 == 0xffff)
		{
			PrintFromPROGMEM(gTextMsg_noVector, 0);
   1f37e:	ee 0c       	add	r14, r14
   1f380:	ff 1c       	adc	r15, r15
   1f382:	00 1f       	adc	r16, r16
   1f384:	11 1f       	adc	r17, r17
   1f386:	89 e4       	ldi	r24, 0x49	; 73
   1f388:	93 ee       	ldi	r25, 0xE3	; 227
		}
		else if ((word1 & 0xc000) == 0xc000)
		{
			//*	rjmp instruction
			relativeAddr	=	word1 & 0x3FFF;
   1f38a:	60 e0       	ldi	r22, 0x00	; 0
   1f38c:	85 d8       	rcall	.-3830   	; 0x1e498 <PrintFromPROGMEM>
   1f38e:	cd 5d       	subi	r28, 0xDD	; 221
   1f390:	de 4f       	sbci	r29, 0xFE	; 254
   1f392:	88 81       	ld	r24, Y
   1f394:	c3 52       	subi	r28, 0x23	; 35
   1f396:	d1 40       	sbci	r29, 0x01	; 1
   1f398:	e7 d8       	rcall	.-3634   	; 0x1e568 <PrintHexByte>
   1f39a:	ce 5d       	subi	r28, 0xDE	; 222
   1f39c:	de 4f       	sbci	r29, 0xFE	; 254
   1f39e:	88 81       	ld	r24, Y
   1f3a0:	c2 52       	subi	r28, 0x22	; 34
   1f3a2:	d1 40       	sbci	r29, 0x01	; 1
			absoluteAddr	=	wordMemoryAddress + relativeAddr;	//*	add the offset to the current address
   1f3a4:	e1 d8       	rcall	.-3646   	; 0x1e568 <PrintHexByte>
   1f3a6:	90 92 c6 00 	sts	0x00C6, r9
   1f3aa:	10 91 c0 00 	lds	r17, 0x00C0
   1f3ae:	16 ff       	sbrs	r17, 6
   1f3b0:	fc cf       	rjmp	.-8      	; 0x1f3aa <main+0xbc0>
   1f3b2:	60 91 c0 00 	lds	r22, 0x00C0
   1f3b6:	60 64       	ori	r22, 0x40	; 64
   1f3b8:	60 93 c0 00 	sts	0x00C0, r22
   1f3bc:	5e e3       	ldi	r21, 0x3E	; 62
   1f3be:	50 93 c6 00 	sts	0x00C6, r21
			absoluteAddr	=	absoluteAddr << 1;					//*	multiply by 2 for byte address
   1f3c2:	70 91 c0 00 	lds	r23, 0x00C0
   1f3c6:	76 ff       	sbrs	r23, 6

			PrintFromPROGMEM(gTextMsg_rjmp, 0);
   1f3c8:	fc cf       	rjmp	.-8      	; 0x1f3c2 <main+0xbd8>
   1f3ca:	b0 91 c0 00 	lds	r27, 0x00C0
   1f3ce:	b0 64       	ori	r27, 0x40	; 64
   1f3d0:	b0 93 c0 00 	sts	0x00C0, r27
			PrintHexByte((relativeAddr >> 8) & 0x00ff);
   1f3d4:	80 2f       	mov	r24, r16
   1f3d6:	c8 d8       	rcall	.-3696   	; 0x1e568 <PrintHexByte>
   1f3d8:	8f 2d       	mov	r24, r15
   1f3da:	c6 d8       	rcall	.-3700   	; 0x1e568 <PrintHexByte>
   1f3dc:	8e 2d       	mov	r24, r14
   1f3de:	c4 d8       	rcall	.-3704   	; 0x1e568 <PrintHexByte>
			PrintHexByte((relativeAddr) & 0x00ff);
   1f3e0:	83 cf       	rjmp	.-250    	; 0x1f2e8 <main+0xafe>
   1f3e2:	84 2d       	mov	r24, r4
   1f3e4:	90 e0       	ldi	r25, 0x00	; 0
   1f3e6:	a0 e0       	ldi	r26, 0x00	; 0
   1f3e8:	b0 e0       	ldi	r27, 0x00	; 0
   1f3ea:	ee 24       	eor	r14, r14
   1f3ec:	f8 2e       	mov	r15, r24
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f3ee:	09 2f       	mov	r16, r25
   1f3f0:	1a 2f       	mov	r17, r26
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f3f2:	e5 0c       	add	r14, r5
   1f3f4:	f1 1c       	adc	r15, r1
   1f3f6:	01 1d       	adc	r16, r1
   1f3f8:	11 1d       	adc	r17, r1
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f3fa:	ce 5d       	subi	r28, 0xDE	; 222
   1f3fc:	de 4f       	sbci	r29, 0xFE	; 254
   1f3fe:	88 81       	ld	r24, Y
   1f400:	99 81       	ldd	r25, Y+1	; 0x01
   1f402:	aa 81       	ldd	r26, Y+2	; 0x02
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f404:	bb 81       	ldd	r27, Y+3	; 0x03
   1f406:	c2 52       	subi	r28, 0x22	; 34
   1f408:	d1 40       	sbci	r29, 0x01	; 1
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f40a:	81 70       	andi	r24, 0x01	; 1
   1f40c:	90 70       	andi	r25, 0x00	; 0
   1f40e:	a0 70       	andi	r26, 0x00	; 0
   1f410:	b0 70       	andi	r27, 0x00	; 0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f412:	dc 01       	movw	r26, r24
   1f414:	99 27       	eor	r25, r25
   1f416:	88 27       	eor	r24, r24
   1f418:	e8 0e       	add	r14, r24
   1f41a:	f9 1e       	adc	r15, r25
			PrintFromPROGMEM(gTextMsg_rjmp, 0);
			PrintHexByte((relativeAddr >> 8) & 0x00ff);
			PrintHexByte((relativeAddr) & 0x00ff);
			sendchar(0x20);
			sendchar('>');
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
   1f41c:	0a 1f       	adc	r16, r26
   1f41e:	1b 1f       	adc	r17, r27
   1f420:	ce 5d       	subi	r28, 0xDE	; 222
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
   1f422:	de 4f       	sbci	r29, 0xFE	; 254
   1f424:	88 81       	ld	r24, Y
   1f426:	99 81       	ldd	r25, Y+1	; 0x01
			PrintHexByte((absoluteAddr) & 0x00ff);
   1f428:	aa 81       	ldd	r26, Y+2	; 0x02
   1f42a:	bb 81       	ldd	r27, Y+3	; 0x03
   1f42c:	c2 52       	subi	r28, 0x22	; 34
   1f42e:	d1 40       	sbci	r29, 0x01	; 1
		//*	the AVR is LITTLE ENDIAN, swap the byte order
	#if (FLASHEND > 0x10000)
		byte1	=	pgm_read_byte_far(myMemoryPtr++);
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
		byte3	=	pgm_read_byte_far(myMemoryPtr++);
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
   1f430:	80 7f       	andi	r24, 0xF0	; 240
   1f432:	90 70       	andi	r25, 0x00	; 0
   1f434:	a0 70       	andi	r26, 0x00	; 0
   1f436:	b0 70       	andi	r27, 0x00	; 0
		byte2	=	pgm_read_byte_near((uint16_t)myMemoryPtr++);
		byte3	=	pgm_read_byte_near((uint16_t)myMemoryPtr++);
		byte4	=	pgm_read_byte_near((uint16_t)myMemoryPtr++);
	#endif
		word1	=	(byte2 << 8) + byte1;
		word2	=	(byte4 << 8) + byte3;
   1f438:	51 e1       	ldi	r21, 0x11	; 17
   1f43a:	88 0f       	add	r24, r24
   1f43c:	99 1f       	adc	r25, r25
   1f43e:	aa 1f       	adc	r26, r26
   1f440:	bb 1f       	adc	r27, r27
   1f442:	5a 95       	dec	r21
   1f444:	d1 f7       	brne	.-12     	; 0x1f43a <main+0xc50>
   1f446:	e8 0e       	add	r14, r24

		}
		else if ((word1 & 0xfE0E) == 0x940c)
		{
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
   1f448:	f9 1e       	adc	r15, r25
   1f44a:	0a 1f       	adc	r16, r26
   1f44c:	1b 1f       	adc	r17, r27
   1f44e:	c6 5d       	subi	r28, 0xD6	; 214
   1f450:	de 4f       	sbci	r29, 0xFE	; 254
   1f452:	88 81       	ld	r24, Y
   1f454:	99 81       	ldd	r25, Y+1	; 0x01
   1f456:	aa 81       	ldd	r26, Y+2	; 0x02
   1f458:	bb 81       	ldd	r27, Y+3	; 0x03
   1f45a:	ca 52       	subi	r28, 0x2A	; 42
   1f45c:	d1 40       	sbci	r29, 0x01	; 1
   1f45e:	81 70       	andi	r24, 0x01	; 1
   1f460:	90 70       	andi	r25, 0x00	; 0
   1f462:	a0 70       	andi	r26, 0x00	; 0
   1f464:	b0 70       	andi	r27, 0x00	; 0
								((byte1 & 0xf0) << 17) +
   1f466:	45 e1       	ldi	r20, 0x15	; 21
   1f468:	88 0f       	add	r24, r24
   1f46a:	99 1f       	adc	r25, r25
   1f46c:	aa 1f       	adc	r26, r26
   1f46e:	bb 1f       	adc	r27, r27
   1f470:	4a 95       	dec	r20
   1f472:	d1 f7       	brne	.-12     	; 0x1f468 <main+0xc7e>
   1f474:	e8 0e       	add	r14, r24
   1f476:	f9 1e       	adc	r15, r25
   1f478:	0a 1f       	adc	r16, r26
   1f47a:	1b 1f       	adc	r17, r27
   1f47c:	d8 01       	movw	r26, r16
   1f47e:	c7 01       	movw	r24, r14
   1f480:	88 0f       	add	r24, r24
   1f482:	99 1f       	adc	r25, r25
   1f484:	aa 1f       	adc	r26, r26
   1f486:	bb 1f       	adc	r27, r27
   1f488:	c2 5e       	subi	r28, 0xE2	; 226
   1f48a:	de 4f       	sbci	r29, 0xFE	; 254
   1f48c:	88 83       	st	Y, r24
   1f48e:	99 83       	std	Y+1, r25	; 0x01
   1f490:	aa 83       	std	Y+2, r26	; 0x02
   1f492:	bb 83       	std	Y+3, r27	; 0x03

		}
		else if ((word1 & 0xfE0E) == 0x940c)
		{
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
   1f494:	ce 51       	subi	r28, 0x1E	; 30
   1f496:	d1 40       	sbci	r29, 0x01	; 1
   1f498:	80 e5       	ldi	r24, 0x50	; 80
   1f49a:	93 ee       	ldi	r25, 0xE3	; 227
								((byte1 & 0xf0) << 17) +
								((byte2 & 0x01) << 21) +
   1f49c:	60 e0       	ldi	r22, 0x00	; 0
   1f49e:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f4a2:	80 2f       	mov	r24, r16
   1f4a4:	61 d8       	rcall	.-3902   	; 0x1e568 <PrintHexByte>
   1f4a6:	8f 2d       	mov	r24, r15
   1f4a8:	5f d8       	rcall	.-3906   	; 0x1e568 <PrintHexByte>
   1f4aa:	8e 2d       	mov	r24, r14
   1f4ac:	5d d8       	rcall	.-3910   	; 0x1e568 <PrintHexByte>
   1f4ae:	90 92 c6 00 	sts	0x00C6, r9
   1f4b2:	00 91 c0 00 	lds	r16, 0x00C0
   1f4b6:	06 ff       	sbrs	r16, 6
   1f4b8:	fc cf       	rjmp	.-8      	; 0x1f4b2 <main+0xcc8>
   1f4ba:	f0 91 c0 00 	lds	r31, 0x00C0
   1f4be:	f0 64       	ori	r31, 0x40	; 64
   1f4c0:	f0 93 c0 00 	sts	0x00C0, r31

		}
		else if ((word1 & 0xfE0E) == 0x940c)
		{
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
   1f4c4:	ee e3       	ldi	r30, 0x3E	; 62
   1f4c6:	e0 93 c6 00 	sts	0x00C6, r30
								((byte1 & 0xf0) << 17) +
								((byte2 & 0x01) << 21) +
								word2;

			absoluteAddr	=	myFullAddress << 1;
   1f4ca:	f0 90 c0 00 	lds	r15, 0x00C0
   1f4ce:	f6 fe       	sbrs	r15, 6
   1f4d0:	fc cf       	rjmp	.-8      	; 0x1f4ca <main+0xce0>
   1f4d2:	90 91 c0 00 	lds	r25, 0x00C0
   1f4d6:	90 64       	ori	r25, 0x40	; 64
   1f4d8:	90 93 c0 00 	sts	0x00C0, r25
   1f4dc:	c0 5e       	subi	r28, 0xE0	; 224
   1f4de:	de 4f       	sbci	r29, 0xFE	; 254
   1f4e0:	88 81       	ld	r24, Y
   1f4e2:	c0 52       	subi	r28, 0x20	; 32
   1f4e4:	d1 40       	sbci	r29, 0x01	; 1

			PrintFromPROGMEM(gTextMsg_jmp, 0);
   1f4e6:	40 d8       	rcall	.-3968   	; 0x1e568 <PrintHexByte>
   1f4e8:	c1 5e       	subi	r28, 0xE1	; 225
   1f4ea:	de 4f       	sbci	r29, 0xFE	; 254
   1f4ec:	88 81       	ld	r24, Y
   1f4ee:	cf 51       	subi	r28, 0x1F	; 31
			PrintHexByte((myFullAddress >> 16) & 0x00ff);
   1f4f0:	d1 40       	sbci	r29, 0x01	; 1
   1f4f2:	3a d8       	rcall	.-3980   	; 0x1e568 <PrintHexByte>
   1f4f4:	c2 5e       	subi	r28, 0xE2	; 226
			PrintHexByte((myFullAddress >> 8) & 0x00ff);
   1f4f6:	de 4f       	sbci	r29, 0xFE	; 254
   1f4f8:	88 81       	ld	r24, Y
   1f4fa:	ce 51       	subi	r28, 0x1E	; 30
			PrintHexByte((myFullAddress) & 0x00ff);
   1f4fc:	d1 40       	sbci	r29, 0x01	; 1
   1f4fe:	34 d8       	rcall	.-3992   	; 0x1e568 <PrintHexByte>
   1f500:	f3 ce       	rjmp	.-538    	; 0x1f2e8 <main+0xafe>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f502:	85 ec       	ldi	r24, 0xC5	; 197
   1f504:	93 ee       	ldi	r25, 0xE3	; 227
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f506:	62 e0       	ldi	r22, 0x02	; 2
   1f508:	19 d8       	rcall	.-4046   	; 0x1e53c <PrintFromPROGMEMln>
   1f50a:	86 e8       	ldi	r24, 0x86	; 134
   1f50c:	93 ee       	ldi	r25, 0xE3	; 227
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f50e:	60 e0       	ldi	r22, 0x00	; 0
   1f510:	15 d8       	rcall	.-4054   	; 0x1e53c <PrintFromPROGMEMln>
   1f512:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
   1f516:	cb 5c       	subi	r28, 0xCB	; 203
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f518:	de 4f       	sbci	r29, 0xFE	; 254
   1f51a:	e8 80       	ld	r14, Y
   1f51c:	c5 53       	subi	r28, 0x35	; 53
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f51e:	d1 40       	sbci	r29, 0x01	; 1
   1f520:	ee 2d       	mov	r30, r14
   1f522:	ea 32       	cpi	r30, 0x2A	; 42
   1f524:	41 f1       	breq	.+80     	; 0x1f576 <main+0xd8c>
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f526:	00 e0       	ldi	r16, 0x00	; 0
   1f528:	10 e0       	ldi	r17, 0x00	; 0
   1f52a:	f9 99       	sbic	0x1f, 1	; 31
   1f52c:	fe cf       	rjmp	.-4      	; 0x1f52a <main+0xd40>
   1f52e:	c8 01       	movw	r24, r16
			PrintHexByte((myFullAddress >> 16) & 0x00ff);
			PrintHexByte((myFullAddress >> 8) & 0x00ff);
			PrintHexByte((myFullAddress) & 0x00ff);
			sendchar(0x20);
			sendchar('>');
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
   1f530:	6e 2d       	mov	r22, r14
   1f532:	c0 d3       	rcall	.+1920   	; 0x1fcb4 <__eeupd_byte_m1284p>
   1f534:	ee 20       	and	r14, r14
   1f536:	09 f4       	brne	.+2      	; 0x1f53a <main+0xd50>
   1f538:	7f c0       	rjmp	.+254    	; 0x1f638 <main+0xe4e>
   1f53a:	e0 92 c6 00 	sts	0x00C6, r14
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
   1f53e:	a0 90 c0 00 	lds	r10, 0x00C0
   1f542:	a6 fe       	sbrs	r10, 6
   1f544:	fc cf       	rjmp	.-8      	; 0x1f53e <main+0xd54>
   1f546:	f0 91 c0 00 	lds	r31, 0x00C0
   1f54a:	f0 64       	ori	r31, 0x40	; 64
			PrintHexByte((absoluteAddr) & 0x00ff);
   1f54c:	f0 93 c0 00 	sts	0x00C0, r31
   1f550:	0f 5f       	subi	r16, 0xFF	; 255
   1f552:	1f 4f       	sbci	r17, 0xFF	; 255
   1f554:	c8 01       	movw	r24, r16
   1f556:	80 5d       	subi	r24, 0xD0	; 208
   1f558:	9d 41       	sbci	r25, 0x1D	; 29
   1f55a:	aa 27       	eor	r26, r26
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
				PrintCPUstats();
				break;

			case '@':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 2);
   1f55c:	97 fd       	sbrc	r25, 7
   1f55e:	a0 95       	com	r26
   1f560:	ba 2f       	mov	r27, r26
   1f562:	ab bf       	out	0x3b, r26	; 59
   1f564:	fc 01       	movw	r30, r24
uint16_t ii;
uint8_t theChar;
uint8_t	theEEPROMchar;
uint16_t errorCount;

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
   1f566:	e7 90       	elpm	r14, Z+
   1f568:	ee 2d       	mov	r30, r14
   1f56a:	ea 32       	cpi	r30, 0x2A	; 42
   1f56c:	21 f0       	breq	.+8      	; 0x1f576 <main+0xd8c>
   1f56e:	f2 e0       	ldi	r31, 0x02	; 2
	PrintNewLine();
   1f570:	00 30       	cpi	r16, 0x00	; 0
   1f572:	1f 07       	cpc	r17, r31
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far((uint32_t)(gTextMsg_Explorer + ii))) != '*') && (ii < 512))
   1f574:	d1 f6       	brne	.-76     	; 0x1f52a <main+0xd40>
   1f576:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
   1f57a:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
   1f57e:	81 e9       	ldi	r24, 0x91	; 145
   1f580:	93 ee       	ldi	r25, 0xE3	; 227
   1f582:	60 e0       	ldi	r22, 0x00	; 0
   1f584:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
#else
	while (((theChar = pgm_read_byte_near((uint16_t)(gTextMsg_Explorer + ii))) != '*') && (ii < 512))
#endif
	{
		eeprom_busy_wait();
   1f588:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
		eeprom_update_byte((uint8_t *)ii, theChar);
   1f58c:	c4 5c       	subi	r28, 0xC4	; 196
   1f58e:	de 4f       	sbci	r29, 0xFE	; 254
   1f590:	a8 80       	ld	r10, Y
   1f592:	cc 53       	subi	r28, 0x3C	; 60
		if (theChar == 0)
   1f594:	d1 40       	sbci	r29, 0x01	; 1
   1f596:	0a 2d       	mov	r16, r10
   1f598:	0a 32       	cpi	r16, 0x2A	; 42
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f59a:	09 f4       	brne	.+2      	; 0x1f59e <main+0xdb4>
   1f59c:	37 c3       	rjmp	.+1646   	; 0x1fc0c <main+0x1422>
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f59e:	ee 24       	eor	r14, r14
   1f5a0:	ff 24       	eor	r15, r15
   1f5a2:	00 e0       	ldi	r16, 0x00	; 0
   1f5a4:	10 e0       	ldi	r17, 0x00	; 0
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f5a6:	c8 01       	movw	r24, r16
   1f5a8:	7d d3       	rcall	.+1786   	; 0x1fca4 <__eerd_byte_m1284p>
   1f5aa:	c8 2e       	mov	r12, r24
   1f5ac:	88 23       	and	r24, r24
   1f5ae:	09 f4       	brne	.+2      	; 0x1f5b2 <main+0xdc8>
		}
		else
		{
			sendchar(theChar);
		}
		ii++;
   1f5b0:	3d c0       	rjmp	.+122    	; 0x1f62c <main+0xe42>
   1f5b2:	80 93 c6 00 	sts	0x00C6, r24

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
	PrintNewLine();
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far((uint32_t)(gTextMsg_Explorer + ii))) != '*') && (ii < 512))
   1f5b6:	90 91 c0 00 	lds	r25, 0x00C0
   1f5ba:	96 ff       	sbrs	r25, 6
   1f5bc:	fc cf       	rjmp	.-8      	; 0x1f5b6 <main+0xdcc>
   1f5be:	80 91 c0 00 	lds	r24, 0x00C0
   1f5c2:	80 64       	ori	r24, 0x40	; 64
   1f5c4:	80 93 c0 00 	sts	0x00C0, r24
   1f5c8:	ca 14       	cp	r12, r10
   1f5ca:	19 f0       	breq	.+6      	; 0x1f5d2 <main+0xde8>
   1f5cc:	08 94       	sec
   1f5ce:	e1 1c       	adc	r14, r1
   1f5d0:	f1 1c       	adc	r15, r1
   1f5d2:	0f 5f       	subi	r16, 0xFF	; 255
   1f5d4:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		ii++;
	}

	//*	now go back through and test
	PrintNewLine();
   1f5d6:	c8 01       	movw	r24, r16
   1f5d8:	80 5d       	subi	r24, 0xD0	; 208
	PrintNewLine();
   1f5da:	9d 41       	sbci	r25, 0x1D	; 29
   1f5dc:	aa 27       	eor	r26, r26
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
   1f5de:	97 fd       	sbrc	r25, 7
   1f5e0:	a0 95       	com	r26
   1f5e2:	ba 2f       	mov	r27, r26
   1f5e4:	ab bf       	out	0x3b, r26	; 59
   1f5e6:	fc 01       	movw	r30, r24
	PrintNewLine();
   1f5e8:	a7 90       	elpm	r10, Z+
   1f5ea:	3a 2d       	mov	r19, r10
	errorCount	=	0;
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far((uint32_t)(gTextMsg_Explorer + ii))) != '*') && (ii < 512))
   1f5ec:	3a 32       	cpi	r19, 0x2A	; 42
   1f5ee:	21 f0       	breq	.+8      	; 0x1f5f8 <main+0xe0e>
   1f5f0:	42 e0       	ldi	r20, 0x02	; 2
   1f5f2:	00 30       	cpi	r16, 0x00	; 0
   1f5f4:	14 07       	cpc	r17, r20
   1f5f6:	b9 f6       	brne	.-82     	; 0x1f5a6 <main+0xdbc>
   1f5f8:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
   1f5fc:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
   1f600:	8c e9       	ldi	r24, 0x9C	; 156
   1f602:	93 ee       	ldi	r25, 0xE3	; 227
   1f604:	60 e0       	ldi	r22, 0x00	; 0
#else
	while (((theChar = pgm_read_byte_near((uint16_t)(gTextMsg_Explorer + ii))) != '*') && (ii < 512))
#endif
	{
		theEEPROMchar	=	eeprom_read_byte((const uint8_t *)ii);
   1f606:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f60a:	c7 01       	movw	r24, r14
   1f60c:	61 e0       	ldi	r22, 0x01	; 1
		if (theEEPROMchar == 0)
   1f60e:	70 e0       	ldi	r23, 0x00	; 0
   1f610:	a6 d8       	rcall	.-3764   	; 0x1e75e <PrintDecInt>
   1f612:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(uint8_t c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   1f616:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
	while ( !(UART_STATUS_REG & _BV(UART_TRANSMIT_COMPLETE) ));	// wait until byte sent
   1f61a:	10 92 16 01 	sts	0x0116, r1
   1f61e:	10 92 17 01 	sts	0x0117, r1
	UART_STATUS_REG |= _BV(UART_TRANSMIT_COMPLETE);				// delete TXCflag
   1f622:	10 92 18 01 	sts	0x0118, r1
   1f626:	10 92 19 01 	sts	0x0119, r1
		}
		else
		{
			sendchar(theEEPROMchar);
		}
		if (theEEPROMchar != theChar)
   1f62a:	7c ca       	rjmp	.-2824   	; 0x1eb24 <main+0x33a>
   1f62c:	84 e8       	ldi	r24, 0x84	; 132
		{
			errorCount++;
   1f62e:	93 ee       	ldi	r25, 0xE3	; 227
   1f630:	60 e0       	ldi	r22, 0x00	; 0
   1f632:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
		}
		ii++;
   1f636:	c8 cf       	rjmp	.-112    	; 0x1f5c8 <main+0xdde>
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
	PrintNewLine();
	errorCount	=	0;
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far((uint32_t)(gTextMsg_Explorer + ii))) != '*') && (ii < 512))
   1f638:	84 e8       	ldi	r24, 0x84	; 132
   1f63a:	93 ee       	ldi	r25, 0xE3	; 227
   1f63c:	60 e0       	ldi	r22, 0x00	; 0
   1f63e:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f642:	86 cf       	rjmp	.-244    	; 0x1f550 <main+0xd66>
   1f644:	89 eb       	ldi	r24, 0xB9	; 185
   1f646:	93 ee       	ldi	r25, 0xE3	; 227
   1f648:	62 e0       	ldi	r22, 0x02	; 2
   1f64a:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f64e:	80 e3       	ldi	r24, 0x30	; 48
   1f650:	92 ee       	ldi	r25, 0xE2	; 226
   1f652:	60 e0       	ldi	r22, 0x00	; 0
   1f654:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f658:	8c e5       	ldi	r24, 0x5C	; 92
		{
			errorCount++;
		}
		ii++;
	}
	PrintNewLine();
   1f65a:	92 ee       	ldi	r25, 0xE2	; 226
   1f65c:	60 e0       	ldi	r22, 0x00	; 0
	PrintNewLine();
   1f65e:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
	PrintFromPROGMEM(gTextMsg_EEPROMerrorCnt, 0);
   1f662:	82 ef       	ldi	r24, 0xF2	; 242
   1f664:	92 ee       	ldi	r25, 0xE2	; 226
   1f666:	60 e0       	ldi	r22, 0x00	; 0
   1f668:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
	PrintDecInt(errorCount, 1);
   1f66c:	8b e6       	ldi	r24, 0x6B	; 107
   1f66e:	92 ee       	ldi	r25, 0xE2	; 226
   1f670:	60 e0       	ldi	r22, 0x00	; 0
   1f672:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
	PrintNewLine();
   1f676:	84 e2       	ldi	r24, 0x24	; 36
   1f678:	92 ee       	ldi	r25, 0xE2	; 226
	PrintNewLine();
   1f67a:	60 e0       	ldi	r22, 0x00	; 0
   1f67c:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>

	gEepromIndex	=	0;	//*	set index back to zero for next eeprom dump
   1f680:	8a e7       	ldi	r24, 0x7A	; 122
   1f682:	92 ee       	ldi	r25, 0xE2	; 226
   1f684:	60 e0       	ldi	r22, 0x00	; 0
   1f686:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f68a:	83 e3       	ldi	r24, 0x33	; 51
   1f68c:	90 e0       	ldi	r25, 0x00	; 0
   1f68e:	61 e0       	ldi	r22, 0x01	; 1
#endif
	{
		theEEPROMchar	=	eeprom_read_byte((const uint8_t *)ii);
		if (theEEPROMchar == 0)
		{
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
   1f690:	70 e0       	ldi	r23, 0x00	; 0
   1f692:	65 d8       	rcall	.-3894   	; 0x1e75e <PrintDecInt>
   1f694:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
   1f698:	88 e9       	ldi	r24, 0x98	; 152
   1f69a:	92 ee       	ldi	r25, 0xE2	; 226
	{
		eeprom_busy_wait();
		eeprom_update_byte((uint8_t *)ii, theChar);
		if (theChar == 0)
		{
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
   1f69c:	60 e0       	ldi	r22, 0x00	; 0
   1f69e:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f6a2:	84 e0       	ldi	r24, 0x04	; 4
   1f6a4:	93 ee       	ldi	r25, 0xE3	; 227
   1f6a6:	60 e0       	ldi	r22, 0x00	; 0
				gRamIndex		=	0;
				gEepromIndex	=	0;
				break;

			case '?':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
   1f6a8:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f6ac:	89 e8       	ldi	r24, 0x89	; 137
   1f6ae:	92 ee       	ldi	r25, 0xE2	; 226
   1f6b0:	60 e0       	ldi	r22, 0x00	; 0
//************************************************************************
static void	PrintCPUstats(void)
{
uint8_t fuseByte;

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
   1f6b2:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f6b6:	8e ef       	ldi	r24, 0xFE	; 254
   1f6b8:	92 ee       	ldi	r25, 0xE2	; 226
   1f6ba:	60 e0       	ldi	r22, 0x00	; 0

	PrintFromPROGMEM(gTextMsg_COMPILED_ON, 0);
   1f6bc:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f6c0:	87 ea       	ldi	r24, 0xA7	; 167
   1f6c2:	92 ee       	ldi	r25, 0xE2	; 226
   1f6c4:	60 e0       	ldi	r22, 0x00	; 0
	PrintFromPROGMEMln(gTextMsg_GCC_DATE_STR, 0);
   1f6c6:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f6ca:	8e e1       	ldi	r24, 0x1E	; 30
   1f6cc:	0e 94 b4 f2 	call	0x1e568	; 0x1e568 <PrintHexByte>

	PrintFromPROGMEM(gTextMsg_CPU_Type, 0);
   1f6d0:	87 e9       	ldi	r24, 0x97	; 151
   1f6d2:	0e 94 b4 f2 	call	0x1e568	; 0x1e568 <PrintHexByte>
   1f6d6:	85 e0       	ldi	r24, 0x05	; 5
   1f6d8:	0e 94 b4 f2 	call	0x1e568	; 0x1e568 <PrintHexByte>
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
   1f6dc:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
   1f6e0:	86 eb       	ldi	r24, 0xB6	; 182
   1f6e2:	92 ee       	ldi	r25, 0xE2	; 226

	PrintFromPROGMEM(gTextMsg_AVR_ARCH, 0);
   1f6e4:	60 e0       	ldi	r22, 0x00	; 0
   1f6e6:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f6ea:	09 e0       	ldi	r16, 0x09	; 9
   1f6ec:	e0 e0       	ldi	r30, 0x00	; 0
	PrintDecInt(__AVR_ARCH__, 1);
   1f6ee:	f0 e0       	ldi	r31, 0x00	; 0
   1f6f0:	00 93 57 00 	sts	0x0057, r16
   1f6f4:	84 91       	lpm	r24, Z+
   1f6f6:	0e 94 b4 f2 	call	0x1e568	; 0x1e568 <PrintHexByte>
	PrintNewLine();
   1f6fa:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_GCC_VERSION, 0);
   1f6fe:	85 ec       	ldi	r24, 0xC5	; 197
   1f700:	92 ee       	ldi	r25, 0xE2	; 226
   1f702:	60 e0       	ldi	r22, 0x00	; 0
   1f704:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_GCC_VERSION_STR, 0);
   1f708:	e3 e0       	ldi	r30, 0x03	; 3
   1f70a:	f0 e0       	ldi	r31, 0x00	; 0
   1f70c:	00 93 57 00 	sts	0x0057, r16
   1f710:	84 91       	lpm	r24, Z+

	//*	these can be found in avr/version.h
	PrintFromPROGMEM(gTextMsg_AVR_LIBC, 0);
   1f712:	0e 94 b4 f2 	call	0x1e568	; 0x1e568 <PrintHexByte>
   1f716:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
   1f71a:	84 ed       	ldi	r24, 0xD4	; 212
	PrintFromPROGMEMln(gTextMsg_AVR_LIBC_VER_STR, 0);
   1f71c:	92 ee       	ldi	r25, 0xE2	; 226
   1f71e:	60 e0       	ldi	r22, 0x00	; 0
   1f720:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f724:	e2 e0       	ldi	r30, 0x02	; 2

#if defined(SIGNATURE_0)
	PrintFromPROGMEM(gTextMsg_CPU_SIGNATURE, 0);
   1f726:	f0 e0       	ldi	r31, 0x00	; 0
   1f728:	00 93 57 00 	sts	0x0057, r16
   1f72c:	84 91       	lpm	r24, Z+
   1f72e:	0e 94 b4 f2 	call	0x1e568	; 0x1e568 <PrintHexByte>
	//*	these can be found in avr/iomxxx.h
	PrintHexByte(SIGNATURE_0);
   1f732:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
	PrintHexByte(SIGNATURE_1);
   1f736:	83 ee       	ldi	r24, 0xE3	; 227
   1f738:	92 ee       	ldi	r25, 0xE2	; 226
   1f73a:	60 e0       	ldi	r22, 0x00	; 0
	PrintHexByte(SIGNATURE_2);
   1f73c:	0e 94 4c f2 	call	0x1e498	; 0x1e498 <PrintFromPROGMEM>
   1f740:	e1 e0       	ldi	r30, 0x01	; 1
	PrintNewLine();
   1f742:	f0 e0       	ldi	r31, 0x00	; 0
   1f744:	00 93 57 00 	sts	0x0057, r16
#endif


#if defined(GET_LOW_FUSE_BITS)
	//*	fuse settings
	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOW, 0);
   1f748:	84 91       	lpm	r24, Z+
   1f74a:	0e 94 b4 f2 	call	0x1e568	; 0x1e568 <PrintHexByte>
   1f74e:	0e 94 71 f2 	call	0x1e4e2	; 0x1e4e2 <PrintNewLine>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   1f752:	e8 c9       	rjmp	.-3120   	; 0x1eb24 <main+0x33a>
   1f754:	8d ea       	ldi	r24, 0xAD	; 173
   1f756:	93 ee       	ldi	r25, 0xE3	; 227
   1f758:	62 e0       	ldi	r22, 0x02	; 2
   1f75a:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
	PrintHexByte(fuseByte);
   1f75e:	10 92 1a 01 	sts	0x011A, r1
	PrintNewLine();
   1f762:	10 92 1b 01 	sts	0x011B, r1

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_HIGH, 0);
   1f766:	10 92 1c 01 	sts	0x011C, r1
   1f76a:	10 92 1d 01 	sts	0x011D, r1
	fuseByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   1f76e:	10 92 1e 01 	sts	0x011E, r1
   1f772:	10 92 1f 01 	sts	0x011F, r1
   1f776:	10 92 20 01 	sts	0x0120, r1
	PrintHexByte(fuseByte);
   1f77a:	10 92 21 01 	sts	0x0121, r1
	PrintNewLine();
   1f77e:	10 92 16 01 	sts	0x0116, r1

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_EXT, 0);
   1f782:	10 92 17 01 	sts	0x0117, r1
   1f786:	10 92 18 01 	sts	0x0118, r1
	fuseByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
   1f78a:	10 92 19 01 	sts	0x0119, r1
   1f78e:	ca c9       	rjmp	.-3180   	; 0x1eb24 <main+0x33a>
   1f790:	83 ed       	ldi	r24, 0xD3	; 211
   1f792:	93 ee       	ldi	r25, 0xE3	; 227
	PrintHexByte(fuseByte);
   1f794:	62 e0       	ldi	r22, 0x02	; 2
   1f796:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
	PrintNewLine();
   1f79a:	27 9a       	sbi	0x04, 7	; 4

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOCK, 0);
   1f79c:	2f 9a       	sbi	0x05, 7	; 5
   1f79e:	80 91 c0 00 	lds	r24, 0x00C0
   1f7a2:	87 fd       	sbrc	r24, 7
   1f7a4:	18 c0       	rjmp	.+48     	; 0x1f7d6 <main+0xfec>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1f7a6:	2f 98       	cbi	0x05, 7	; 5
   1f7a8:	8f ef       	ldi	r24, 0xFF	; 255
   1f7aa:	91 ee       	ldi	r25, 0xE1	; 225
   1f7ac:	a4 e0       	ldi	r26, 0x04	; 4
   1f7ae:	81 50       	subi	r24, 0x01	; 1
	PrintHexByte(fuseByte);
   1f7b0:	90 40       	sbci	r25, 0x00	; 0
   1f7b2:	a0 40       	sbci	r26, 0x00	; 0
	PrintNewLine();
   1f7b4:	e1 f7       	brne	.-8      	; 0x1f7ae <main+0xfc4>
   1f7b6:	00 c0       	rjmp	.+0      	; 0x1f7b8 <main+0xfce>
   1f7b8:	00 00       	nop
		}

		switch(theChar)
		{
			case '0':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 2);
   1f7ba:	2f 9a       	sbi	0x05, 7	; 5
   1f7bc:	2f ef       	ldi	r18, 0xFF	; 255
   1f7be:	31 ee       	ldi	r19, 0xE1	; 225
   1f7c0:	44 e0       	ldi	r20, 0x04	; 4
   1f7c2:	21 50       	subi	r18, 0x01	; 1
				gFlashIndex		=	0;
   1f7c4:	30 40       	sbci	r19, 0x00	; 0
   1f7c6:	40 40       	sbci	r20, 0x00	; 0
   1f7c8:	e1 f7       	brne	.-8      	; 0x1f7c2 <main+0xfd8>
   1f7ca:	00 c0       	rjmp	.+0      	; 0x1f7cc <main+0xfe2>
   1f7cc:	00 00       	nop
   1f7ce:	80 91 c0 00 	lds	r24, 0x00C0
   1f7d2:	87 ff       	sbrs	r24, 7
				gRamIndex		=	0;
   1f7d4:	e8 cf       	rjmp	.-48     	; 0x1f7a6 <main+0xfbc>
   1f7d6:	f0 90 c0 00 	lds	r15, 0x00C0
   1f7da:	f7 fe       	sbrs	r15, 7
   1f7dc:	fc cf       	rjmp	.-8      	; 0x1f7d6 <main+0xfec>
   1f7de:	80 91 c6 00 	lds	r24, 0x00C6
   1f7e2:	a0 c9       	rjmp	.-3264   	; 0x1eb24 <main+0x33a>
				gEepromIndex	=	0;
   1f7e4:	8a ef       	ldi	r24, 0xFA	; 250
   1f7e6:	93 ee       	ldi	r25, 0xE3	; 227
   1f7e8:	62 e0       	ldi	r22, 0x02	; 2
   1f7ea:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f7ee:	8d ea       	ldi	r24, 0xAD	; 173
   1f7f0:	93 ee       	ldi	r25, 0xE3	; 227
   1f7f2:	60 e0       	ldi	r22, 0x00	; 0
   1f7f4:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
				EEPROMtest();
				break;

			case 'B':
			case 'b':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 2);
   1f7f8:	89 eb       	ldi	r24, 0xB9	; 185
   1f7fa:	93 ee       	ldi	r25, 0xE3	; 227
   1f7fc:	60 e0       	ldi	r22, 0x00	; 0
   1f7fe:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>

//************************************************************************
static void BlinkLED(void)
{
	PROGLED_DDR		|=	_BV(PROGLED_PIN);
	PROGLED_PORT	|=	_BV(PROGLED_PIN);	// active high LED ON
   1f802:	85 ec       	ldi	r24, 0xC5	; 197


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE));	// wait for data
   1f804:	93 ee       	ldi	r25, 0xE3	; 227
   1f806:	60 e0       	ldi	r22, 0x00	; 0
static void BlinkLED(void)
{
	PROGLED_DDR		|=	_BV(PROGLED_PIN);
	PROGLED_PORT	|=	_BV(PROGLED_PIN);	// active high LED ON

	while (!Serial_Available())
   1f808:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f80c:	83 ed       	ldi	r24, 0xD3	; 211
   1f80e:	93 ee       	ldi	r25, 0xE3	; 227
   1f810:	60 e0       	ldi	r22, 0x00	; 0
   1f812:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f816:	8f ed       	ldi	r24, 0xDF	; 223
   1f818:	93 ee       	ldi	r25, 0xE3	; 227
   1f81a:	60 e0       	ldi	r22, 0x00	; 0
   1f81c:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f820:	8d ee       	ldi	r24, 0xED	; 237
   1f822:	93 ee       	ldi	r25, 0xE3	; 227
   1f824:	60 e0       	ldi	r22, 0x00	; 0
   1f826:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f82a:	8a ef       	ldi	r24, 0xFA	; 250
   1f82c:	93 ee       	ldi	r25, 0xE3	; 227
   1f82e:	60 e0       	ldi	r22, 0x00	; 0
   1f830:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE));	// wait for data
   1f834:	81 e0       	ldi	r24, 0x01	; 1
   1f836:	94 ee       	ldi	r25, 0xE4	; 228
static void BlinkLED(void)
{
	PROGLED_DDR		|=	_BV(PROGLED_PIN);
	PROGLED_PORT	|=	_BV(PROGLED_PIN);	// active high LED ON

	while (!Serial_Available())
   1f838:	60 e0       	ldi	r22, 0x00	; 0
   1f83a:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
/*
 * Read single byte from USART, block if no data available
 */
static uint8_t recchar(void)
{
	while (!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)))
   1f83e:	82 e1       	ldi	r24, 0x12	; 18
   1f840:	94 ee       	ldi	r25, 0xE4	; 228
   1f842:	60 e0       	ldi	r22, 0x00	; 0
	{
		// wait for data
	}
	return UART_DATA_REG;
   1f844:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f848:	89 e1       	ldi	r24, 0x19	; 25
				gFlashIndex	+=	256;
				break;

			case 'H':
			case 'h':
				PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 2);
   1f84a:	94 ee       	ldi	r25, 0xE4	; 228
   1f84c:	60 e0       	ldi	r22, 0x00	; 0
   1f84e:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f852:	84 e2       	ldi	r24, 0x24	; 36


//*******************************************************************
static void PrintHelp(void)
{
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 0);
   1f854:	94 ee       	ldi	r25, 0xE4	; 228
   1f856:	60 e0       	ldi	r22, 0x00	; 0
   1f858:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f85c:	8d e3       	ldi	r24, 0x3D	; 61
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 0);
   1f85e:	94 ee       	ldi	r25, 0xE4	; 228
   1f860:	60 e0       	ldi	r22, 0x00	; 0
   1f862:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1f866:	5e c9       	rjmp	.-3396   	; 0x1eb24 <main+0x33a>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 0);
   1f868:	1a 82       	std	Y+2, r1	; 0x02
   1f86a:	e1 e0       	ldi	r30, 0x01	; 1
   1f86c:	f0 e0       	ldi	r31, 0x00	; 0
   1f86e:	29 e0       	ldi	r18, 0x09	; 9
   1f870:	20 93 57 00 	sts	0x0057, r18
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 0);
   1f874:	b4 90       	lpm	r11, Z+
   1f876:	bb 82       	std	Y+3, r11	; 0x03
   1f878:	1c 82       	std	Y+4, r1	; 0x04
   1f87a:	84 e0       	ldi	r24, 0x04	; 4
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 0);
   1f87c:	90 e0       	ldi	r25, 0x00	; 0
   1f87e:	7e ca       	rjmp	.-2820   	; 0x1ed7c <main+0x592>
   1f880:	6a 80       	ldd	r6, Y+2	; 0x02
   1f882:	c9 5c       	subi	r28, 0xC9	; 201
   1f884:	de 4f       	sbci	r29, 0xFE	; 254
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 0);
   1f886:	68 82       	st	Y, r6
   1f888:	c7 53       	subi	r28, 0x37	; 55
   1f88a:	d1 40       	sbci	r29, 0x01	; 1
   1f88c:	ca 5c       	subi	r28, 0xCA	; 202
   1f88e:	de 4f       	sbci	r29, 0xFE	; 254
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 0);
   1f890:	18 82       	st	Y, r1
   1f892:	c6 53       	subi	r28, 0x36	; 54
   1f894:	d1 40       	sbci	r29, 0x01	; 1
   1f896:	2b 81       	ldd	r18, Y+3	; 0x03
   1f898:	30 e0       	ldi	r19, 0x00	; 0

	PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 0);
   1f89a:	ca 5c       	subi	r28, 0xCA	; 202
   1f89c:	de 4f       	sbci	r29, 0xFE	; 254
   1f89e:	68 80       	ld	r6, Y
   1f8a0:	79 80       	ldd	r7, Y+1	; 0x01
   1f8a2:	c6 53       	subi	r28, 0x36	; 54
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 0);
   1f8a4:	d1 40       	sbci	r29, 0x01	; 1
   1f8a6:	26 29       	or	r18, r6
   1f8a8:	37 29       	or	r19, r7
   1f8aa:	e3 31       	cpi	r30, 0x13	; 19
   1f8ac:	09 f4       	brne	.+2      	; 0x1f8b0 <main+0x10c6>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 0);
   1f8ae:	6d c0       	rjmp	.+218    	; 0x1f98a <main+0x11a0>
   1f8b0:	59 01       	movw	r10, r18
   1f8b2:	08 94       	sec
   1f8b4:	a1 08       	sbc	r10, r1
   1f8b6:	b1 08       	sbc	r11, r1
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 0);
   1f8b8:	cc 24       	eor	r12, r12
   1f8ba:	dd 24       	eor	r13, r13
   1f8bc:	08 94       	sec
   1f8be:	a1 1c       	adc	r10, r1
   1f8c0:	b1 1c       	adc	r11, r1
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 0);
   1f8c2:	c1 1c       	adc	r12, r1
   1f8c4:	d1 1c       	adc	r13, r1
   1f8c6:	ca 5d       	subi	r28, 0xDA	; 218
   1f8c8:	de 4f       	sbci	r29, 0xFE	; 254
   1f8ca:	88 81       	ld	r24, Y
   1f8cc:	99 81       	ldd	r25, Y+1	; 0x01
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
					msgBuffer[1]	=	STATUS_CMD_OK;
   1f8ce:	aa 81       	ldd	r26, Y+2	; 0x02
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   1f8d0:	bb 81       	ldd	r27, Y+3	; 0x03
   1f8d2:	c6 52       	subi	r28, 0x26	; 38
   1f8d4:	d1 40       	sbci	r29, 0x01	; 1
   1f8d6:	a8 0e       	add	r10, r24
   1f8d8:	b9 1e       	adc	r11, r25
   1f8da:	ca 1e       	adc	r12, r26
   1f8dc:	db 1e       	adc	r13, r27
					msgBuffer[3]	=	STATUS_CMD_OK;
   1f8de:	fe 01       	movw	r30, r28
						msgBuffer[3]	=	STATUS_CMD_OK;
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
   1f8e0:	3b 96       	adiw	r30, 0x0b	; 11
   1f8e2:	2c 01       	movw	r4, r24
					msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
					msgBuffer[3]	=	STATUS_CMD_OK;
					break;
   1f8e4:	3d 01       	movw	r6, r26
					break;

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						uint16_t	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   1f8e6:	41 bc       	out	0x21, r4	; 33
   1f8e8:	bb 27       	eor	r27, r27
   1f8ea:	a7 2d       	mov	r26, r7
   1f8ec:	96 2d       	mov	r25, r6
   1f8ee:	85 2d       	mov	r24, r5
   1f8f0:	82 bd       	out	0x22, r24	; 34
   1f8f2:	08 94       	sec
   1f8f4:	41 1c       	adc	r4, r1
   1f8f6:	51 1c       	adc	r5, r1
   1f8f8:	61 1c       	adc	r6, r1
   1f8fa:	71 1c       	adc	r7, r1
   1f8fc:	81 91       	ld	r24, Z+
   1f8fe:	80 bd       	out	0x20, r24	; 32
   1f900:	fa 9a       	sbi	0x1f, 2	; 31
   1f902:	f9 9a       	sbi	0x1f, 1	; 31
   1f904:	f9 99       	sbic	0x1f, 1	; 31
   1f906:	fe cf       	rjmp	.-4      	; 0x1f904 <main+0x111a>
   1f908:	4a 14       	cp	r4, r10
   1f90a:	5b 04       	cpc	r5, r11
   1f90c:	6c 04       	cpc	r6, r12
   1f90e:	7d 04       	cpc	r7, r13
						uint16_t	data;
						uint8_t	highByte, lowByte;
						address_t		tempaddress	=	address;


						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   1f910:	51 f7       	brne	.-44     	; 0x1f8e6 <main+0x10fc>
   1f912:	29 ca       	rjmp	.-2990   	; 0x1ed66 <main+0x57c>
   1f914:	1a 82       	std	Y+2, r1	; 0x02

/* Main program loop */
int main(void) __attribute__ ((OS_main));

//*****************************************************************************
int main(void)
   1f916:	98 e0       	ldi	r25, 0x08	; 8
   1f918:	9b 83       	std	Y+3, r25	; 0x03
   1f91a:	e1 e4       	ldi	r30, 0x41	; 65
   1f91c:	ec 83       	std	Y+4, r30	; 0x04
   1f91e:	b6 e5       	ldi	r27, 0x56	; 86
   1f920:	bd 83       	std	Y+5, r27	; 0x05
   1f922:	72 e5       	ldi	r23, 0x52	; 82
   1f924:	7e 83       	std	Y+6, r23	; 0x06
   1f926:	69 e4       	ldi	r22, 0x49	; 73
   1f928:	6f 83       	std	Y+7, r22	; 0x07
   1f92a:	a3 e5       	ldi	r26, 0x53	; 83
   1f92c:	a8 87       	std	Y+8, r26	; 0x08
   1f92e:	30 e5       	ldi	r19, 0x50	; 80
   1f930:	39 87       	std	Y+9, r19	; 0x09
   1f932:	8f e5       	ldi	r24, 0x5F	; 95
   1f934:	8a 87       	std	Y+10, r24	; 0x0a
   1f936:	f2 e3       	ldi	r31, 0x32	; 50
   1f938:	fb 87       	std	Y+11, r31	; 0x0b
   1f93a:	8b e0       	ldi	r24, 0x0B	; 11
   1f93c:	90 e0       	ldi	r25, 0x00	; 0
   1f93e:	1e ca       	rjmp	.-3012   	; 0x1ed7c <main+0x592>
   1f940:	99 24       	eor	r9, r9
   1f942:	93 94       	inc	r9

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						uint16_t	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						uint8_t	*p	=	msgBuffer+10;
   1f944:	18 ca       	rjmp	.-3024   	; 0x1ed76 <main+0x58c>
   1f946:	fb 81       	ldd	r31, Y+3	; 0x03
   1f948:	f0 35       	cpi	r31, 0x50	; 80
   1f94a:	09 f4       	brne	.+2      	; 0x1f94e <main+0x1164>
						//*	issue 543, this should work, It has not been tested.
					//	#if (!defined(__AVR_ATmega1280__) && !defined(__AVR_ATmega2560__)  && !defined(__AVR_ATmega2561__)  && !defined(__AVR_ATmega1284P__)  && !defined(__AVR_ATmega640__))
						#if (defined(EEARL) && defined(EEARH)  && defined(EEMWE)  && defined(EEWE)  && defined(EEDR))
							/* write EEPROM */
							do {
								EEARL	=	address;			// Setup EEPROM address
   1f94c:	b6 c0       	rjmp	.+364    	; 0x1faba <main+0x12d0>
								EEARH	=	(address >> 8);
   1f94e:	e3 e0       	ldi	r30, 0x03	; 3
   1f950:	f0 e0       	ldi	r31, 0x00	; 0
   1f952:	69 e0       	ldi	r22, 0x09	; 9
   1f954:	60 93 57 00 	sts	0x0057, r22
								address++;						// Select next EEPROM byte
   1f958:	84 91       	lpm	r24, Z+
   1f95a:	1a 82       	std	Y+2, r1	; 0x02
   1f95c:	8b 83       	std	Y+3, r24	; 0x03
   1f95e:	1c 82       	std	Y+4, r1	; 0x04
   1f960:	84 e0       	ldi	r24, 0x04	; 4

								EEDR	=	*p++;				// get byte from buffer
   1f962:	90 e0       	ldi	r25, 0x00	; 0
   1f964:	0b ca       	rjmp	.-3050   	; 0x1ed7c <main+0x592>
								EECR	|=	_BV(EEMWE);			// Write data into EEPROM
   1f966:	8d 81       	ldd	r24, Y+5	; 0x05
								EECR	|=	_BV(EEWE);
   1f968:	88 23       	and	r24, r24

								while (EECR & _BV(EEWE));	// Wait for write operation to finish
   1f96a:	09 f4       	brne	.+2      	; 0x1f96e <main+0x1184>
   1f96c:	b1 c0       	rjmp	.+354    	; 0x1fad0 <main+0x12e6>
								size--;						// Decrease number of bytes to write
							} while (size);					// Loop until all bytes written
   1f96e:	81 30       	cpi	r24, 0x01	; 1
   1f970:	09 f4       	brne	.+2      	; 0x1f974 <main+0x118a>
   1f972:	3c c1       	rjmp	.+632    	; 0x1fbec <main+0x1402>
   1f974:	85 e0       	ldi	r24, 0x05	; 5
   1f976:	f1 cf       	rjmp	.-30     	; 0x1f95a <main+0x1170>
   1f978:	9f 81       	ldd	r25, Y+7	; 0x07
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
					msgBuffer[1] 	=	STATUS_CMD_OK;
   1f97a:	99 23       	and	r25, r25
					msgBuffer[2] 	=	8;
   1f97c:	09 f4       	brne	.+2      	; 0x1f980 <main+0x1196>
   1f97e:	e6 c0       	rjmp	.+460    	; 0x1fb4c <main+0x1362>
					msgBuffer[3] 	=	'A';
   1f980:	91 30       	cpi	r25, 0x01	; 1
   1f982:	09 f4       	brne	.+2      	; 0x1f986 <main+0x119c>
					msgBuffer[4] 	=	'V';
   1f984:	31 c1       	rjmp	.+610    	; 0x1fbe8 <main+0x13fe>
   1f986:	95 e0       	ldi	r25, 0x05	; 5
					msgBuffer[5] 	=	'R';
   1f988:	0f cb       	rjmp	.-2530   	; 0x1efa8 <main+0x7be>
   1f98a:	cf 5c       	subi	r28, 0xCF	; 207
					msgBuffer[6] 	=	'I';
   1f98c:	de 4f       	sbci	r29, 0xFE	; 254
   1f98e:	88 81       	ld	r24, Y
					msgBuffer[7] 	=	'S';
   1f990:	99 81       	ldd	r25, Y+1	; 0x01
   1f992:	aa 81       	ldd	r26, Y+2	; 0x02
					msgBuffer[8] 	=	'P';
   1f994:	bb 81       	ldd	r27, Y+3	; 0x03
   1f996:	c1 53       	subi	r28, 0x31	; 49
					msgBuffer[9] 	=	'_';
   1f998:	d1 40       	sbci	r29, 0x01	; 1
   1f99a:	80 30       	cpi	r24, 0x00	; 0
					msgBuffer[10]	=	'2';
   1f99c:	e0 ec       	ldi	r30, 0xC0	; 192
   1f99e:	9e 07       	cpc	r25, r30
						}
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
   1f9a0:	e1 e0       	ldi	r30, 0x01	; 1
   1f9a2:	ae 07       	cpc	r26, r30
					msgBuffer[6] 	=	'I';
					msgBuffer[7] 	=	'S';
					msgBuffer[8] 	=	'P';
					msgBuffer[9] 	=	'_';
					msgBuffer[10]	=	'2';
					break;
   1f9a4:	e0 e0       	ldi	r30, 0x00	; 0
						msgBuffer[2]	=	value;
					}
					break;

				case CMD_LEAVE_PROGMODE_ISP:
					isLeave	=	1;
   1f9a6:	be 07       	cpc	r27, r30
   1f9a8:	30 f5       	brcc	.+76     	; 0x1f9f6 <main+0x120c>
   1f9aa:	93 e0       	ldi	r25, 0x03	; 3

				case CMD_READ_FUSE_ISP:
					{
						uint8_t fuseBits;

						if ( msgBuffer[2] == 0x50 )
   1f9ac:	cf 5c       	subi	r28, 0xCF	; 207
   1f9ae:	de 4f       	sbci	r29, 0xFE	; 254
   1f9b0:	48 80       	ld	r4, Y
   1f9b2:	59 80       	ldd	r5, Y+1	; 0x01
							else
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
						}
						else
						{
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   1f9b4:	6a 80       	ldd	r6, Y+2	; 0x02
   1f9b6:	7b 80       	ldd	r7, Y+3	; 0x03
   1f9b8:	c1 53       	subi	r28, 0x31	; 49
   1f9ba:	d1 40       	sbci	r29, 0x01	; 1
   1f9bc:	f2 01       	movw	r30, r4
   1f9be:	60 92 5b 00 	sts	0x005B, r6
						}
						msgLength		=	4;
						msgBuffer[1]	=	STATUS_CMD_OK;
						msgBuffer[2]	=	fuseBits;
   1f9c2:	90 93 57 00 	sts	0x0057, r25
						}
						else
						{
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
						}
						msgLength		=	4;
   1f9c6:	e8 95       	spm
   1f9c8:	07 b6       	in	r0, 0x37	; 55
						msgBuffer[1]	=	STATUS_CMD_OK;
						msgBuffer[2]	=	fuseBits;
						msgBuffer[3]	=	STATUS_CMD_OK;
					}
					break;
   1f9ca:	00 fc       	sbrc	r0, 0
					msgBuffer[1]	=	STATUS_CMD_OK;
					break;

				case CMD_READ_SIGNATURE_ISP:
					{
						uint8_t signatureIndex	=	msgBuffer[4];
   1f9cc:	fd cf       	rjmp	.-6      	; 0x1f9c8 <main+0x11de>
						uint8_t signature;

						if ( signatureIndex == 0 )
   1f9ce:	cf 5c       	subi	r28, 0xCF	; 207
   1f9d0:	de 4f       	sbci	r29, 0xFE	; 254
   1f9d2:	88 81       	ld	r24, Y
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
   1f9d4:	99 81       	ldd	r25, Y+1	; 0x01
   1f9d6:	aa 81       	ldd	r26, Y+2	; 0x02
   1f9d8:	bb 81       	ldd	r27, Y+3	; 0x03
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						else
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   1f9da:	c1 53       	subi	r28, 0x31	; 49
   1f9dc:	d1 40       	sbci	r29, 0x01	; 1
						uint8_t answerByte;
						uint8_t flag=0;

						if ( msgBuffer[4]== 0x30 )
						{
							uint8_t signatureIndex	=	msgBuffer[6];
   1f9de:	80 50       	subi	r24, 0x00	; 0

							if ( signatureIndex == 0 )
   1f9e0:	9f 4f       	sbci	r25, 0xFF	; 255
   1f9e2:	af 4f       	sbci	r26, 0xFF	; 255
   1f9e4:	bf 4f       	sbci	r27, 0xFF	; 255
							{
								answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
							}
							else if ( signatureIndex == 1 )
   1f9e6:	cf 5c       	subi	r28, 0xCF	; 207
   1f9e8:	de 4f       	sbci	r29, 0xFE	; 254
   1f9ea:	88 83       	st	Y, r24
							{
								answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
							}
							else
							{
								answerByte	=	SIGNATURE_BYTES & 0x000000FF;
   1f9ec:	99 83       	std	Y+1, r25	; 0x01
   1f9ee:	aa 83       	std	Y+2, r26	; 0x02


						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
						{
							// erase only main section (bootloader protection)
							if (eraseAddress < APP_END )
   1f9f0:	bb 83       	std	Y+3, r27	; 0x03
   1f9f2:	c1 53       	subi	r28, 0x31	; 49
   1f9f4:	d1 40       	sbci	r29, 0x01	; 1
   1f9f6:	ca 5d       	subi	r28, 0xDA	; 218
   1f9f8:	de 4f       	sbci	r29, 0xFE	; 254
   1f9fa:	a8 80       	ld	r10, Y
   1f9fc:	b9 80       	ldd	r11, Y+1	; 0x01
   1f9fe:	ca 80       	ldd	r12, Y+2	; 0x02
   1fa00:	db 80       	ldd	r13, Y+3	; 0x03
   1fa02:	c6 52       	subi	r28, 0x26	; 38
   1fa04:	d1 40       	sbci	r29, 0x01	; 1
   1fa06:	de 01       	movw	r26, r28
   1fa08:	1b 96       	adiw	r26, 0x0b	; 11
   1fa0a:	61 e0       	ldi	r22, 0x01	; 1
   1fa0c:	fd 01       	movw	r30, r26
   1fa0e:	d6 01       	movw	r26, r12
							{
								boot_page_erase(eraseAddress);	// Perform page erase
   1fa10:	c5 01       	movw	r24, r10
   1fa12:	5a 01       	movw	r10, r20
   1fa14:	67 01       	movw	r12, r14
   1fa16:	78 01       	movw	r14, r16
   1fa18:	af 01       	movw	r20, r30
   1fa1a:	fa 01       	movw	r30, r20
   1fa1c:	00 81       	ld	r16, Z
   1fa1e:	71 81       	ldd	r23, Z+1	; 0x01
   1fa20:	4e 5f       	subi	r20, 0xFE	; 254
   1fa22:	5f 4f       	sbci	r21, 0xFF	; 255
   1fa24:	c7 5c       	subi	r28, 0xC7	; 199
   1fa26:	de 4f       	sbci	r29, 0xFE	; 254
   1fa28:	78 83       	st	Y, r23
   1fa2a:	c9 53       	subi	r28, 0x39	; 57
   1fa2c:	d1 40       	sbci	r29, 0x01	; 1
								boot_spm_busy_wait();		// Wait until the memory is erased.
   1fa2e:	c8 5c       	subi	r28, 0xC8	; 200
   1fa30:	de 4f       	sbci	r29, 0xFE	; 254
   1fa32:	18 82       	st	Y, r1
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   1fa34:	c8 53       	subi	r28, 0x38	; 56
   1fa36:	d1 40       	sbci	r29, 0x01	; 1
   1fa38:	10 e0       	ldi	r17, 0x00	; 0
   1fa3a:	c8 5c       	subi	r28, 0xC8	; 200
   1fa3c:	de 4f       	sbci	r29, 0xFE	; 254
   1fa3e:	48 80       	ld	r4, Y
   1fa40:	59 80       	ldd	r5, Y+1	; 0x01
   1fa42:	c8 53       	subi	r28, 0x38	; 56
   1fa44:	d1 40       	sbci	r29, 0x01	; 1
   1fa46:	04 29       	or	r16, r4
   1fa48:	15 29       	or	r17, r5
   1fa4a:	08 01       	movw	r0, r16
   1fa4c:	fc 01       	movw	r30, r24
   1fa4e:	a0 93 5b 00 	sts	0x005B, r26
   1fa52:	60 93 57 00 	sts	0x0057, r22
   1fa56:	e8 95       	spm
   1fa58:	11 24       	eor	r1, r1
   1fa5a:	02 96       	adiw	r24, 0x02	; 2
						uint8_t fuseBits;

						if ( msgBuffer[2] == 0x50 )
						{
							if ( msgBuffer[3] == 0x08 )
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   1fa5c:	a1 1d       	adc	r26, r1
   1fa5e:	b1 1d       	adc	r27, r1
   1fa60:	22 50       	subi	r18, 0x02	; 2
   1fa62:	30 40       	sbci	r19, 0x00	; 0
   1fa64:	d1 f6       	brne	.-76     	; 0x1fa1a <main+0x1230>
   1fa66:	a5 01       	movw	r20, r10
   1fa68:	87 01       	movw	r16, r14
   1fa6a:	76 01       	movw	r14, r12

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						uint16_t	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						uint8_t	*p	=	msgBuffer+10;
   1fa6c:	5c 01       	movw	r10, r24
   1fa6e:	6d 01       	movw	r12, r26
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);
   1fa70:	25 e0       	ldi	r18, 0x05	; 5
   1fa72:	ca 5d       	subi	r28, 0xDA	; 218
   1fa74:	de 4f       	sbci	r29, 0xFE	; 254
   1fa76:	48 80       	ld	r4, Y
   1fa78:	59 80       	ldd	r5, Y+1	; 0x01
   1fa7a:	6a 80       	ldd	r6, Y+2	; 0x02
   1fa7c:	7b 80       	ldd	r7, Y+3	; 0x03
   1fa7e:	c6 52       	subi	r28, 0x26	; 38
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
							}

							/* Write FLASH */
							do {
								lowByte		=	*p++;
   1fa80:	d1 40       	sbci	r29, 0x01	; 1
   1fa82:	f2 01       	movw	r30, r4
								highByte 	=	*p++;
   1fa84:	60 92 5b 00 	sts	0x005B, r6

/* Main program loop */
int main(void) __attribute__ ((OS_main));

//*****************************************************************************
int main(void)
   1fa88:	20 93 57 00 	sts	0x0057, r18
							/* Write FLASH */
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
   1fa8c:	e8 95       	spm
   1fa8e:	07 b6       	in	r0, 0x37	; 55
   1fa90:	00 fc       	sbrc	r0, 0
   1fa92:	fd cf       	rjmp	.-6      	; 0x1fa8e <main+0x12a4>
   1fa94:	f1 e1       	ldi	r31, 0x11	; 17
   1fa96:	f0 93 57 00 	sts	0x0057, r31
   1fa9a:	e8 95       	spm
   1fa9c:	ca 5d       	subi	r28, 0xDA	; 218
   1fa9e:	de 4f       	sbci	r29, 0xFE	; 254
   1faa0:	a8 82       	st	Y, r10
   1faa2:	b9 82       	std	Y+1, r11	; 0x01
   1faa4:	ca 82       	std	Y+2, r12	; 0x02
   1faa6:	db 82       	std	Y+3, r13	; 0x03
   1faa8:	c6 52       	subi	r28, 0x26	; 38
   1faaa:	d1 40       	sbci	r29, 0x01	; 1
   1faac:	64 c9       	rjmp	.-3384   	; 0x1ed76 <main+0x58c>
   1faae:	83 e7       	ldi	r24, 0x73	; 115
								boot_page_fill(address,data);
   1fab0:	93 ee       	ldi	r25, 0xE3	; 227
   1fab2:	60 e0       	ldi	r22, 0x00	; 0
   1fab4:	0e 94 9e f2 	call	0x1e53c	; 0x1e53c <PrintFromPROGMEMln>
   1fab8:	35 c8       	rjmp	.-3990   	; 0x1eb24 <main+0x33a>
   1faba:	8c 81       	ldd	r24, Y+4	; 0x04
   1fabc:	88 30       	cpi	r24, 0x08	; 8
   1fabe:	09 f4       	brne	.+2      	; 0x1fac2 <main+0x12d8>

								address	=	address + 2;	// Select next word in memory
   1fac0:	8c c0       	rjmp	.+280    	; 0x1fbda <main+0x13f0>
   1fac2:	e0 e0       	ldi	r30, 0x00	; 0
   1fac4:	f0 e0       	ldi	r31, 0x00	; 0
								size	-=	2;				// Reduce number of bytes to write by two
   1fac6:	a9 e0       	ldi	r26, 0x09	; 9
   1fac8:	a0 93 57 00 	sts	0x0057, r26
							} while (size);					// Loop until all bytes written
   1facc:	84 91       	lpm	r24, Z+
   1face:	45 cf       	rjmp	.-374    	; 0x1f95a <main+0x1170>
   1fad0:	8e e1       	ldi	r24, 0x1E	; 30
   1fad2:	43 cf       	rjmp	.-378    	; 0x1f95a <main+0x1170>
   1fad4:	de 01       	movw	r26, r28

							boot_page_write(tempaddress);
   1fad6:	13 96       	adiw	r26, 0x03	; 3
   1fad8:	ca 5d       	subi	r28, 0xDA	; 218
   1fada:	de 4f       	sbci	r29, 0xFE	; 254
   1fadc:	a8 80       	ld	r10, Y
   1fade:	b9 80       	ldd	r11, Y+1	; 0x01
   1fae0:	ca 80       	ldd	r12, Y+2	; 0x02
   1fae2:	db 80       	ldd	r13, Y+3	; 0x03
   1fae4:	c6 52       	subi	r28, 0x26	; 38
   1fae6:	d1 40       	sbci	r29, 0x01	; 1
   1fae8:	9c 01       	movw	r18, r24
   1faea:	cb be       	out	0x3b, r12	; 59
   1faec:	f5 01       	movw	r30, r10
   1faee:	87 91       	elpm	r24, Z+
   1faf0:	96 91       	elpm	r25, Z+
   1faf2:	8c 93       	st	X, r24
							boot_spm_busy_wait();
   1faf4:	11 96       	adiw	r26, 0x01	; 1
   1faf6:	9c 93       	st	X, r25
   1faf8:	11 97       	sbiw	r26, 0x01	; 1
							boot_rww_enable();				// Re-enable the RWW section
   1fafa:	12 96       	adiw	r26, 0x02	; 2
   1fafc:	92 e0       	ldi	r25, 0x02	; 2
   1fafe:	49 2e       	mov	r4, r25
   1fb00:	51 2c       	mov	r5, r1
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);

								address	=	address + 2;	// Select next word in memory
   1fb02:	61 2c       	mov	r6, r1
   1fb04:	71 2c       	mov	r7, r1
   1fb06:	a4 0c       	add	r10, r4
   1fb08:	b5 1c       	adc	r11, r5
   1fb0a:	c6 1c       	adc	r12, r6
   1fb0c:	d7 1c       	adc	r13, r7
   1fb0e:	62 50       	subi	r22, 0x02	; 2
   1fb10:	70 40       	sbci	r23, 0x00	; 0
   1fb12:	59 f7       	brne	.-42     	; 0x1faea <main+0x1300>
			recchar();
		}
	}
	else
	{
		PrintFromPROGMEMln(gTextMsg_MustBeLetter, 0);
   1fb14:	f2 c8       	rjmp	.-3612   	; 0x1ecfa <main+0x510>
   1fb16:	80 e0       	ldi	r24, 0x00	; 0
   1fb18:	5d ca       	rjmp	.-2886   	; 0x1efd4 <main+0x7ea>
   1fb1a:	03 34       	cpi	r16, 0x43	; 67
   1fb1c:	09 f4       	brne	.+2      	; 0x1fb20 <main+0x1336>
   1fb1e:	46 c0       	rjmp	.+140    	; 0x1fbac <main+0x13c2>
   1fb20:	04 34       	cpi	r16, 0x44	; 68
					{
						uint8_t fuseBits;

						if ( msgBuffer[2] == 0x50 )
						{
							if ( msgBuffer[3] == 0x08 )
   1fb22:	09 f0       	breq	.+2      	; 0x1fb26 <main+0x133c>
   1fb24:	e9 c9       	rjmp	.-3118   	; 0x1eef8 <main+0x70e>
   1fb26:	5f ef       	ldi	r21, 0xFF	; 255
   1fb28:	5a b9       	out	0x0a, r21	; 10
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
							else
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   1fb2a:	60 91 c0 00 	lds	r22, 0x00C0
   1fb2e:	67 fd       	sbrc	r22, 7
   1fb30:	50 c0       	rjmp	.+160    	; 0x1fbd2 <main+0x13e8>
   1fb32:	8b b1       	in	r24, 0x0b	; 11
   1fb34:	80 95       	com	r24
   1fb36:	8b b9       	out	0x0b, r24	; 11
					{
						uint8_t signatureIndex	=	msgBuffer[4];
						uint8_t signature;

						if ( signatureIndex == 0 )
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
   1fb38:	2f ef       	ldi	r18, 0xFF	; 255
   1fb3a:	31 ee       	ldi	r19, 0xE1	; 225
					{
						uint16_t	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						uint8_t	*p		=	msgBuffer+1;
						msgLength				=	size+3;

						*p++	=	STATUS_CMD_OK;
   1fb3c:	44 e0       	ldi	r20, 0x04	; 4
   1fb3e:	21 50       	subi	r18, 0x01	; 1
   1fb40:	30 40       	sbci	r19, 0x00	; 0
   1fb42:	40 40       	sbci	r20, 0x00	; 0
   1fb44:	e1 f7       	brne	.-8      	; 0x1fb3e <main+0x1354>
   1fb46:	00 c0       	rjmp	.+0      	; 0x1fb48 <main+0x135e>
   1fb48:	00 00       	nop
   1fb4a:	ef cf       	rjmp	.-34     	; 0x1fb2a <main+0x1340>
   1fb4c:	9e e1       	ldi	r25, 0x1E	; 30
   1fb4e:	2c ca       	rjmp	.-2984   	; 0x1efa8 <main+0x7be>
   1fb50:	3f ef       	ldi	r19, 0xFF	; 255

							// Read FLASH
							do {
						//#if defined(RAMPZ)
						#if (FLASHEND > 0x10000)
								data	=	pgm_read_word_far(address);
   1fb52:	31 b9       	out	0x01, r19	; 1
   1fb54:	c0 90 c0 00 	lds	r12, 0x00C0
   1fb58:	c7 fc       	sbrc	r12, 7
						#else
								data	=	pgm_read_word_near(address);
						#endif
								*p++	=	(uint8_t)data;		//LSB
   1fb5a:	20 c0       	rjmp	.+64     	; 0x1fb9c <main+0x13b2>
								*p++	=	(uint8_t)(data >> 8);	//MSB
   1fb5c:	82 b1       	in	r24, 0x02	; 2
   1fb5e:	80 95       	com	r24
   1fb60:	82 b9       	out	0x02, r24	; 2

/* Main program loop */
int main(void) __attribute__ ((OS_main));

//*****************************************************************************
int main(void)
   1fb62:	8f ef       	ldi	r24, 0xFF	; 255
						#else
								data	=	pgm_read_word_near(address);
						#endif
								*p++	=	(uint8_t)data;		//LSB
								*p++	=	(uint8_t)(data >> 8);	//MSB
								address	+=	2;							// Select next word in memory
   1fb64:	91 ee       	ldi	r25, 0xE1	; 225
   1fb66:	a4 e0       	ldi	r26, 0x04	; 4
   1fb68:	81 50       	subi	r24, 0x01	; 1
   1fb6a:	90 40       	sbci	r25, 0x00	; 0
   1fb6c:	a0 40       	sbci	r26, 0x00	; 0
   1fb6e:	e1 f7       	brne	.-8      	; 0x1fb68 <main+0x137e>
   1fb70:	00 c0       	rjmp	.+0      	; 0x1fb72 <main+0x1388>
   1fb72:	00 00       	nop
   1fb74:	ef cf       	rjmp	.-34     	; 0x1fb54 <main+0x136a>
								size	-=	2;
   1fb76:	4f ef       	ldi	r20, 0xFF	; 255
   1fb78:	44 b9       	out	0x04, r20	; 4
							}while (size);
   1fb7a:	d0 90 c0 00 	lds	r13, 0x00C0

				case CMD_GET_PARAMETER:
					{
						uint8_t value;

						switch(msgBuffer[1])
   1fb7e:	d7 fc       	sbrc	r13, 7
   1fb80:	13 c0       	rjmp	.+38     	; 0x1fba8 <main+0x13be>
	PrintNewLine();

	if ((portLetter >= 'A') && (portLetter <= 'Z'))
	{
		getCharFlag	=	true;
		switch(portLetter)
   1fb82:	85 b1       	in	r24, 0x05	; 5
   1fb84:	80 95       	com	r24
   1fb86:	85 b9       	out	0x05, r24	; 5
   1fb88:	2f ef       	ldi	r18, 0xFF	; 255
   1fb8a:	31 ee       	ldi	r19, 0xE1	; 225
   1fb8c:	44 e0       	ldi	r20, 0x04	; 4
				break;
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
   1fb8e:	21 50       	subi	r18, 0x01	; 1
   1fb90:	30 40       	sbci	r19, 0x00	; 0


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE));	// wait for data
   1fb92:	40 40       	sbci	r20, 0x00	; 0
   1fb94:	e1 f7       	brne	.-8      	; 0x1fb8e <main+0x13a4>
		#endif

		#ifdef DDRD
			case 'D':
				DDRD	=	0xff;
				while (!Serial_Available())
   1fb96:	00 c0       	rjmp	.+0      	; 0x1fb98 <main+0x13ae>
   1fb98:	00 00       	nop
   1fb9a:	ef cf       	rjmp	.-34     	; 0x1fb7a <main+0x1390>
   1fb9c:	12 b8       	out	0x02, r1	; 2
   1fb9e:	70 91 c0 00 	lds	r23, 0x00C0
   1fba2:	77 ff       	sbrs	r23, 7
   1fba4:	fc cf       	rjmp	.-8      	; 0x1fb9e <main+0x13b4>
   1fba6:	1b ce       	rjmp	.-970    	; 0x1f7de <main+0xff4>
   1fba8:	15 b8       	out	0x05, r1	; 5
   1fbaa:	f9 cf       	rjmp	.-14     	; 0x1fb9e <main+0x13b4>
   1fbac:	af ef       	ldi	r26, 0xFF	; 255
   1fbae:	a7 b9       	out	0x07, r26	; 7
   1fbb0:	10 91 c0 00 	lds	r17, 0x00C0
						{
							uint8_t signatureIndex	=	msgBuffer[6];

							if ( signatureIndex == 0 )
							{
								answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
   1fbb4:	17 fd       	sbrc	r17, 7
   1fbb6:	0f c0       	rjmp	.+30     	; 0x1fbd6 <main+0x13ec>
		getCharFlag	=	true;
		switch(portLetter)
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
   1fbb8:	88 b1       	in	r24, 0x08	; 8
   1fbba:	80 95       	com	r24


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE));	// wait for data
   1fbbc:	88 b9       	out	0x08, r24	; 8
   1fbbe:	8f ef       	ldi	r24, 0xFF	; 255
		switch(portLetter)
		{
		#ifdef DDRA
			case 'A':
				DDRA	=	0xff;
				while (!Serial_Available())
   1fbc0:	91 ee       	ldi	r25, 0xE1	; 225
   1fbc2:	a4 e0       	ldi	r26, 0x04	; 4
   1fbc4:	81 50       	subi	r24, 0x01	; 1
   1fbc6:	90 40       	sbci	r25, 0x00	; 0
   1fbc8:	a0 40       	sbci	r26, 0x00	; 0
   1fbca:	e1 f7       	brne	.-8      	; 0x1fbc4 <main+0x13da>
   1fbcc:	00 c0       	rjmp	.+0      	; 0x1fbce <main+0x13e4>
   1fbce:	00 00       	nop
   1fbd0:	ef cf       	rjmp	.-34     	; 0x1fbb0 <main+0x13c6>
   1fbd2:	1b b8       	out	0x0b, r1	; 11
   1fbd4:	e4 cf       	rjmp	.-56     	; 0x1fb9e <main+0x13b4>
   1fbd6:	18 b8       	out	0x08, r1	; 8
   1fbd8:	e2 cf       	rjmp	.-60     	; 0x1fb9e <main+0x13b4>
   1fbda:	e2 e0       	ldi	r30, 0x02	; 2
   1fbdc:	f0 e0       	ldi	r31, 0x00	; 0
				break;
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
   1fbde:	39 e0       	ldi	r19, 0x09	; 9
   1fbe0:	30 93 57 00 	sts	0x0057, r19


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE));	// wait for data
   1fbe4:	84 91       	lpm	r24, Z+
		#endif

		#ifdef DDRB
			case 'B':
				DDRB	=	0xff;
				while (!Serial_Available())
   1fbe6:	b9 ce       	rjmp	.-654    	; 0x1f95a <main+0x1170>
   1fbe8:	97 e9       	ldi	r25, 0x97	; 151
   1fbea:	de c9       	rjmp	.-3140   	; 0x1efa8 <main+0x7be>
   1fbec:	87 e9       	ldi	r24, 0x97	; 151
   1fbee:	b5 ce       	rjmp	.-662    	; 0x1f95a <main+0x1170>
   1fbf0:	e3 e0       	ldi	r30, 0x03	; 3
   1fbf2:	f0 e0       	ldi	r31, 0x00	; 0
   1fbf4:	29 e0       	ldi	r18, 0x09	; 9
   1fbf6:	20 93 57 00 	sts	0x0057, r18
   1fbfa:	94 91       	lpm	r25, Z+
   1fbfc:	d5 c9       	rjmp	.-3158   	; 0x1efa8 <main+0x7be>
   1fbfe:	e0 e0       	ldi	r30, 0x00	; 0
   1fc00:	f0 e0       	ldi	r31, 0x00	; 0
   1fc02:	99 e0       	ldi	r25, 0x09	; 9
				while (!Serial_Available())
				{
					PORTA	^=	0xff;
					_delay_ms(100);
				}
				PORTA	=	0;
   1fc04:	90 93 57 00 	sts	0x0057, r25
/*
 * Read single byte from USART, block if no data available
 */
static uint8_t recchar(void)
{
	while (!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)))
   1fc08:	94 91       	lpm	r25, Z+
   1fc0a:	ce c9       	rjmp	.-3172   	; 0x1efa8 <main+0x7be>
   1fc0c:	ee 24       	eor	r14, r14
   1fc0e:	ff 24       	eor	r15, r15
				while (!Serial_Available())
				{
					PORTB	^=	0xff;
					_delay_ms(100);
				}
				PORTB	=	0;
   1fc10:	f3 cc       	rjmp	.-1562   	; 0x1f5f8 <main+0xe0e>

0001fc12 <__divmodhi4>:
   1fc12:	97 fb       	bst	r25, 7
				break;
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
   1fc14:	09 2e       	mov	r0, r25
   1fc16:	07 26       	eor	r0, r23


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE));	// wait for data
   1fc18:	0a d0       	rcall	.+20     	; 0x1fc2e <__divmodhi4_neg1>
   1fc1a:	77 fd       	sbrc	r23, 7
		#endif

		#ifdef DDRC
			case 'C':
				DDRC	=	0xff;
				while (!Serial_Available())
   1fc1c:	04 d0       	rcall	.+8      	; 0x1fc26 <__divmodhi4_neg2>
   1fc1e:	2e d0       	rcall	.+92     	; 0x1fc7c <__udivmodhi4>
   1fc20:	06 d0       	rcall	.+12     	; 0x1fc2e <__divmodhi4_neg1>
   1fc22:	00 20       	and	r0, r0
   1fc24:	1a f4       	brpl	.+6      	; 0x1fc2c <__divmodhi4_exit>

0001fc26 <__divmodhi4_neg2>:
   1fc26:	70 95       	com	r23
   1fc28:	61 95       	neg	r22
   1fc2a:	7f 4f       	sbci	r23, 0xFF	; 255

0001fc2c <__divmodhi4_exit>:
   1fc2c:	08 95       	ret

0001fc2e <__divmodhi4_neg1>:
   1fc2e:	f6 f7       	brtc	.-4      	; 0x1fc2c <__divmodhi4_exit>
   1fc30:	90 95       	com	r25
   1fc32:	81 95       	neg	r24
   1fc34:	9f 4f       	sbci	r25, 0xFF	; 255
   1fc36:	08 95       	ret

0001fc38 <__udivmodsi4>:
   1fc38:	a1 e2       	ldi	r26, 0x21	; 33
				while (!Serial_Available())
				{
					PORTD	^=	0xff;
					_delay_ms(100);
				}
				PORTD	=	0;
   1fc3a:	1a 2e       	mov	r1, r26
   1fc3c:	aa 1b       	sub	r26, r26
				while (!Serial_Available())
				{
					PORTC	^=	0xff;
					_delay_ms(100);
				}
				PORTC	=	0;
   1fc3e:	bb 1b       	sub	r27, r27
   1fc40:	fd 01       	movw	r30, r26
						uint8_t fuseBits;

						if ( msgBuffer[2] == 0x50 )
						{
							if ( msgBuffer[3] == 0x08 )
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   1fc42:	0d c0       	rjmp	.+26     	; 0x1fc5e <__udivmodsi4_ep>

0001fc44 <__udivmodsi4_loop>:
   1fc44:	aa 1f       	adc	r26, r26
   1fc46:	bb 1f       	adc	r27, r27
   1fc48:	ee 1f       	adc	r30, r30
   1fc4a:	ff 1f       	adc	r31, r31
   1fc4c:	a2 17       	cp	r26, r18
   1fc4e:	b3 07       	cpc	r27, r19
							{
								answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
							}
							else if ( signatureIndex == 1 )
							{
								answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   1fc50:	e4 07       	cpc	r30, r20
   1fc52:	f5 07       	cpc	r31, r21
						uint8_t signature;

						if ( signatureIndex == 0 )
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   1fc54:	20 f0       	brcs	.+8      	; 0x1fc5e <__udivmodsi4_ep>
   1fc56:	a2 1b       	sub	r26, r18
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
							}
							else if (msgBuffer[4] == 0x58)
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   1fc58:	b3 0b       	sbc	r27, r19
   1fc5a:	e4 0b       	sbc	r30, r20
   1fc5c:	f5 0b       	sbc	r31, r21

0001fc5e <__udivmodsi4_ep>:
   1fc5e:	66 1f       	adc	r22, r22
   1fc60:	77 1f       	adc	r23, r23
   1fc62:	88 1f       	adc	r24, r24
   1fc64:	99 1f       	adc	r25, r25
						//	answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
						//	answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
						//	answerByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
							if (msgBuffer[4] == 0x50)
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   1fc66:	1a 94       	dec	r1
   1fc68:	69 f7       	brne	.-38     	; 0x1fc44 <__udivmodsi4_loop>
   1fc6a:	60 95       	com	r22
   1fc6c:	70 95       	com	r23
   1fc6e:	80 95       	com	r24
   1fc70:	90 95       	com	r25
   1fc72:	9b 01       	movw	r18, r22
	//*	now go back through and test
	PrintNewLine();
	PrintNewLine();
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
	PrintNewLine();
	errorCount	=	0;
   1fc74:	ac 01       	movw	r20, r24
   1fc76:	bd 01       	movw	r22, r26
   1fc78:	cf 01       	movw	r24, r30
   1fc7a:	08 95       	ret

0001fc7c <__udivmodhi4>:
   1fc7c:	aa 1b       	sub	r26, r26
   1fc7e:	bb 1b       	sub	r27, r27
   1fc80:	51 e1       	ldi	r21, 0x11	; 17
   1fc82:	07 c0       	rjmp	.+14     	; 0x1fc92 <__udivmodhi4_ep>

0001fc84 <__udivmodhi4_loop>:
   1fc84:	aa 1f       	adc	r26, r26
   1fc86:	bb 1f       	adc	r27, r27
   1fc88:	a6 17       	cp	r26, r22
   1fc8a:	b7 07       	cpc	r27, r23
   1fc8c:	10 f0       	brcs	.+4      	; 0x1fc92 <__udivmodhi4_ep>
   1fc8e:	a6 1b       	sub	r26, r22
   1fc90:	b7 0b       	sbc	r27, r23

0001fc92 <__udivmodhi4_ep>:
   1fc92:	88 1f       	adc	r24, r24
   1fc94:	99 1f       	adc	r25, r25
   1fc96:	5a 95       	dec	r21
   1fc98:	a9 f7       	brne	.-22     	; 0x1fc84 <__udivmodhi4_loop>
   1fc9a:	80 95       	com	r24
   1fc9c:	90 95       	com	r25
   1fc9e:	bc 01       	movw	r22, r24
   1fca0:	cd 01       	movw	r24, r26
   1fca2:	08 95       	ret

0001fca4 <__eerd_byte_m1284p>:
   1fca4:	f9 99       	sbic	0x1f, 1	; 31
   1fca6:	fe cf       	rjmp	.-4      	; 0x1fca4 <__eerd_byte_m1284p>
   1fca8:	92 bd       	out	0x22, r25	; 34
   1fcaa:	81 bd       	out	0x21, r24	; 33
   1fcac:	f8 9a       	sbi	0x1f, 0	; 31
   1fcae:	99 27       	eor	r25, r25
   1fcb0:	80 b5       	in	r24, 0x20	; 32
   1fcb2:	08 95       	ret

0001fcb4 <__eeupd_byte_m1284p>:
   1fcb4:	26 2f       	mov	r18, r22

0001fcb6 <__eeupd_r18_m1284p>:
   1fcb6:	f9 99       	sbic	0x1f, 1	; 31
   1fcb8:	fe cf       	rjmp	.-4      	; 0x1fcb6 <__eeupd_r18_m1284p>
   1fcba:	92 bd       	out	0x22, r25	; 34
   1fcbc:	81 bd       	out	0x21, r24	; 33
   1fcbe:	f8 9a       	sbi	0x1f, 0	; 31
   1fcc0:	01 97       	sbiw	r24, 0x01	; 1
   1fcc2:	00 b4       	in	r0, 0x20	; 32
   1fcc4:	02 16       	cp	r0, r18
   1fcc6:	39 f0       	breq	.+14     	; 0x1fcd6 <__eeupd_r18_m1284p+0x20>
   1fcc8:	1f ba       	out	0x1f, r1	; 31
   1fcca:	20 bd       	out	0x20, r18	; 32
   1fccc:	0f b6       	in	r0, 0x3f	; 63
   1fcce:	f8 94       	cli
   1fcd0:	fa 9a       	sbi	0x1f, 2	; 31
   1fcd2:	f9 9a       	sbi	0x1f, 1	; 31
   1fcd4:	0f be       	out	0x3f, r0	; 63
   1fcd6:	08 95       	ret

0001fcd8 <_exit>:
   1fcd8:	f8 94       	cli

0001fcda <__stop_program>:
   1fcda:	ff cf       	rjmp	.-2      	; 0x1fcda <__stop_program>
